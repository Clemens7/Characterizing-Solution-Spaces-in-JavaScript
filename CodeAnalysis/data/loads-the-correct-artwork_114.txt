import * as frame from './frame.js';

var MET_API_OBJECTS_ENDPOINT = "https://collectionapi.metmuseum.org/public/collection/v1/objects/"

window.onload = function onloadFunction() {
	setPreviewImage();
	setParam();
	frame.updateItemAmount();
	updateSizes();
	updatePricePreviewImg();
};

document.getElementById("config-form").addEventListener("submit", );

document.getElementById('frameWidth').addEventListener("focusout", );
document.getElementById('frameWidthR').addEventListener("focusout", );
document.getElementById('matWidth').addEventListener("focusout", );
document.getElementById('matWidthR').addEventListener("focusout", );

var radios = document.querySelectorAll('input[type="radio"]');
    for( let i = 0; i < radios.length; i++ ) {
        radios[i].addEventListener("click", updatePricePreviewImg);
    }






function updatePricePreviewImg(){
	let printSize=document.querySelector('input[name="printSize"]:checked').value;
	let frameStyle=document.querySelector('input[name="frameStyle"]:checked').value;
	let frameWidth=document.getElementById('frameWidth').value*10;
	let matWidth=document.getElementById('matWidth').value*10;
	let price=frame.calculatePrice(printSize, frameStyle, frameWidth, matWidth);
	let matColor=document.querySelector('input[name="matColor"]:checked').value;
	let container=document.getElementById('preview-container');
	let img= document.getElementById("preview-image");

	
	if(price.toString().substring(price.toString().indexOf("."),price.toString().length).length ==2)
	document.getElementById('price').innerHTML="€ "+price;
	
	frame.render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth);

	}

function updateSizes(){
	let img = document.getElementById("preview-image");
	let sizes=frame.getPrintSizes(img);
	document.getElementById('print-size-s-label').innerHTML="Small<br>"+sizes['S'][0]/10+" × "+sizes['S'][1]/10+" cm";
	document.getElementById('print-size-m-label').innerHTML="Medium<br>"+sizes['M'][0]/10+" × "+sizes['M'][1]/10+" cm";
	document.getElementById('print-size-l-label').innerHTML="Large<br>"+sizes['L'][0]/10+" × "+sizes['L'][1]/10+" cm";


}

function setParam(){
	const queryString = window.location.search;
	const urlParams = new URLSearchParams(queryString);

	if(urlParams.has('printSize'))
	
	if(urlParams.has('frameStyle'))
		
	if(urlParams.has('matColor'))
	
	if(urlParams.has('matWidth'))
	
	if(urlParams.has('frameWidth'))
}







function setPreviewImage() {
	var params = (new URL(document.location)).searchParams;
	var objectID = params.get("objectID");

	if (!objectID) 
	if (localStorage.getItem(objectID))  else {
		console.log("fetching from API: " + objectID);
		fetch(MET_API_OBJECTS_ENDPOINT + objectID)
			.then(function(response) {
				if (response.status === 404) 
			})
			.then(res => res.json())
			.then()
			.catch(err => {
				console.error(err);
			});
	}
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    price += 30;
    if (frameStyle == 'classic')  else if (frameStyle == 'natural') {
        price += (frameWidth / 10) * 0.8;
    }
    price += 0.05 * (matWidth / 10);

    if (printSize == 'M') {

        price *= 2;
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export class Item {
	
}

export function updateItemAmount(){
	const amount = getListFromStorage().length;
	const el = document.getElementById("cart-link");
	if(amount!=0)
		
	else{
		el.innerHTML = "Cart";
	}
}

export function getListFromStorage() {
	if (localStorage.getItem("cart") == null) {
		return [];
	}}

export 

export 

