export 

export function retrieveJson(key) {
    console.log(`Retrieved json response '${key}' from localStorage`)
    return JSON.parse(window.localStorage[key]);
}

export 
import { retrieveJson, fetchJsonFromAPI } from './cache.js';
import { calculatePrice, render } from './frame.js';

const cart = document.getElementById("cart");
let priceTotal = 0;
let id = 0;

document.addEventListener('DOMContentLoaded', event => {
    loadDataAndPopulateUI();
});


async function loadDataAndPopulateUI() {
    priceTotal = 0;
    try {
        let jsonItems = localStorage.getItem('cart');
        const elements = JSON.parse(jsonItems);
        if (elements.length === 0) 
        for (let e of elements) {
            try {   // load metadata from localStore if available
                const fetched = retrieveJson(e.objectID);
                populateItems(fetched, e, elements)
            }
            
        }
    } 
    updateHeaderCartCount();
}

function populateItems(fetched, e, elements) {
    const artwork = new artworkMetadata(0, fetched.artistDisplayName, fetched.title, fetched.objectDate, fetched.primaryImageSmall);
    artwork.price = calculatePrice(e.printSize, e.frameStyle, e.frameWidth, e.matWidth);
    priceTotal += parseFloat(artwork.price);
    cart.appendChild(createCartElement(id++, e, artwork));
    if (e === elements[elements.length - 1]) createPriceAndCheckout();
}


function artworkMetadata(price, artist, title, date, image) {
    this.price = price;
    this.artist = artist;
    this.title = title;
    this.date = date;
    this.image = image;
}

function createCartElement(id, item, artworkData) {
    const cartItem = document.createElement("div");
    cartItem.id = `cart-item-${id}`;
    cartItem.className = 'cart-item';

    const cartPreview = document.createElement("div");
    cartPreview.className = 'cart-preview';
    cartPreview.id = `preview-container-${id}`;
    cartItem.appendChild(cartPreview);

    const configRef = document.createElement("a");
    configRef.href = `config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameWidth=${item.frameWidth}&frameStyle=${item.frameStyle}&matWidth=${item.matWidth}&matColor=${item.matColor}`;
    cartPreview.appendChild(configRef);

    const img = document.createElement("img");
    img.className = 'cart-thumb';
    img.src = artworkData.image;
    img.alt = `${artworkData.title} by ${artworkData.artist} from ${artworkData.date}`;
    img.id = `preview-${id}`;
    img.addEventListener('load', () => { setItemImage(id, item)})
    configRef.appendChild(img);


    const museumLabel = document.createElement("div");
    museumLabel.className = "museum-label";
    cartItem.appendChild(museumLabel);
    const innerLabelDiv = document.createElement("div");
    museumLabel.appendChild(innerLabelDiv);

    const artist = document.createElement("span");
    artist.className = "artist";
    artist.innerText = artworkData.artist;
    innerLabelDiv.appendChild(artist);

    const title = document.createElement("span");
    title.className = "title";
    title.innerText = artworkData.title + ', ';
    innerLabelDiv.appendChild(title);

    const date = document.createElement("span");
    date.className = "date";
    date.innerText = artworkData.date;
    innerLabelDiv.appendChild(date);

    const br1 = document.createElement("br");
    innerLabelDiv.appendChild(br1);
    const br2 = document.createElement("br");
    innerLabelDiv.appendChild(br2);

    const frameDescription = document.createElement("span");
    frameDescription.className = "frame-description";
    frameDescription.innerText = frameDescriptor(item);
    innerLabelDiv.appendChild(frameDescription);

    const cartPrice = document.createElement("div");
    cartPrice.className = "cart-price";
    cartPrice.innerText = "€ ";
    museumLabel.appendChild(cartPrice);
    const priceSpan = document.createElement("span");
    priceSpan.id = `price-${id}`;
    priceSpan.innerText = artworkData.price;
    cartPrice.appendChild(priceSpan);

    const removeButton = document.createElement("button");
    removeButton.className = "cart-remove";
    removeButton.id = `cart-remove-${id}`;
    removeButton.addEventListener('click', );
    museumLabel.appendChild(removeButton);

    return cartItem;
}

function setItemImage(id, item) {
    let image = document.getElementById(`preview-${id}`);
    let container = document.getElementById(`preview-container-${id}`);
    render(image, container, item.printSize, item.frameStyle, item.frameWidth*10, item.matColor, item.matWidth*10);
}






function createPriceAndCheckout() {
    const cartTotal = document.createElement("div");
    cartTotal.className = "cart-total";
    cart.appendChild(cartTotal);
    const price = document.createElement("div");
    price.className = "price";
    price.innerText = "Total: € ";
    cartTotal.appendChild(price);
    const checkoutPriceTotal = document.createElement("span");
    checkoutPriceTotal.id = "price-total";
    checkoutPriceTotal.innerText = `${parseFloat(priceTotal)}`;
    price.appendChild(checkoutPriceTotal);
    const checkoutButton = document.createElement("button");
    checkoutButton.id = "checkout-button";
    checkoutButton.innerText = "Checkout";
    checkoutButton.addEventListener('click', );

    cartTotal.appendChild(checkoutButton);
}

export function updateHeaderCartCount() {
    let jsonItems = localStorage.getItem('cart');
    try {
        const elements = JSON.parse(jsonItems);
        let count = 0;
        elements.forEach(e => { count++ });
        const cartLink = document.getElementById("cart-link");
        if (count == 0)  else {
            cartLink.innerText = `Cart (${count})`;
        }
    } 
}

export function frameDescriptor(item) {
    let size;
    switch (item.printSize) {
        case "S": size = "Small"; break;
        case "M": size = "Medium"; break;
        
        
    }
    size+= ' print';
    if (item.frameWidth > 0) size += ` in a ${item.frameWidth/10} cm ${item.frameStyle} frame`;
    size += (item.matWidth > 0) ? ` with a ${item.matWidth/10} cm ${item.matColor} mat.` ;
    return size;
}
import { getPrintSizes, render, calculatePrice, calculateTotalSize } from './frame.js';
import { fetchJsonFromAPI } from './cache.js';
import { updateHeaderCartCount } from './cart.js'

const frameWidthSlider = document.getElementsByName('frameWidthR')[0];
const frameWidthField = document.getElementsByName('frameWidth')[0];
const matWidthSlider = document.getElementsByName('matWidthR')[0];
const matWidthField = document.getElementsByName('matWidth')[0];
const previewImage = document.getElementById('preview-image');
const imageLabel = document.getElementById('image-label');
const previewContainer = document.getElementById('preview-container');
const radioElements = document.querySelectorAll('input[type = radio]');
const form = document.getElementById('config-form');
const cartLink = document.getElementById('cart-link');

let config = {
    objectId : null,
    printSize: 'M',
    frameStyle: 'natural',
    frameWidth: 4,
    matColor: 'mint',
    matWidth: 5.5,
    price: 30.0,
    artist: null,
    title: null,
    date: null
}

form.onsubmit = ;






updateHeaderCartCount();

previewImage.onload = function() {
    calculatePrintSizeLabels();
    updatePreview();
};

for (let radioElement of radioElements) {
    radioElement.addEventListener('click', updateConfig);
}

let params = new URLSearchParams(window.location.search);
if (!params.has('objectID')) 

for (const [key, value] of params) {
    if (key === 'objectID') {
        config.objectId = value;

        fetchJsonFromAPI(config.objectId).then(data => {
            if (data === null) 
            config.artist = data.artistDisplayName;
            config.title = data.title;
            config.date = data.objectDate;
            imageLabel.innerHTML = `<strong>${config.artist}</strong> <br> <i>${config.title}, ${config.date}</i>`;
            previewImage.src = data.primaryImageSmall;
            previewImage.alt = `${config.title} by ${config.artist} from ${config.date}`;
        });
    }
}

frameWidthSlider.addEventListener('input', );
frameWidthField.addEventListener('focusout', );
matWidthSlider.addEventListener('input', );
matWidthField.addEventListener('focusout', );



function calculatePrintSizeLabels() {
    const sizes = getPrintSizes(previewImage);

    document.getElementById('print-size-s-label').innerHTML = `Small<br>${sizes.S[0]} × ${sizes.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${sizes.M[0]} × ${sizes.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${sizes.L[0]} × ${sizes.L[1]} cm`;
}



function updatePreview() {
    const priceLabel = document.getElementById('price');
    const totalSizeLabel = document.getElementById('total-size');
    const price = calculatePrice(config.printSize, config.frameStyle, config.frameWidth, config.matWidth);

    config.price = price;
    priceLabel.innerText = '€ ' + price.toFixed(2);
    totalSizeLabel.innerText = calculateTotalSize(previewImage, config.printSize, config.frameWidth, config.matWidth);

    render(previewImage, previewContainer, config.printSize, config.frameStyle, config.frameWidth*10, config.matColor, config.matWidth*10);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    if (frameStyle === 'classic')  else if (frameStyle === 'natural') {
        price += 0.8 * frameWidth;
    } else if (frameStyle === 'shabby')  else if (frameStyle === 'elegant') {
        price += 0.85 * frameWidth;
    }

    price += matWidth * 0.05;

    if (printSize === 'M') {
        price *= 2;
    } else if (printSize === 'L') 

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export 
import { fetchJsonFromAPI } from './cache.js';
import { updateHeaderCartCount } from './cart.js'


const API = 'https://collectionapi.metmuseum.org/public/collection/v1';

const form = document.querySelector('main form');

document.addEventListener('DOMContentLoaded', event => {
    const params = (new URL(document.location)).searchParams;
    const queryParam = params.get('q');
    updateHeaderCartCount();
    if (!queryParam) 
    artworkSearch(queryParam);
});

form.addEventListener('submit', );


async function artworkSearch(query) {
    const searchInfo = document.querySelector("#search-info");
    searchInfo.innerText = `Searching for “${query}”...`;
    const IDs = await retrieveArtworkIDs(query);
    const artworks = await getArtworks(IDs);
    searchInfo.innerText = `Found ${artworks.length} artwork${(artworks.length == 1)  : 's'} for “${query}”`;
    for(let artwork of artworks) {
        gallery.appendChild(createGalleryItem(artwork));
    }
}




async function retrieveArtworkIDs(query) {
    const searchResponse = await fetch(`${API}/search?hasImages=true&q=${query}`);
    const rawData = await searchResponse.json();
    if (rawData.total == 0) 
    const IDs = rawData.objectIDs.splice(0, 100);
    return IDs;
}

async function getArtworks(IDs) {
    return Promise.all(IDs.map(ID =>
        fetchJsonFromAPI(ID)
        .then(response => new Artwork(
            response.objectID,
            response.artistDisplayName,
            response.title,
            response.objectDate,
            response.primaryImageSmall,
        ))));
}

function createGalleryItem(artwork) {
    const outerContainer = document.createElement('div');
    outerContainer.className = 'thumb';

    const innerContainer = document.createElement('a');
    innerContainer.id = `object-${artwork.id}`;

    const imageContainer = document.createElement('a');
    imageContainer.href = `./config.html?objectID=${artwork.id}`;

    const image = document.createElement('img');
    image.id = `object-image-${artwork.id}`;
    image.src = artwork.imgsrc;
    image.alt = artwork.title;

    const label = document.createElement('div');
    label.className = 'museum-label';

    const artistSpan = document.createElement('span');
    artistSpan.className = 'artist';
    artistSpan.innerText = artwork.artist;

    const titleSpan = document.createElement('span');
    titleSpan.className = 'title';
    titleSpan.innerText = artwork.title;

    const comma = document.createTextNode(', ');

    const dateSpan = document.createElement('span');
    dateSpan.className = 'date';
    dateSpan.innerText  = artwork.date;

    outerContainer.appendChild(innerContainer);
    innerContainer.appendChild(imageContainer);
    imageContainer.appendChild(image);
    innerContainer.appendChild(label);
    label.appendChild(artistSpan);
    label.appendChild(titleSpan);
    label.appendChild(comma);
    label.appendChild(dateSpan);

    return outerContainer;
}


class Artwork {
    constructor(id, artist, title, date, imgsrc) {
        this.id=id;
        this.artist=artist;
        this.title=title;
        this.date=date;
        this.imgsrc=imgsrc;
    }
}

