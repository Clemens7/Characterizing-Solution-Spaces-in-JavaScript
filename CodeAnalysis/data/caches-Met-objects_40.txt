export function get(key) {
    return localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) 
}

export 

export 
import * as CacheService from './CacheService.js'
import { MetropolitanService } from "./MetropolitanService.js";
import { render } from "./frame.js";
import { Image } from "./Image.js";
import { calculatePrice } from "./frame.js";

const metropolitanService = new MetropolitanService()
const cartLabelElement = document.getElementById('cart-link')
const cart = CacheService.get('cart')
cartLabelElement.innerHTML = `Cart ${cart ? `(` + cart.length + `)` }`

const shoppingCart = document.getElementById('cart')
const checkoutButton = document.getElementById('checkout-button')
const cartItems = document.getElementById('cart')

let deleteItemButton = document.getElementsByClassName('cart-remove')

let price_total = 0

async function loadCartElements() {
    console.log('Loading elements from cache')
    cartItems.innerHTML = ''

    for (let i = cart.length - 1; i >= 0; i--) {
        const object = await metropolitanService.object(cart[i].objectID, true);
        cartItems.innerHTML = cartItems.innerHTML + createCartItem(cart[i], object)
    }


    let imageElement = document.getElementsByClassName('cart-thumb');
    let inc = 0

    for (let i = cart.length - 1; i >= 0; i--) {
        let imgElement = imageElement[inc++]

        const image = new Image(imgElement, cart[i].printSize, cart[i].frameStyle, cart[i].frameWidth, cart[i].matColor, cart[i].matWidth);
        image.renderImage();
    }



    cartItems.innerHTML = cartItems.innerHTML +
        `<div class="cart-total">
                    <div class="price">Total: € <span id="price-total">0</span></div>
                    <button type="button" id="checkout-button">Checkout</button>
                </div>`

    const price = document.getElementById('price-total')

    price_total = Math.round((price_total + Number.EPSILON) * 100) / 100
    price.innerHTML = `${price_total}`


    for (let i = 0; i < deleteItemButton.length; i++) {
        let button = deleteItemButton[i]
        button.addEventListener('click', )
    }

}








function createCartItem({ objectID, printSize, frameStyle, frameWidth, matColor, matWidth }, object) {

    let description = ''

    if (printSize === 'S') { description += 'Small' }
    if (printSize === 'M') { description += 'Medium' }
    if (printSize === 'L') 

    description += ' print'

    if (frameWidth > 0) {
        description += ` in a ${frameWidth} cm ${frameStyle} frame`
    }

    if (matWidth > 0) {
        description += ` with a ${matWidth} cm ${matColor} mat`
    }
    description += '.'

    const p = calculatePrice(printSize, frameStyle, frameWidth, matWidth)
    price_total += p



    let html = `
       <div class="cart-item">
        <div class="cart-preview" id="preview-container-${objectID}">
          <a href="${createURLParamsForConfig(objectID, printSize, frameStyle, frameWidth, matColor, matWidth)}" id="object-${objectID}">
            <img class="cart-thumb" src="${object.primaryImageSmall}" alt="${object.artistDisplayName}" id="preview-${objectID}">
          </a>
        </div>
        <div class="museum-label">
          <div>
            <span class="artist">${object.artistDisplayName}</span>
            <span class="title">${object.title}</span>,
            <span class="date">${object.objectDate}</span>
            <br><br>
            <span class="frame-description">${description}</span>
          </div>
          <div class="cart-price">€ <span id="price-0">${p}</span></div>
          <button class="cart-remove" name="deleteItem" id="deleteItem-${objectID}"></button>
        </div>
      </div>`

    return html
}

function createURLParamsForConfig(objectID, printSize, frameStyle, frameWidth, matColor, matWidth) {
    let param = `config.html?objectID=${objectID}&printSize=${printSize}`

    param = param + `&frameStyle=${frameStyle}&frameWidth=${frameWidth}`
    param = param + `&matColor=${matColor}&matWidth=${matWidth}`


    return param
}



if (cart == null)  else {
    loadCartElements()
}
import { MetropolitanService } from "./MetropolitanService.js";
import { QueryString } from "./Query.js";
import { Image } from "./Image.js";
import { PrintSize, PrintSizes } from "./PrintSize.js";
import { calculatePrice } from "./frame.js";
import * as CacheService from "./CacheService.js"

let printSizeControls = document.querySelectorAll(".segmented input[type=radio][name=printSize]");
let frameStyleControls = document.querySelectorAll(".frame-style-row input[type=radio]");
let matColorControls = document.querySelectorAll(".mat-color-row input[type=radio]");
let addToCartButton = document.querySelector(".buy");
let cartLabeElement = document.querySelector("#cart-link")

let printSize = document.querySelector(".segmented input[type=radio][name=printSize]:checked");
let frameStyle = document.querySelector(".frame-style-row input[type=radio]:checked");
let frameWidth = document.querySelector(".config-row input[type=number][name=frameWidth]");
let frameWidthR = document.querySelector("fieldset input[type=range][name=frameWidthR]");
let matColor = document.querySelector(".mat-color-row input[type=radio]:checked");
let matWidth = document.querySelector(".config-row input[type=number][name=matWidth]");
let matWidthR = document.querySelector("fieldset input[type=range][name=matWidthR]");

let imageElement = document.querySelector('#preview-image');
const artist = document.querySelector('#label-author');
const description = document.querySelector('#label-description');

let image = null;
let printSizeSmall = new PrintSize(PrintSizes.SMALL, 0, 0);
let printSizeMedium = new PrintSize(PrintSizes.MEDIUM, 0, 0);
let printSizeLarge = new PrintSize(PrintSizes.LARGE, 0, 0);

let id = null;
let cart = CacheService.get("cart");

printSizeSmall.calculate(imageElement);
printSizeMedium.calculate(imageElement);
printSizeLarge.calculate(imageElement);


(async () => {
    id = QueryString.getParamFromUrl(document.location.search, "objectID");
    const printSizeParam = QueryString.getParamFromUrl(document.location.search, "printSize");
    const frameStyleParam = QueryString.getParamFromUrl(document.location.search, "frameStyle");
    const frameWidthParam = QueryString.getParamFromUrl(document.location.search, "frameWidth");
    const matColorParam = QueryString.getParamFromUrl(document.location.search, "matColor");
    const matWidthParam = QueryString.getParamFromUrl(document.location.search, "matWidth");

    printSize.value = printSizeParam  : printSize.value;
    frameStyle.value = frameStyleParam  : frameStyle.value;
    frameWidth.value = frameWidthParam  : frameWidth.value;
    matColor.value = matColorParam  : matColor.value;
    matWidth.value = matWidthParam  : matWidth.value;

    if (!id) 
    const metropolitanService = new MetropolitanService;
    const object = await metropolitanService.object(id, true);
    if (object.message === "ObjectID not found") 
    artist.innerText = object.artistDisplayName;
    description.innerHTML = `${object.title}, ca. ${object.objectDate}`;
    imageElement.setAttribute("src", object.primaryImageSmall);

    cartLabeElement.innerHTML = cart  : `Cart`
})();

imageElement.addEventListener('load', _ => {
    image = new Image(imageElement, printSize.value, frameStyle.value, frameWidth.value, matColor.value, matWidth.value);
    image.renderImage();
    calculateTotalSize()
    calculateTotalPrice()
})

frameWidth.addEventListener('change', );

frameWidthR.addEventListener('change', );

matWidth.addEventListener('change', );

matWidthR.addEventListener('change', );

addToCartButton.addEventListener('click', )

addCallBackToControls(printSizeControls, 'change', );
addCallBackToControls(frameStyleControls, 'change', );
addCallBackToControls(matColorControls, 'change', );

function addCallBackToControls(controls, event, callback) {
    for (let control of controls) {
        control.addEventListener(event, callback)
    }
}

function calculateTotalSize() {
    const x = document.querySelector(`.config-row div[id=total-size] span[id=size-total-x]`);
    const y = document.querySelector(`.config-row div[id=total-size] span[id=size-total-y]`);
    const size = [printSizeSmall, printSizeMedium, printSizeLarge].find(printSize => printSize.element.checked);
    x.innerHTML = size.x + (matWidth.value * 2) + (frameWidth.value * 2);
    y.innerHTML = size.y + (matWidth.value * 2) + (frameWidth.value * 2);
}

function calculateTotalPrice() {
    const price = document.querySelector('#price');
    const size = [printSizeSmall, printSizeMedium, printSizeLarge].find(printSize => printSize.element.checked);
    price.innerHTML = `€ ${calculatePrice(size.size, image.frameStyle, image.frameWidth, image.matWidth).toFixed(2)}`;
}







export const baseUrlMetropolitan = 'https://collectionapi.metmuseum.org/public/collection/v1/'
export const baseUrlArtmart = 'https://web-engineering.big.tuwien.ac.at/s20/a2/'
export const apiResultLimit = 100import { PrintSizes } from "./PrintSize.js";

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    const frameStylePrices = {
        'classic': 1.0,
        'natural': 0.80,
        'shabby': 0.90,
        'elegant': 0.85
    }

    price = price + (frameStylePrices[frameStyle] * frameWidth) + (0.05 * matWidth)
    if (printSize === PrintSizes.MEDIUM) {
        price = price * 2.0;
    }
    if (printSize === PrintSizes.LARGE) 
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { getPrintSizes, render } from "./frame.js";

export class Image {
    constructor(img, printSize, frameStyle, frameWidth, matColor, matWidth) {
        this._img = img;
        this._printSize = printSize;
        this._frameStyle = frameStyle;
        this._frameWidth = frameWidth;
        this._matColor = matColor;
        this._matWidth = matWidth;
    }

    

    

    

    

    

    

    

    

    

    

    

    

    renderImage() {
        render(this._img, this._img.parentElement, this._printSize, this._frameStyle, this._frameWidth, this._matColor, this._matWidth)
    }
}import { RequestService } from './RequestService.js'
import { baseUrlMetropolitan } from './environment.js'
import { QueryString, QueryParam } from './Query.js'

export class MetropolitanService {

    

    async object(id, shouldCache) {
        const rs = new RequestService(baseUrlMetropolitan, shouldCache)
        return rs.get(`objects/${id}`)
    }

}
import { getPrintSizes } from "./frame.js";

export class PrintSize {
    

    

    

    

    

    

    

    

    

    
}

export const PrintSizes = Object.freeze({
    SMALL: 'S',
    MEDIUM: 'M',
    LARGE: 'L'
});export class QueryString {
    

    

    static 
}

export class QueryParam {
    
}
import * as CacheService from './CacheService.js';
export class RequestService {

    constructor(baseUrl, shouldCache = false) {
        this.baseUrl = baseUrl
        this.shouldCache = shouldCache;
    }

    async get(path) {
        let resp = null;
        const cachedResponse = CacheService.get(`cachedResponse-${path}`);

        if (cachedResponse && Object.keys(cachedResponse).length > 0 && this.shouldCache) {
            resp = cachedResponse;
        }
        return await resp
    }
}
import { MetropolitanService } from './MetropolitanService.js'
import { apiResultLimit } from './environment.js'
import { RequestService } from './RequestService.js'
import * as CacheService from './CacheService.js'

const form = document.getElementById('search-form')
const gallery = document.getElementById('gallery')
const searchInfo = document.getElementById('search-info')
const searchBox = document.getElementById('search')

const urlParams = new URLSearchParams(window.location.search)

const metropolitanService = new MetropolitanService()
const rs = new RequestService('')

const searchParams = new URLSearchParams(window.location.search)
searchBox.value = searchParams.get('q')

const cartLabelElement = document.getElementById('cart-link')
const cart = CacheService.get('cart')
cartLabelElement.innerHTML = `Cart ${cart  : ''}`

const loadElementsFromHighlights = 

const search = async (q) => {
    if (q === '') 
    if(q.includes('+'))
        

    console.log(q)

    console.log('Loading elements from api')

    searchInfo.textContent = `Searching for “${q}”...`

    try {
        const objectIds = (await metropolitanService.search(q, true, true))
        let ids = [];

        if (objectIds.objectIDs)
            ids = objectIds.objectIDs.slice(0, apiResultLimit)

        for (const item of ids)
            createGalleryItems(item)

        searchInfo.textContent = `Found ${objectIds.total} ${objectIds.total !== 1 ? 'artworks' } for “${q}”`

    } 
}

if (urlParams.has('q'))
    search(urlParams.get('q'))


form.addEventListener('submit', )

const createGalleryItems = (id) => {
    CacheService.set(id, async () => {
        const obj = await metropolitanService.object(id, true)
        gallery.innerHTML = gallery.innerHTML + createGalleryItem(obj)
        return obj
    })
}

const createGalleryItem = ({ objectID, primaryImageSmall, artistDisplayName, title, objectDate }) => {
    return `
        <div class="thumb">
            <a href="config.html?objectID=${objectID}" id="object-${objectID}">
            <img src="${primaryImageSmall}" alt="${artistDisplayName}" id="${objectID}">
                <div class="museum-label">
                    <span class="artist">${artistDisplayName}</span>
                    <span class="title">${title}</span>,
                    <span class="date">${objectDate}</span>
                </div>
            </a>
      </div>`
}
