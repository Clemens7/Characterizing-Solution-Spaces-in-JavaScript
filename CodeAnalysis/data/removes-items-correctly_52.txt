import { Artwork } from "./models.js";

const API_URL = "https://collectionapi.metmuseum.org/public/collection/v1";


export async function getArtworkDetails(objectID) {
  const request = await fetch(getArtworkDetailURL(objectID));

  if (request.status !== 200) 
  const json = await request.json();

  return new Artwork(
    json.objectID,
    json.title,
    json.artistDisplayName,
    json.objectDate,
    json.primaryImageSmall
  );
}

function getArtworkDetailURL(objectID) {
  return `${API_URL}/objects/${objectID}`;
}
import {render, calculatePrice} from "../frame.js";
import { CartItemsContainer } from "../header/header-dom.js";

const cart = document.getElementById('cart');

export 

export function createItem(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth){
    let item = cartItem(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth);
    cart.appendChild(item);
    let img = document.getElementById(`preview-${i}`);
    let imgContainer = document.getElementById(`preview-container-${i}`);
    img.addEventListener('load', ()=> render(img, imgContainer, printSize, frameStyle, frameWidth, matColor, matWidth));
    console.log('i: ' + i);
}

export 

export function enableButton(){
    document.getElementById('checkout-button').disabled=false;
}

export 

export function total(price){
    let elemTotal = cartTotal(price);
    cart.appendChild(elemTotal);
}

function cartItem(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth){
    let cartItem = document.createElement('div');
    cartItem.className='cart-item';

    let cartPreviewElem = cartPreview(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth);

    let museumLab = museumLabel(artwork, printSize, frameStyle, frameWidth, matColor, matWidth);

    let cartP = cartPrice(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth);

    let button = document.createElement('button');
    button.className = 'cart-remove';
    button.addEventListener('click', function(){
        removeFromCart(artwork.id, localStorage.cart, printSize, frameStyle, frameWidth, matColor, matWidth);
        console.log(localStorage.cart)
        let test = new CartItemsContainer();
        test.refresh();
    });

    cartItem.appendChild(cartPreviewElem);
    cartItem.appendChild(museumLab);
    museumLab.appendChild(cartP);
    museumLab.appendChild(button);

    return cartItem;
}

export function removeFromCart(id, storage, printSize, frameStyle, frameWidth, matColor, matWidth){
    let entry;
    let parse = JSON.parse(storage);
    let i = 0;
    let priceTotal = parseFloat(document.getElementById(`price-total`).innerText);
    console.log(priceTotal);

    let items = document.querySelectorAll('.cart-item');
    let itemsArray = Array.from(items).reverse();
    console.log(itemsArray);

    let price;
    for (entry of parse){
        if(parse[i].objectID == id && parse[i].printSize == printSize && parse[i].frameStyle == frameStyle && parse[i].frameWidth == frameWidth && parse[i].matColor == matColor && parse[i].matWidth == matWidth){
            console.log('removing: ' + itemsArray[i] + ' ' + i);
            price = parseFloat(itemsArray[i].children[1].children[1].children[0].innerText);
            itemsArray[i].remove();
            parse.splice(i,1);
            localStorage.cart = JSON.stringify(parse);
        }
        i++;
    }

    if(JSON.parse(localStorage['cart']).length == 0)
    
    let newPrice = priceTotal - price;
    document.getElementById(`price-total`).innerText = newPrice.toFixed(2);
    
}

function cartPreview(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth){
    let cartPreview = document.createElement('div');
    cartPreview.className = 'cart-preview';
    cartPreview.id = `preview-container-${i}`;
    let aElem = document.createElement('a');
    if(frameWidth < 10) else{
        aElem.href = `./config.html?objectID=${artwork.id}&printSize=${printSize}&frameStyle=${frameStyle}&frameWidth=${frameWidth}&matColor=${matColor}&matWidth=${matWidth}`;
    }
    let img = document.createElement('img');
    img.className = 'cart-thumb';
    img.src = artwork.img;
    img.id = `preview-${i}`;
    img.alt = artwork.title;

    console.log('img: ' + i);

    cartPreview.appendChild(aElem);
    aElem.appendChild(img);
    return cartPreview;
}

function museumLabel(artwork, printSize, frameStyle, frameWidth, matColor, matWidth){
    let musLabelDiv = document.createElement('div');
    musLabelDiv.className = 'museum-label';
    const div = document.createElement('div');
    const br = document.createElement('br');
    const br2 = document.createElement('br');

    let artistData = document.createElement('span');
    let titleData = document.createElement('span');
    let dateData = document.createElement('span');
    let descriptionData = document.createElement('span');

    artistData.className = 'artist';
    titleData.className = 'title';
    dateData.className = 'date';
    descriptionData.className = 'frame-description';

    artistData.innerText = artwork.artist;
    titleData.innerText = artwork.title;
    dateData.innerText = ', ' + artwork.date;
    descriptionData.innerText = description(printSize, frameStyle, frameWidth, matColor, matWidth);

    musLabelDiv.appendChild(div);
    div.appendChild(artistData);
    div.appendChild(titleData);
    div.appendChild(dateData);
    div.appendChild(br);
    div.appendChild(br2);
    div.appendChild(descriptionData);

    return musLabelDiv;
}


function cartPrice(i, artwork, printSize, frameStyle, frameWidth, matColor, matWidth){
    let div = document.createElement('div');
    div.className = 'cart-price';
    div.innerText = '€ ';
    let span = document.createElement('span');
    span.id = `price-${i}`;
    span.innerText = calculatePrice(printSize,frameStyle, frameWidth, matWidth);


    div.appendChild(span);
    return div;
}

function cartTotal(price){
    let div  = document.createElement('div');
    div.className = 'cart-total';
    let div2  = document.createElement('div');
    div2.className = 'price';
    div2.innerText = 'Total: € ';
    let span  = document.createElement('span');
    span.id = 'price-total';
    span.innerText = price;

    let button = document.createElement('button');
    button.type = 'button';
    button.id = 'checkout-button';
    button.innerText = 'Checkout';
    button.addEventListener("click", );
   
    
    div.appendChild(div2);
    div2.appendChild(span);
    div.appendChild(button);

    return div;
    
}

function description(printSize, frameStyle, frameWidth, matColor, matWidth){
    let description;
    let size;
    switch(printSize){
        case 'S' : size = 'Small'; break;
        
        case 'L' : size = 'Large'; break;
        
    }

    if(frameWidth > 10){
        if(matWidth == 0) else{
            description = size +' print in a ' + frameWidth/10 + ' cm ' + frameStyle + ' frame ' + 'with a ' + matWidth/10 + ' cm ' + matColor + ' mat.'
        }
    }
    console.log(description);
    return description;
}


export 

/*
location.reload(true);
window.stop(); //stops cart nr
import {Artwork} from "../models.js";
import {empty, createItem, total, enableButton, disableButton, onloadEmpty} from "./cart-dom.js?2";
import {getArtworkDetails} from "../api.js";

async function loadArtworks(){
    let stringToObject = await JSON.parse(localStorage.cart);
    console.log(stringToObject);
    let allArtworks = await getArtworks(stringToObject);
    console.log(allArtworks);


    let i = stringToObject.length-1;
    let artwork;
    let config;

    let img;
    let imgContainer;

    let price;
    let result = 0;

    let config1 = stringToObject[0].printSize;
    console.log(config1);
    while (i >= 0){
        artwork = allArtworks[i];
        config = stringToObject[i];
        createItem(i, artwork, config.printSize, config.frameStyle, config.frameWidth, config.matColor, config.matWidth);
        
        img = document.getElementById(`preview-${i}`);
        imgContainer = document.getElementById(`preview-container-${i}`);

        price = parseFloat(document.getElementById(`price-${i}`).innerText);
        console.log(price);
        result+=price;
    
        console.log(img);
        console.log(imgContainer);
        i--;
    }

    total(result.toFixed(2));
    enableButton();
    return;
}



async function getArtworks(object){
    let result = [];
    let elem;
    let artwork;
    for (elem of object){
        if(elem.objectID in localStorage) else{
            console.log(artwork);
            artwork = await getArtworkDetails(elem.objectID);
            storeInCache(artwork);
        }
        result.push(artwork);
    }
    return result;
}


function storeInCache(artwork){
    console.log(`Storing ${artwork.id} in local storage`);
    localStorage[artwork.id] = JSON.stringify(artwork);
}

const item = localStorage.getItem('cart');
if(item == null || item.length === 0 || item == '[]') else{
    loadArtworks();
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    let woodCost = 0;
    if (frameStyle === 'classic') {
        woodCost = 1;
    } else if (frameStyle === 'natural')  else if (frameStyle === 'shabby') {
        woodCost = 0.9;
    } else if (frameStyle === 'elegant') {
        woodCost = 0.85;
    }

    let multi = 1;
    if (printSize === 'M')  else if (printSize === 'L') {
        multi = 3.5;
    }

    price += woodCost * frameWidth + 0.05 * matWidth;
    price *= multi;

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}


export class CartItemsContainer{
    constructor(){
        this.container = document.getElementById('cart-link');
        this.defaultValue = "Cart";
        this.refresh();
    }

    refresh(){
        if(!localStorage['cart'] || localStorage['cart'].length < 1 || localStorage['cart'] == '[]')

        const storedObjects = JSON.parse(localStorage['cart']);
        this.container.innerText = `Cart (${storedObjects.length})`;
    }




}import { CartItemsContainer } from "./header-dom.js";

document.addEventListener("DOMContentLoaded", async (event) => {
    console.log("header js loaded");
    let test = new CartItemsContainer();
    test.refresh();

});export class Artwork {
  constructor(id, title, artist, date, img) {
    this.id = id;
    this.artist = artist;
    this.title = title;
    this.date = date;
    this.img = img;
  }
}


export class FrameConfig {

  
}
