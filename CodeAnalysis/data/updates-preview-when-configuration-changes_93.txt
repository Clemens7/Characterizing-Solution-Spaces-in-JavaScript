export class SearchResultObject {
    
}

export class MuseumObject {
    constructor(objectID, primaryImageSmall, title, artistDisplayName, objectDate) {
        this.objectID = objectID;
        this.primaryImageSmall = primaryImageSmall;
        this.title = title;
        this.artistDisplayName = artistDisplayName;
        this.objectDate = objectDate;
    }
}

export class ShippingObject {
    
}
export function get(key) {
    if(key in localStorage) {
        console.log(`Retrieving ${key} from local storage`);
        return JSON.parse(localStorage[key]);
    }
}

export function save(key, value) {
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(value);
}


export import {calculatePrice, calculateTotalSize, getPrintSizes, render} from "./frame.js";
import * as cache from "./cache.js";
import {getObject} from "./metmuseum-collection-api.js";
import * as utils from "./dom-utils.js"

function RenderedImage() {
    this.urlParams = new URLSearchParams(window.location.search);
    this.container = null;
    this.printSize = 'M';
    this.frameStyle = 'natural';
    this.frameWidth = 40;
    this.matColor = 'mint';
    this.matWidth = 55;
    this.printSizes = {S: [0, 0], M: [0, 0], L: [0, 0]};
    this.img = null;
    this.apiResponse = null;

    if (this.urlParams.get("objectID")){
        this.objectID = parseInt(this.urlParams.get("objectID"));
    }

    if (!cache.get('cart'))cache.save('cart',[]);

    if (document.readyState === "interactive" ){
        this.updateControls().then(_ => {});
        this.updatePrice().then(_ => {});
        this.createEventListeners().then(_ => {});
    }

    const retrievedFromCache = cache.get("cache_"+this.objectID);
    if (!retrievedFromCache){
        getObject(this.objectID)
            .then((data) => {
                cache.save("cache_"+this.objectID.toString(), data);
                this.initialiseImg(data);})
            .catch();
    }
}

RenderedImage.prototype.initialiseImg = function(data){
    if (data.primaryImageSmall === undefined) 
    this.apiResponse = data;

    this.img = document.getElementById("preview-image");
    this.img.src = this.apiResponse.primaryImageSmall;
    this.img.onload = () => this.renderImg();
    if (document.readyState === "interactive" ){
    }
};
RenderedImage.prototype.renderImg = function(){
    this.container = document.getElementById('preview-container');
    render(this.img, this.container, this.printSize, this.frameStyle, this.frameWidth, this.matColor, this.matWidth);
    document.getElementById('image-label').innerHTML =
        `<strong>${this.apiResponse.artistDisplayName}</strong><br>${this.apiResponse.title} ca. ${this.apiResponse.objectDate}`;
    this.printSizes = getPrintSizes(this.img);
    this.updatePrintSize();
    this.updateTotalSize();
};

RenderedImage.prototype.updateControls = async function(){
    const CartItems = new utils.CartItemsElement;
    CartItems.update();
    document.getElementById("frameWidth").setAttribute('value',
        this.urlParams.get("frameWidth")  : (this.frameWidth/10).toString());
    document.getElementById("frameWidthR").setAttribute('value',
        this.urlParams.get("frameWidth")  : (this.frameWidth/10).toString());
    document.getElementById("matWidthR").setAttribute('value',
        this.urlParams.get("matWidth")  : (this.matWidth/10).toString());
    document.getElementById("matWidth").setAttribute('value',
        this.urlParams.get("matWidth")  : (this.matWidth/10).toString());
    document.getElementById(`print-size-${this.urlParams.get("printSize")  
        : this.printSize.toLowerCase()}`).checked = true;
    document.getElementById(`frame-style-${this.urlParams.get("frameStyle")  : 
        this.frameStyle}`).checked = true;
    document.getElementById(`mat-color-${this.urlParams.get("matColor")  : 
        this.matColor}`).checked = true;
};

RenderedImage.prototype.updatePrice = async function () {
    document.getElementById("price").innerText = "€ " +
        calculatePrice(this.printSize, this.frameStyle, this.frameWidth, this.matWidth).toFixed(2);
};

RenderedImage.prototype.updatePrintSize = function () {
    this.printSizes = getPrintSizes(this.img);
    document.getElementById("print-size-s-label").innerHTML =
        "Small<br>" + this.printSizes['S'][0] +" × " + this.printSizes['S'][1] +" cm";
    document.getElementById("print-size-m-label").innerHTML =
        "Medium<br>" + this.printSizes['M'][0] +" × " + this.printSizes['M'][1] +" cm";
    document.getElementById("print-size-l-label").innerHTML =
        "Large<br>" + this.printSizes['L'][0] +" × " + this.printSizes['L'][1] +" cm";
};

RenderedImage.prototype.updateTotalSize = function () {
    let sizeArray = calculateTotalSize(this.printSizes, this.printSize, this.frameWidth, this.matWidth);
    document.getElementById("total-size").innerText = `${sizeArray[0]} x ${sizeArray[1]} cm`;
};

RenderedImage.prototype.rerender = function () {
    render(this.img, this.container, this.printSize, this.frameStyle, this.frameWidth, this.matColor, this.matWidth);
    this.updatePrice().then(_ => {});
    this.updateTotalSize();
};

RenderedImage.prototype.checkInput = function(form, input, range) {
    if (form.reportValidity() && input.value !== "") {
        range.value = input.value;
        return true;
    }
    return false;
};

RenderedImage.prototype.invalidReset = function (form, input, range, min, max) {
    if (!form.checkValidity()) else if (input.value === "")
    return false;
};

RenderedImage.prototype.createEventListeners = async function(){
    const printSize = document.getElementsByName("printSize");
    for (let elements of printSize){
        elements.addEventListener("click", () => {this.printSize = elements.value; this.rerender();});
    }
    const frameStyle = document.getElementsByName("frameStyle");
    for (let elements of frameStyle){
        elements.addEventListener("click", () => {this.frameStyle = elements.value; this.rerender();})
    }
    const matColor = document.getElementsByName("matColor");
    for (let elements of matColor){
        elements.addEventListener("click", () => {this.matColor = elements.value; this.rerender();})
    }

    const slideMatWidth = document.getElementById("matWidthR");
    const fieldMatWidth = document.getElementById("matWidth");
    const form = document.getElementById("config-form");
    fieldMatWidth.addEventListener("input", () => {
        if (this.checkInput(form, fieldMatWidth, slideMatWidth)){
            this.matWidth = parseFloat(fieldMatWidth.value)*10;
            this.rerender();
        }
    });
    fieldMatWidth.addEventListener("focusout", () => {
        if (this.invalidReset(form, fieldMatWidth, slideMatWidth, fieldMatWidth.min, fieldMatWidth.max)) 
    });
    slideMatWidth.addEventListener("input", );

    const slideFrameWidth = document.getElementById("frameWidthR");
    const fieldFrameWidth = document.getElementById("frameWidth");
    fieldFrameWidth.addEventListener("input", () => {
        if (this.checkInput(form, fieldFrameWidth, slideFrameWidth)){
            this.frameWidth = parseFloat(fieldFrameWidth.value)*10;
            this.rerender();
        }
    });
    fieldFrameWidth.addEventListener("focusout", () => {
        if (this.invalidReset(form, fieldFrameWidth, slideFrameWidth, fieldFrameWidth.min, fieldFrameWidth.max)) 
    });
    slideFrameWidth.addEventListener("input", );

    document.getElementById("add-to-cart").addEventListener("click", );
};

RenderedImage.prototype.addToCartArray = ;
const renderedImage = new RenderedImage();
















import * as LocalStorage from './cache.js';


export class CartItemsElement {
    constructor(elementId = 'cart-link') {
        this.element = document.getElementById(elementId);
        if (!this.element) 
    }

    update() {
        const cart = LocalStorage.get("cart");
        const noOfItems = cart && cart.length != 0  : ''
        this.element.innerText = `Cart${noOfItems}`;
    }
}

export class SearchDocumentContainer {
    

    

    
}

export class CartDocumentContainer {
    

    

    
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    if (frameStyle === 'classic')else if (frameStyle === 'natural'){
        price += frameWidth/10*0.8;
    }else if (frameStyle === 'shabby'){
        price += frameWidth/10*0.9;
    }else if (frameStyle === 'elegant'){
        price += frameWidth/10*0.85;
    }
    price += matWidth/10*0.05;
    if (printSize === 'M'){
        price *=2;
    }else if (printSize === 'L'){
        price *=3.5;
    }
    return Math.round((price + Number.EPSILON) * 100)/100;
}

export function calculateTotalSize(printSizes, printSize, frameWidth, matWidth) {
    let sizeArray = [0,0];
    if (printSize === 'S'){
        sizeArray[0] += printSizes['S'][0];
        sizeArray[1] += printSizes['S'][1];
    }else if (printSize === 'M'){
        sizeArray[0] += printSizes['M'][0];
        sizeArray[1] += printSizes['M'][1];
    }else if (printSize === 'L'){
        sizeArray[0] += printSizes['M'][0];
        sizeArray[1] += printSizes['M'][1];
    }
    sizeArray[0] += (2*frameWidth+2*matWidth)/10;
    sizeArray[1] += (2*frameWidth+2*matWidth)/10;

    return sizeArray;
}
import {SearchResultObject} from "./api-responses.js";
import {MuseumObject} from "./api-responses.js";
import * as LocalStorage from './cache.js';

const baseUrl = 'https://collectionapi.metmuseum.org/public/collection'; /* base url for all endpoint calls */
const apiVersion = 'v1'; /* version of the api to be used */

export 

export async function getObject(objectID) {
    const cachedResult = LocalStorage.get(objectID);
    if(cachedResult) 

    try {
        const response = await fetch(getApiUri('objects/' + objectID));
        const responseObject = await response.json();


        const museumObject = new MuseumObject(responseObject.objectID, responseObject.primaryImageSmall, responseObject.title, responseObject.artistDisplayName, responseObject.objectDate);

        LocalStorage.save(objectID,museumObject);

        return museumObject;
    }}

function getApiUri(resource, queryParam=undefined) {
    return baseUrl + '/' + apiVersion + '/' + resource + (queryParam  : '');
}
