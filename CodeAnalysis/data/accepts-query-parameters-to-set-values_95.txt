import {Object} from "./object.js"
import * as ArtworkCache from './artwork-cache.js';

export 


export 

export async function retrieveObject(objectID) {
    if (!objectID) 
    let object = ArtworkCache.retrieveStorage(objectID);
    if (object) 
    try {
        const response = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`);
        const object = await response.json();
        ArtworkCache.store(objectID, object);
        return object
    }}






export function store(objectID, object) {
    console.log(`Storing ${objectID} in local storage`);
    localStorage[objectID] = JSON.stringify(object);
}

export function retrieveStorage(objectID) {
    if (objectID in localStorage) 
}import * as Frame from './frame.js';

export 

export function getItems() {
    let cart = localStorage.getItem('cart');
    if (!cart) return [];}

export function updateCartString() {
    let cartLink = document.getElementById('cart-link');
    let noOfItems = getItems().length;
    let cartString = '';
    if (noOfItems > 0) 
    cartLink.innerText = `Cart${cartString}`;
}

export 

export 
    import * as Frame from './frame.js';
    import * as API from './art-api.js';
    import * as Cart from './cart.js';

    Cart.updateCartString();
      
    const params = new URLSearchParams(window.location.search);
    const objectID = params.get('objectID');
    
    applyParams(params);

    if(objectID == null)

    API.retrieveObject(objectID).then(result => {
       if(result.message)
        document.getElementById("preview-image").src = result.primaryImageSmall;
        updateConfig();
        const imageLabel = document.getElementById("image-label");
        imageLabel.innerHTML = `
          <span class="artist">${result.artistDisplayName}</span>
          <span class="title">${result.title}</span>,
          <span class="date">${result.objectDate}</span>`;      
    })

    function applyParams(params){
       const form = document.getElementById("config-form"); 
       form["printSize"].value = params.get("printSize") ; 
       form["frameStyle"].value = params.get("frameStyle") ; 
       form["frameWidth"].value = params.get("frameWidth") / 10 ; 
       form["frameWidthR"].value = params.get("frameWdith") / 10 | 5; 
       form["matWidth"].value = params.get("matWidth") / 10 ;
       form["matWidth"].value = params.get("matWidth") / 10 ;  
       form["matColor"].value = params.get("matColor") ; 
    }

    window.updateConfig = function(){
      const form = document.getElementById("config-form");
      const previewImg = document.getElementById("preview-image");
      const container = document.getElementById("preview-container");
      const printSize = form["printSize"].value;
      const frameStyle = form["frameStyle"].value;
      const frameWidth = form["frameWidth"].value * 10;
      const matColor = form["matColor"].value;
      const matWidth = form["matWidth"].value * 10;

      const printSizes = Frame.getPrintSizes(previewImg);
      document.getElementById('print-size-s-label').innerHTML = `Small<br>${printSizes.S[0]/10} × ${printSizes.S[1]/10} cm</label>`;
      document.getElementById('print-size-m-label').innerHTML = `Medium<br>${printSizes.M[0]/10} × ${printSizes.M[1]/10} cm</label>`;
      document.getElementById('print-size-l-label').innerHTML = `Large<br>${printSizes.L[0]/10} × ${printSizes.L[1]/10} cm</label>`;
      
      Frame.render(previewImg, container, printSize, frameStyle, frameWidth, matColor, matWidth);

      document.getElementById("price").innerText = `€ ${Frame.calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2)}`;
      document.getElementById('total-size').innerText = `${(printSizes[printSize][0] + 2 * frameWidth + 2 * matWidth)/10} × ${(printSizes[printSize][1] + 2 * frameWidth + 2 * matWidth)/10} cm`; 
    }

window.updateFrameWidth = 

   window.updateMatWidth = 

    window.addToCart = 
  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    
    let price = ((30 + getCostForFrame(frameStyle) * (frameWidth/10)) + (0.05 * (matWidth / 10)))* getMultiplier(printSize);  

    return Math.round(price * 100) / 100;
}
function getMultiplier(size){
     const sizes = {
        "S" : 1, 
        "M": 2, 
        "L": 3.5
    }; 
    return sizes[size];
}

function getCostForFrame(frame){
    const costs = {
        "classic" : 1, 
        "natural" : 0.8, 
        "shabby" : 0.9, 
        "elegant" : 0.85
    }; 
    return costs[frame]; 
}import * as ArtAPI from './art-api.js'; 

export class Object{
    
}