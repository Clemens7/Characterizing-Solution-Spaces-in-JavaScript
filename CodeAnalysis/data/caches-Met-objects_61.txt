import {fetchArtwork} from './common.js';
import {render} from './frame.js';
import {calculatePrice} from './frame.js';

function showItems() {
    items = 0;
    priceTotal = 0;
    const cart = JSON.parse(localStorage.getItem('cart'));
    if (!Array.isArray(cart) || cart.length === 0)  else {
        let index = 0;
        cart.forEach(async item => {
            await fetchArtwork(item.objectID, data => {
                const source = data.primaryImageSmall;
                const artist = data.artistDisplayName;
                const title = data.title;
                const date = data.objectDate;
                const frameDescription = generateFrameDescription(item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
                const price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
                priceTotal += price;
                document.getElementById('cart').insertAdjacentHTML('afterbegin', `
                  <div class="cart-item" id="item-${index}">
                    <div class="cart-preview" id="preview-container-${index}">
                      <a href="config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameStyle=${item.frameStyle}&frameWidth=${item.frameWidth}&matColor=${item.matColor}&matWidth=${item.matWidth}">
                        <img class="cart-thumb" src="${source}" id="preview-${index}" alt="${title}">
                      </a>
                    </div>
                    <div class="museum-label">
                      <div>
                        <span class="artist">${artist}</span>
                        <span class="title">${title}</span>,
                        <span class="date">${date}</span>
                        <br><br>
                        <span class="frame-description">${frameDescription}</span>
                      </div>
                      <div class="cart-price">€ <span id="price-${index}">${price.toFixed(2)}</span></div>
                      <button class="cart-remove" id="remove-${index}" type="button"></button>
                    </div>
                  </div>
                `);
                let help = index;
                document.getElementById('preview-' + index).addEventListener('load', () => render(document.getElementById('preview-' + help), document.getElementById('preview-container-' + help), item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth));
                document.getElementById('remove-' + index).addEventListener('click', );
                index++;
                if (index === cart.length) {
                    items = index;
                    document.getElementById('cart-link').innerHTML = 'Cart (' + items + ')';
                    document.getElementById('price-total').innerHTML = priceTotal.toFixed(2);
                }
            });
        });
    }
}

function generateFrameDescription(printSize, frameStyle, frameWidth, matColor, matWidth) {
    switch (printSize) {
        case 'S':
            printSize = 'Small';
            break;
        case 'M':
            printSize = 'Medium';
            break;
        
    }
    return printSize + ' print in a ' + frameWidth / 10 + ' cm ' + frameStyle + ' frame' + (matWidth === 0  : ' with a ' + matWidth / 10 + ' cm ' + matColor + ' mat.');
}



let items;
let priceTotal;
showItems();
document.getElementById('checkout-button').addEventListener('click', );
export const ARTMART_BASE_URL = 'https://web-engineering.big.tuwien.ac.at/s20/a2/';
export const MET_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/';

class CartItem{
    
}

const CART_TEST = [{
    "objectID": 768979,
    "printSize": "L",
    "frameStyle": "shabby",
    "frameWidth": 21,
    "matColor": "wine",
    "matWidth": 6
}];

const setCartStorage = ;

const OBJ_TEST = {
    "objectID": 45734,
    "isHighlight": false,
    "accessionNumber": "36.100.45",
    "accessionYear": "1936",
    "isPublicDomain": true,
    "primaryImage": "https://images.metmuseum.org/CRDImages/as/original/DP251139.jpg",
    "primaryImageSmall": "https://images.metmuseum.org/CRDImages/as/web-large/DP251139.jpg",
    "additionalImages": [
        "https://images.metmuseum.org/CRDImages/as/original/DP251138.jpg",
        "https://images.metmuseum.org/CRDImages/as/original/DP251120.jpg"
    ],
    "constituents": [
        {
            "role": "Artist",
            "name": "Kiyohara Yukinobu",
            "constituentULAN_URL": "https://vocab.getty.edu/page/ulan/500034433",
            "constituentWikidata_URL": "https://www.wikidata.org/wiki/Q11560527",
            "gender": "Female"
        }
    ],
    "department": "Asian Art",
    "objectName": "Hanging scroll",
    "title": "Quail and Millet",
    "culture": "Japan",
    "period": "Edo period (1615–1868)",
    "dynasty": "",
    "reign": "",
    "portfolio": "",
    "artistRole": "Artist",
    "artistPrefix": "",
    "artistDisplayName": "Kiyohara Yukinobu",
    "artistDisplayBio": "Japanese, 1643–1682",
    "artistSuffix": "",
    "artistAlphaSort": "Kiyohara Yukinobu",
    "artistNationality": "Japanese",
    "artistBeginDate": "1643",
    "artistEndDate": "1682",
    "artistGender": "Female",
    "artistWikidata_URL": "https://www.wikidata.org/wiki/Q11560527",
    "artistULAN_URL": "https://vocab.getty.edu/page/ulan/500034433",
    "objectDate": "late 17th century",
    "objectBeginDate": 1667,
    "objectEndDate": 1682,
    "medium": "Hanging scroll; ink and color on silk",
    "dimensions": "46 5/8 x 18 3/4 in. (118.4 x 47.6 cm)",
    "creditLine": "The Howard Mansfield Collection, Purchase, Rogers Fund, 1936",
    "geographyType": "",
    "city": "",
    "state": "",
    "county": "",
    "country": "",
    "region": "",
    "subregion": "",
    "locale": "",
    "locus": "",
    "excavation": "",
    "river": "",
    "classification": "Paintings",
    "rightsAndReproduction": "",
    "linkResource": "",
    "metadataDate": "2020-02-07T15:50:59.677Z",
    "repository": "Metropolitan Museum of Art, New York, NY",
    "objectURL": "https://wwwstg.metmuseum.org/art/collection/search/45734",
    "tags": [
        {
            "term": "Birds",
            "AAT_URL": "https://vocab.getty.edu/page/aat/300266506"
        },
        {
            "term": "Leaves",
            "AAT_URL": "https://vocab.getty.edu/page/aat/300011892"
        }
    ],
    "objectWikidata_URL": "https://www.wikidata.org/wiki/Q29910832",
    "isTimelineWork": false
};

const setObjStorage = ;

export 

export function fetchArtwork(id, callback) {
    const cache = JSON.parse(localStorage.getItem('cache'));
    if (cache !== null) {
        const data = cache.find(obj => obj.objectID === id);
        if (data !== undefined) return callback(data);
    }}

export {setCartStorage, CartItem, setObjStorage}
import {CartItem} from "./common.js"
import {showCartNumber} from "./common.js";
import {fetchArtwork} from "./common.js";
import {getPrintSizes} from "./frame.js";
import {render} from "./frame.js";
import {calculatePrice} from "./frame.js";

class Configurator{
    constructor() {
        const urlParams = new URLSearchParams(location.search);
        this.cartItem = new CartItem(urlParams.get("objectID"),
            nullToUndefined(urlParams.get("printSize")),
            nullToUndefined(urlParams.get("frameStyle")),
            cmToMM(nullToUndefined(urlParams.get("frameWidth"))),
            nullToUndefined(urlParams.get("matColor")),
            cmToMM(nullToUndefined(urlParams.get("matWidth"))));
    }
    updateValuesinHTML() {
        const printSizeEl = document.getElementById(`print-size-${this.cartItem.printSize.toLowerCase()}`);
        printSizeEl.checked = true;

        const frameInputEl = document.getElementsByName('frameWidth')[0];
        frameInputEl.value = this.cartItem.frameWidth;
        frameInputEl.dispatchEvent(new Event('change'));

        const frameStyleEl = document.getElementById(`frame-style-${this.cartItem.frameStyle.toLowerCase()}`);
        frameStyleEl.checked = true;

        const matInputEl = document.getElementsByName('matWidth')[0];
        matInputEl.value = this.cartItem.matWidth;
        matInputEl.dispatchEvent(new Event('change'));

        const matColorEl = document.getElementById(`mat-color-${this.cartItem.matColor.toLowerCase()}`);
        matColorEl.checked = true;
    }
}

function cmToMM(cmValue){
    if (cmValue )  else {
        return undefined;
    }
}
function nullToUndefined(param1) {
    if (param1 === null) {
        return undefined;
    }
}

function setIfInRange(el1, el2, lower, upper, cartItemKey) {
    el1.value = (Math.round((parseFloat(el1.value) + Number.EPSILON) * 10) / 10);
    el2.value = (Math.round((parseFloat(el2.value) + Number.EPSILON) * 10) / 10);

    if (el1.value >= lower && el1.value <= upper) {
        el2.value = el1.value;
    }
    if (cartItemKey) {
        conf.cartItem[cartItemKey] = el1.value;
    }
}

function updateForm() {
    if (imageLoaded) {
        render(document.getElementById("preview-image"), document.getElementById("preview-container"), conf.cartItem.printSize, conf.cartItem.frameStyle, conf.cartItem.frameWidth * 10, conf.cartItem.matColor, conf.cartItem.matWidth * 10);
    }
    setPrice();
    setTotalSize();
}

function setPrice() {
    const total = calculatePrice(conf.cartItem.printSize, conf.cartItem.frameStyle, conf.cartItem.frameWidth * 10, conf.cartItem.matWidth * 10);
    document.getElementById('price').innerText = "€ " + total.toFixed(2);
}

function setTotalSize() {
    const size = getPrintSizes(document.getElementById('preview-image'));
    const width = Math.floor(size[conf.cartItem.printSize][0] + 20 * (parseFloat(conf.cartItem.frameWidth) + parseFloat(conf.cartItem.matWidth))) / 10;
    const height = Math.floor(size[conf.cartItem.printSize][1] + 20 * (parseFloat(conf.cartItem.frameWidth) + parseFloat(conf.cartItem.matWidth))) / 10;
    document.getElementById('total-size').innerHTML = `${width} × ${height} cm`;
}



showCartNumber();

const conf = new Configurator();

let imageLoaded = false;

const frameSlider = document.getElementsByName('frameWidthR')[0];
const frameInput = document.getElementsByName('frameWidth')[0];
const matSlider = document.getElementsByName('matWidthR')[0];
const matInput = document.getElementsByName('matWidth')[0];

frameSlider.addEventListener('change', );
frameInput.addEventListener('change', () => {
    setIfInRange(frameInput, frameSlider, 2.0, 5.0, "frameWidth");
    updateForm();
});
matSlider.addEventListener('change', );
matInput.addEventListener('change', () => {
    setIfInRange(matInput, matSlider, 0.0, 10.0, "matWidth");
    updateForm();
});

conf.updateValuesinHTML();

const printSize = document.getElementsByClassName("segmented")[0];
const frameStyle = document.getElementsByClassName("frame-style-row")[0];
const matColor = document.getElementsByClassName("mat-color-row")[0];

printSize.addEventListener('change', );
frameStyle.addEventListener('change', );
matColor.addEventListener('change', );

document.getElementsByClassName('buy')[0].addEventListener('click', addItem);

if (!conf.cartItem.objectID)  else {
    fetchArtwork(conf.cartItem.objectID, obj => {
        if (!obj) 

        const previewImgEl = document.getElementById("preview-image");
        previewImgEl.setAttribute("src", obj.primaryImageSmall);

        const imgLabelEL = document.getElementById("image-label");

        let imgArtistEl = document.createElement("p");
        imgArtistEl.setAttribute("class", "artist");
        imgArtistEl.innerText = obj.artistDisplayName;

        let imgLabelDescriptionEl = document.createElement("p");

        let imgLabelDescriptionTitleEl = document.createElement("span");
        imgLabelDescriptionTitleEl.setAttribute("class", "title");
        imgLabelDescriptionTitleEl.innerText = obj.title;

        const imgLabelDescriptionDateEl = document.createTextNode(', ' + obj.objectDate);

        imgLabelDescriptionEl.appendChild(imgLabelDescriptionTitleEl);
        imgLabelDescriptionEl.appendChild(imgLabelDescriptionDateEl);

        imgLabelEL.appendChild(imgArtistEl);
        imgLabelEL.appendChild(imgLabelDescriptionEl);

        previewImgEl.addEventListener('load', () => {
            imageLoaded = true;
            const sizes = getPrintSizes(previewImgEl);
            document.getElementById('print-size-s-label').innerHTML = `Small<br>${sizes.S[0] / 10} × ${sizes.S[1] / 10} cm`;
            document.getElementById('print-size-m-label').innerHTML = `Medium<br>${sizes.M[0] / 10} × ${sizes.M[1] / 10} cm`;
            document.getElementById('print-size-l-label').innerHTML = `Large<br>${sizes.L[0] / 10} × ${sizes.L[1] / 10} cm`;
            updateForm();
        });
    })
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    price += (30.0 + priceMapping[frameStyle] * (frameWidth / 10.0) + 0.05 * (matWidth / 10.0)) * priceMapping[printSize];
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export const priceMapping = { 'classic': 1, 'natural': 0.8, 'shabby': 0.9, 'elegant': 0.85, 'S': 1.0, 'M': 2.0, 'L': 3.5 }





import {showCartNumber} from './common.js';

async function getArtworks(query) {
    let respJson;
    if (query == null || query === "" )  else {
        const resp = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${query}`);
        respJson = await resp.json();
    }

    let maxItems = respJson.total;
    if (maxItems > 100) 

    setSearchInfoFoundItems(respJson.total, query);

    for (let i = 0; i < maxItems; i++) {
        let artwork = await getArtworkById(respJson.objectIDs[i]);
        addArtworkToDOM(artwork);
    }
}

async function getArtworkById(id) {
    let cache = JSON.parse(localStorage.getItem('cache'));
    if (cache !== null) {
        const data = cache.find(obj => obj.objectID === id);
        if (data !== undefined) return data;

    }}


function addArtworkToDOM(artwork) {
    let gallery = document.getElementById("gallery");

    let artworkThumb = document.createElement("div");
    artworkThumb.className = "thumb";
    let artworkElement = document.createElement("a");
    artworkElement.id = artwork.objectID;
    artworkElement.href = `config.html?objectID=${artwork.objectID}`;
    let artworkImg = document.createElement("img");
    artworkImg.id = artwork.objectID + "-image";
    artworkImg.src = artwork.primaryImageSmall;
    let label = document.createElement("div");
    label.className = "museum-label";
    let artist = document.createElement("span");
    artist.className = "artist";
    artist.innerText = artwork.artistDisplayName;
    let title = document.createElement("span");
    title.className = "title";
    title.innerText = artwork.title;
    let date = document.createElement("span");
    date.className = "date";
    date.innerText = artwork.objectDate;


    label.appendChild(artist);
    label.appendChild(title);
    let commaText = document.createTextNode(', ');
    label.appendChild(commaText);
    label.appendChild(date);

    artworkElement.appendChild(artworkImg);
    artworkElement.appendChild(label);
    artworkThumb.appendChild(artworkElement);
    gallery.appendChild(artworkThumb);


}

function setSearchInfoFoundItems(itemAmount, searchValue) {
    const searchInfo = document.getElementById("search-info");
    if (searchValue == null || searchValue === "" )  else {
        if (itemAmount === 1)  else {
            searchInfo.innerText = `Found ${itemAmount} artworks for “${searchValue}”.`;
        }
    }

}

function setSearchInfo(searchValue) {
    const searchInfo = document.getElementById("search-info");
    searchInfo.innerText = `Searching for “${searchValue}”...`;
}


showCartNumber();

document.addEventListener('DOMContentLoaded', () => {
    const params = (new URL(document.location)).searchParams;
    const searchValue = params.get('q');

    setSearchInfo(searchValue);

    getArtworks(searchValue)
        .then()
        .catch();
});
