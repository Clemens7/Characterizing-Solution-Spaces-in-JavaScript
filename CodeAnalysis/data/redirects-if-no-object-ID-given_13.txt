import { FrameConfiguration, Serializable } from "./frame.js";
import { getObject } from "./metropolitan-api.js";
export class CartItem extends Serializable {
    
    
    
    
    
}
export class Cart {
    constructor() {
        this._items = [];
        this.loadSession();
    }
    get size() {
        return this._items.length;
    }
    
    
    
    
    
    
    loadSession() {
        let storage = localStorage.getItem('cart');
        var json = storage == null  ? "[]" ;
        var cart = JSON.parse(json);
        for (let item of cart) 
    }
}
export class Serializable {
    
}
export var PrintSize;
(function (PrintSize) {
    PrintSize["S"] = "S";
    PrintSize["M"] = "M";
    PrintSize["L"] = "L";
})(PrintSize || (PrintSize = {}));
export var FrameStyle;
(function (FrameStyle) {
    FrameStyle["classic"] = "classic";
    FrameStyle["natural"] = "natural";
    FrameStyle["shabby"] = "shabby";
    FrameStyle["elegant"] = "elegant";
})(FrameStyle || (FrameStyle = {}));
export var MatColor;
(function (MatColor) {
    MatColor["ivory"] = "ivory";
    MatColor["mint"] = "mint";
    MatColor["wine"] = "wine";
    MatColor["indigo"] = "ingigo";
    MatColor["coal"] = "coal";
})(MatColor || (MatColor = {}));
[];
[];
export class FrameConfiguration extends Serializable {
    
    
    
    
    
    
    
    
    
}
export 
export 
export 
import { Cart } from "./cart-service.js";
export function updateCartCount(cart) {
    if (cart.size == 0) {
        document.getElementById("cart-link").innerText = "Cart";
    }
}
updateCartCount(new Cart());
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        
        
        function step(result) { result.done  : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { MetropolitanObject, MetropolitanSearchResponseObject } from "./metropolitan_entities.js";
export function getObject(objectID) {
    return __awaiter(this, void 0, void 0, function* () {
        let object = checkObject(objectID);
        if (object) 
        else {
            let metropolitanResponse = yield fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`);;
            var objects = JSON.parse(json);
            objects.push(metropolitanObject);
            localStorage.setItem('objects', (JSON.stringify(objects).split(",\"_").join(",\"")).split("{\"_").join("{\""));
            return yield Promise.resolve(metropolitanObject);
        }
    });
}
function checkObject(objectID) {
    let storage = localStorage.getItem('objects');
    var json = storage == null  ? "[]" ;
    var objects = JSON.parse(json);
    let index = objects.findIndex();
    if (index == -1) {
        return undefined;
    }
}
export 
import { Serializable } from "./frame.js";
export class MetropolitanObject extends Serializable {
    
    
    
    
    
    
    
}
export class MetropolitanSearchResponseObject extends Serializable {
    
    
    
}
import { searchMET, getObject } from "./metropolitan-api.js";
initSearch();
function initSearch() {
    let gallery = document.getElementById("gallery");
    gallery.innerHTML = "";
    let urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has("q") ) 
    else {
        fetch('highlights.json')
            .then(res => res.json())
            .then((data) => {
            var promises = [];
            data.highlights.forEach(id => {
                promises.push(getObject(id));
            });
            Promise.all(promises).then();
        })
            .catch();
    }
}




