import { render, calculatePrice } from './frame.js';
import { setCartItemsInHeader } from './header-cart.js';
export function addPictureToDom(painting,positionInCart) {


  const divCartItem = document.createElement('div');
  divCartItem.setAttribute('class', 'cart-item');
  divCartItem.setAttribute('id', `cartItem${positionInCart}`);

  const divCartPreview = document.createElement('div');
  divCartPreview.setAttribute('class', 'cart-preview');
  divCartPreview.setAttribute('id', `preview-container-${painting.objectID}`);

  const aHref = document.createElement('a');
  aHref.setAttribute('href', '');

  const img = document.createElement('img');
  img.setAttribute('class', 'cart-thumb');
  img.setAttribute('src', '');
  img.setAttribute('id', `preview-${painting.objectID}`);
  img.setAttribute('alt', '');

  const divMuseum = document.createElement('div');
  divMuseum.setAttribute('class', 'museum-label');

  const div4 = document.createElement('div');

  const spanArtist = document.createElement('span');
  spanArtist.setAttribute('class', 'artist');

  const spanTitle = document.createElement('span');
  spanTitle.setAttribute('class', 'title');

  const spanDate = document.createElement('span');
  spanDate.setAttribute('class', 'date');

  const brk1 = document.createElement('br');
  const brk2 = document.createElement('br');

  const spanDesc = document.createElement('span');
  spanDesc.setAttribute('class', 'frame-description');

  const divCartPrice = document.createElement('div');
  divCartPrice.setAttribute('class', 'cart-price');

  const spanPrice = document.createElement('span');
  spanPrice.setAttribute('id', `price-${painting.objectID}`);

  const btnRemove = document.createElement('button');
  btnRemove.setAttribute('class', 'cart-remove');

  btnRemove.onclick = removeItemfromCart;
  btnRemove.setAttribute('id', positionInCart);


  const cartstart = document.getElementById('cart');

  cartstart.prepend(divCartItem);

  divMuseum.appendChild(div4);
  divMuseum.appendChild(divCartPrice);
  divMuseum.appendChild(btnRemove);

  divCartPrice.appendChild(spanPrice);

  div4.appendChild(spanArtist);
  div4.appendChild(spanTitle);
  div4.appendChild(spanDate);
  div4.appendChild(brk1);
  div4.appendChild(brk2);
  div4.appendChild(spanDesc);

  divCartPreview.appendChild(aHref);
  aHref.appendChild(img);

  divCartItem.appendChild(divCartPreview);
  divCartItem.appendChild(divMuseum);


  img.src = painting.primaryImageSmall;
  img.alt = `Artwork ${painting.title} of ${painting.artistDisplayName}`;
  aHref.href = `config.html?objectID=${painting.objectID}&printSize=${painting.printSize}&frameStyle=${painting.frameStyle}&frameWidth=${painting.frameWidth}&matColor=${painting.matColor}&matWidth=${painting.matWidth}`;

  spanArtist.innerHTML = `${painting.artistDisplayName}`;
  spanTitle.innerHTML = `${painting.title}` + ', ';
  spanDate.innerHTML = `${painting.objectDate}`;

  const printSize = `${painting.printSize}`;
  const frameStyle = `${painting.frameStyle}`;
  const frameWidth = `${painting.frameWidth}`;
  const matColor = `${painting.matColor}`;
  const matWidth = `${painting.matWidth}`;

  let desc = showDescription(
    printSize,
    frameStyle,
    frameWidth,
    matColor,
    matWidth
  );
  spanDesc.innerHTML = desc;

  let price = calculateItem(printSize, frameStyle, frameWidth, matWidth);
  spanPrice.innerHTML = price;

  render(
    img,
    divCartPreview,
    printSize,
    frameStyle,
    frameWidth,
    matColor,
    matWidth
  );
}


function calculateItem(printSize, frameStyle, frameWidth, matWidth) {
  let costs = calculatePrice(
    printSize,
    frameStyle,
    frameWidth,
    matWidth
  ).toFixed(2);
  return costs;
}

export function calcTotal() {
  let price = 0;
  const totalCostDisplay = document.querySelector('#price-total');

  const shoppingCart = JSON.parse(localStorage.getItem('cart'));

  for (let i = 0; i < shoppingCart.length; i++) {
    price += calculatePrice(
      shoppingCart[i].printSize,
      shoppingCart[i].frameStyle,
      shoppingCart[i].frameWidth,
      shoppingCart[i].matWidth
    );
  }

  console.log({ price });

  if (price) {
    totalCostDisplay.innerHTML = price.toFixed(2);
  }
}

function showDescription(
  printSize,
  frameStyle,
  frameWidth,
  matColor,
  matWidth
) {
  let size;
  if (printSize === 'S') {
    size = 'Small';
  } else if (printSize === 'M') {
    size = 'Medium';
  }

  let description = `${size} print in a ${formateCentimeters(
    frameWidth
  )} cm ${frameStyle} frame${
    matWidth == 0
      
      : ` with a ${formateCentimeters(matWidth)} cm ${matColor} mat.`
  }`;

  return description;
}

function formateCentimeters(width) {
  let format = width / 10;
  format = format.toLocaleString('en-US', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 1,
  });
  return format;
}

export 
import { addPictureToDom, calcTotal, renderEmptyCart} from './cart-dom.js';
import { setCartItemsInHeader } from './header-cart.js';
import { PaintingithFrameConfig } from './picture.js';
import retrievePicture from './picture-cache.js';

let paintings;

async function retrieveArtworkInformation() {
  try {
    const cart = JSON.parse(localStorage.getItem('cart'));
    let paintings = await getObjectsFromCart(cart);
    return paintings;
  }}

function renderCartItems(shoppingCartPaintings) {
  if (!shoppingCartPaintings || shoppingCartPaintings.length === 0)  else {
    
    for (let i = 0; i < shoppingCartPaintings.length; i++) {
      addPictureToDom(shoppingCartPaintings[i],i);
    }
  }

  calcTotal();
}

retrieveArtworkInformation().then((result) => {
  paintings = result;
  console.log({ paintings });
  renderCartItems(paintings);
});


document.addEventListener('DOMContentLoaded', () => {
  setCartItemsInHeader();
  document.getElementById('checkout-button').onclick = ;
});

export async function getObjectsFromCart(shoppingCart) {
  try {
    let listOfImages = [];

    for (let shoppingCartItem of shoppingCart) {
      const tempJson = await retrievePicture(shoppingCartItem.objectID);
      const tempObject = new PaintingithFrameConfig(
        tempJson.objectID,
        tempJson.artistDisplayName,
        tempJson.title,
        tempJson.objectDate,
        tempJson.primaryImage,
        tempJson.primaryImageSmall,
        shoppingCartItem.printSize,
        shoppingCartItem.frameStyle,
        shoppingCartItem.frameWidth,
        shoppingCartItem.matColor,
        shoppingCartItem.matWidth
      );
      listOfImages.push(tempObject);
      console.log({listOfImages});
      
    }

    return listOfImages;
  }}
export function setLabel(fetchedPicture) {
    const imageLabel = document.getElementById('image-label');
    const artistLabel = document.getElementById('artist-label');
    const titleLabel = document.getElementById('title-label');
    const dateLabel = document.getElementById('date-label');

    imageLabel.appendChild(artistLabel);
    imageLabel.appendChild(titleLabel);
    imageLabel.appendChild(dateLabel);

    artistLabel.innerText = `${fetchedPicture.artistDisplayName}`;
    titleLabel.innerText = `${fetchedPicture.title}, `;
    dateLabel.innerText = fetchedPicture.objectDate;
}

        import * as SearchAPI from './search.js';
        import * as FrameAPI from './frame.js';
        import * as ConfigAPI from './config.js';
        import * as ConfigDomAPI from './config-dom.js';
        import { setCartItemsInHeader } from './header-cart.js';

        document.addEventListener('DOMContentLoaded', event => {

            const params = (new URL(document.location)).searchParams;

            setCartItemsInHeader();

            try{
                ConfigAPI.constructConfig(params);
            } 


            const formElement = document.getElementById('config-form');

            formElement.addEventListener('submit', );

        });





    import * as SearchAPI from './search.js';
import * as FrameAPI from './frame.js';
import {retrieve, store} from './search-cache.js';
import * as ConfigDomAPI from './config-dom.js';

export async function constructConfig(params) {
    var objectID = parseInt(params.get('objectID'));
    var printSize = params.get('printSize');
    var frameStyle = params.get('frameStyle');
    var frameWidth = parseFloat(params.get('frameWidth'));
    var matColor = params.get('matColor');
    var matWidth = parseFloat(params.get('matWidth'));

    if (!Number.isFinite(objectID)) 

    const priceElement = document.getElementById('price');

    const frameSliderElement = document.getElementById('frame-slider');
    const frameTextboxElement = document.getElementById('frame-text-box');

    const matSliderElement = document.getElementById('mat-slider');
    const matTextboxElement = document.getElementById('mat-text-box');

    matWidth = normalizeMatWidth(matWidth, true);
    frameWidth = normalizeFrameWidth(frameWidth, true);

    initialSetParameter(printSize, frameStyle, frameWidth, matColor, matWidth);

    const previewContainerElement = document.getElementById('preview-container');
    const previewImageElement = document.getElementById('preview-image');

    const totalSizeWithFrameElement = document.getElementById('total-size');


    if ((printSize != 'S') && (printSize != 'M') && (printSize != 'L')) {
        printSize = 'M';
    }

    if ((frameStyle != 'classic') && (frameStyle != 'shabby') && (frameStyle != 'elegant') && (frameStyle != 'natural')) {
        frameStyle = 'natural'
    }

    if ((matColor != 'ivory') && (matColor != 'wine') && (matColor != 'indigo') && (matColor != 'coal') && (matColor != 'mint')) {
        matColor = 'mint';
    }


    const cacheObject = retrieve(objectID);
    var fetchedPicture = [];
    if (cacheObject == null || cacheObject == undefined)  else {
        fetchedPicture = cacheObject;
    }


    var imageSize = {};

    previewImageElement.src = fetchedPicture.primaryImageSmall;

    previewImageElement.onload = function () {
        imageSize = FrameAPI.getPrintSizes(previewImageElement);
        FrameAPI.render(previewImageElement, previewContainerElement, printSize, frameStyle, frameWidth, matColor, matWidth);
        setPrintSizesDOM(imageSize, previewImageElement);
        updateTotalSize(imageSize, totalSizeWithFrameElement, matWidth, frameWidth);
    };

    ConfigDomAPI.setLabel(fetchedPicture);

    frameSliderElement.addEventListener('input', , false);

    frameTextboxElement.addEventListener('change', , false);

    matSliderElement.addEventListener('input', , false);

    matTextboxElement.addEventListener('change', , false);

    const frameStyleElements = document.getElementsByName('frameStyle');
    for (let tmp of frameStyleElements) {
        tmp.addEventListener('input', , false);
    }

    const matColorElements = document.getElementsByName('matColor');
    for (let matColorElement of matColorElements) {
        matColorElement.addEventListener('input', , false);
    }

    const printSizeElements = document.getElementsByName('printSize');
    for (let printSizeElement of printSizeElements) {
        printSizeElement.addEventListener('input', , false);
    }

    updatePrice(priceElement, printSize, frameStyle, frameWidth, matWidth);
}


function initialSetParameter(printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizeSElement = document.getElementById('print-size-s');
    const printSizeMElement = document.getElementById('print-size-m');
    const printSizeLElement = document.getElementById('print-size-l');

    const frameSliderElement = document.getElementById('frame-slider');
    const frameTextboxElement = document.getElementById('frame-text-box');

    const frameStyleClassicElement = document.getElementById('frame-style-classic');
    const frameStyleNaturalElement = document.getElementById('frame-style-natural');
    const frameStyleShabbyElement = document.getElementById('frame-style-shabby');
    const frameStyleElegantElement = document.getElementById('frame-style-elegant');

    const matSliderElement = document.getElementById('mat-slider');
    const matTextboxElement = document.getElementById('mat-text-box');

    const matColorIvoryElement = document.getElementById('mat-color-ivory');
    const matColorMintElement = document.getElementById('mat-color-mint');
    const matColorWineElement = document.getElementById('mat-color-wine');
    const matColorIndigoElement = document.getElementById('mat-color-indigo');
    const matColorCoalElement = document.getElementById('mat-color-coal');

    const finishedObject = [];
    if (printSize == 'S')  else if (printSize == 'L')  else {
        printSizeMElement.checked = true;
    }


    frameSliderElement.value = frameWidth;
    frameTextboxElement.value = frameWidth;

    if (frameStyle == 'classic')  else if (frameStyle == 'shabby')  else if (frameStyle == 'elegant')  else {
        frameStyleNaturalElement.checked = true;
    }

    matSliderElement.value = matWidth;
    matTextboxElement.value = matWidth;

    if (matColor == 'ivory')  else if (matColor == 'wine')  else if (matColor == 'indigo')  else if (matColor == 'coal')  else {
        matColorMintElement.checked = true;
    }

};





function normalizeMatWidth(matWidthOriginal, comesFromURL = false) {
    let matWidth = parseFloat(matWidthOriginal);

    if (!Number.isFinite(matWidth)) {
        return 5.5;
    }};


function normalizeFrameWidth(frameWidthOriginal, comesFromURL = false) {
    let frameWidth = parseFloat(frameWidthOriginal);

    if (!Number.isFinite(frameWidth)) {
        return 4;
    }};


function setPrintSizesDOM(imageSize, previewImageElement) {
    const printSizeSElement = document.getElementById('print-size-s-num');
    const printSizeMElement = document.getElementById('print-size-m-num');
    const printSizeLElement = document.getElementById('print-size-l-num');

    printSizeSElement.innerText = `${parseFloat(imageSize.S[0]) / 10} × ${parseFloat(imageSize.S[1]) / 10}`;
    printSizeMElement.innerText = `${parseFloat(imageSize.M[0]) / 10} × ${parseFloat(imageSize.M[1]) / 10}`;
    printSizeLElement.innerText = `${parseFloat(imageSize.L[0]) / 10} × ${parseFloat(imageSize.L[1]) / 10}`;
}


function updatePrice(priceElement, printSize, frameStyle, frameWidth, matWidth) {
    let currentPrice = FrameAPI.calculatePrice(printSize, frameStyle, frameWidth * 10, matWidth * 10);
    priceElement.innerText = `€ ${(Math.round(currentPrice * 100) / 100).toFixed(2)}`;
}


function updateTotalSize(imageSize, totalSizeWithFrameElement, matWidth, frameWidth) {
    const checkedSize = document.querySelector('input[name="printSize"]:checked').value;
    const totalWidthAdd = (parseInt(matWidth) * 10 + parseInt(frameWidth) * 10) * 2;
    var totalWidth = (imageSize[checkedSize][0] + totalWidthAdd) / 10;
    var totalHeight = (imageSize[checkedSize][1] + totalWidthAdd) / 10;
    totalSizeWithFrameElement.innerText = `${totalWidth} × ${totalHeight} cm`;
}


export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    var frameCMWidth = frameWidth/10;
    var matCMWidth = matWidth/10;

    let baseS = 30.00;

    let small = 30.00;
    let medium = 2;
    let large = 3.5;

    let woodPerCentimeterClassic = 1.00;
    let woodPerCentimeterNatural = 0.80;
    let woodPerCentimeterShabby = 0.90;
    let woodPerCentimeterElegant= 0.85;

    let matPerCentimeter = 0.05;


    price = small+(matCMWidth*matPerCentimeter);
        if(frameStyle === "classic")
        else if(frameStyle === "natural"){
            price += (frameCMWidth*woodPerCentimeterNatural);
        }
        else if(frameStyle === "shabby")
        else if(frameStyle === "elegant"){
            price += (frameCMWidth*woodPerCentimeterElegant);
        }
    
        if(printSize === "M"){
            price *= medium;
        }
        else if(printSize === "L")
    
    const result =  (Math.round((price + Number.EPSILON) * 100) / 100);
    return result;
}

export function setCartItemsInHeader() {
  const cartInHeaderElement = document.getElementById('cart-link');
  const cart = JSON.parse(localStorage.getItem('cart'));
  if (cart && cart.length > 0) {
    cartInHeaderElement.innerText = `Cart (${cart.length})`;
  }
}
export default async function retrievePicture(objectID) {
  if (objectID) {
    const API_URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
    const cachedPicture = window.localStorage.getItem(objectID);
    let picture;

    if (cachedPicture === null || cachedPicture === undefined)  else {
      picture = JSON.parse(cachedPicture);
    }
    return picture;
  }}
export class Painting {
  constructor(
    objectID,
    artistDisplayName,
    title,
    objectDate,
    primaryImage,
    primaryImageSmall
  ) {
    this.objectID = objectID;
    this.artistDisplayName = artistDisplayName;
    this.title = title;
    this.objectDate = objectDate;
    this.primaryImage = primaryImage;
    this.primaryImageSmall = primaryImageSmall;
  }
}

export class PaintingithFrameConfig extends Painting {
  constructor(
    objectID,
    artistDisplayName,
    title,
    objectDate,
    primaryImage,
    primaryImageSmall,
    printSize,
    frameStyle,
    frameWidth,
    matColor,
    matWidth
  ) {
    super(
      objectID,
      artistDisplayName,
      title,
      objectDate,
      primaryImage,
      primaryImageSmall
    );
    
    this.printSize = printSize;
    this.frameStyle = frameStyle;
    this.frameWidth = frameWidth;
    this.matColor = matColor;
    this.matWidth = matWidth;
  }
}
export function retrieve(pictureQuery) {
    if (pictureQuery in localStorage) {
        console.log(`Retrieving ${pictureQuery} from local storage`);
        return JSON.parse(localStorage[pictureQuery]);
    }
}

export 
export class PictureDocumentContainer {
    constructor(containerID='gallery') {
        this.container = document.getElementById(containerID);
        if(!this.container) 
    }

    clear() {
        this.container.innerHTML = '';
    }

    addPictureToDocument(picture) {
        this.container.appendChild(createPictureElements(picture));

        function createPictureElements(picture) {
            const thumbObject = document.createElement('div');
            thumbObject.setAttribute('class', 'thumb');

            const aObject = document.createElement('a');
            aObject.setAttribute('id', `object-${picture.objectID}`);

            const imgObject = document.createElement('img');
            imgObject.setAttribute('id', `object-image-${picture.objectID}`);

            const museumObject = document.createElement('div');
            museumObject.setAttribute('class', 'museum-label');

            const artistObject = document.createElement('span');
            artistObject.setAttribute('class', 'artist');
            const titleObject = document.createElement('span');
            titleObject.setAttribute('class', 'title');
            const dateObject = document.createElement('span');
            dateObject.setAttribute('class', 'date');

            museumObject.appendChild(artistObject);
            museumObject.appendChild(titleObject);
            museumObject.appendChild(dateObject);

            aObject.appendChild(imgObject);
            aObject.appendChild(museumObject);

            thumbObject.appendChild(aObject);

            artistObject.innerText = `${picture.artistDisplayName}`;
            titleObject.innerText = `${picture.title}, `;
            dateObject.innerText = picture.objectDate;

            imgObject.src = picture.primaryImageSmall;
            imgObject.alt = `Artwork ${picture.title} of ${picture.artistDisplayName}`;

            aObject.href =`config.html?objectID=${picture.objectID}`;

            return thumbObject;

        }    

    }
}

        import * as SearchAPI from './search.js';
        import {retrieve, store} from './search-cache.js';
        import {PictureDocumentContainer} from './search-dom.js';
        import {setCartItemsInHeader} from './header-cart.js';

        document.addEventListener('DOMContentLoaded', event => {

            setCartItemsInHeader();
            const params = (new URL(document.location)).searchParams;
            const pictureQuery = params.get('q');

            try {
                pictureSearch(pictureQuery);
            } 

        });

        const searchInput = document.getElementById('search');
        searchInput.addEventListener('click', );

        const form = document.getElementById('form-search');

        async function pictureSearch(pictureQuery) {
            try {

                if (pictureQuery == null)  else {
                    document.getElementById('search-info').innerText = `Searching for “${pictureQuery}”...`;
                }



                var numberPictureTotal;
                var listOfPicture;
                var pictureCacheQuery = `search-cache-${pictureQuery}`;

                if (!pictureQuery)  else if (pictureCacheQuery in localStorage) {
                    const cachedResults = retrieve(pictureCacheQuery);
                    numberPictureTotal = cachedResults[0].total;
                    listOfPicture = cachedResults[1];
                    SearchAPI.updateSearchInfo(numberPictureTotal, pictureQuery);
                }

                const pictureContainer = new PictureDocumentContainer();
                pictureContainer.clear();
                for (let picture of listOfPicture) {
                    pictureContainer.addPictureToDocument(picture);
                }
            } 
        }


    
/*
import {
    Painting
} from './picture.js';

export 


export 


export 


export function updateSearchInfo(numberPictureTotal, pictureQuery) {
    if (numberPictureTotal == 1)  else {
        document.getElementById('search-info').innerText = `Found ${numberPictureTotal} artworks for “${pictureQuery}”`;
    }
}
