var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    
    return new (P || (P = Promise))(function (resolve, reject) {
        
        
        function step(result) { result.done ? resolve(result.value) ; }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export function setCurrentCartCount() {
    return __awaiter(this, void 0, void 0, function* () {
        let storage = localStorage.getItem("cart");
        if (storage !== null) {
            let carts = JSON.parse(storage);
            if (carts !== null) {
                let cartHeaderHTML = document.getElementById("cart-link");
                if (!cartHeaderHTML) 
                else {
                    if (carts.length > 0) {
                        cartHeaderHTML.innerText = "Cart (" + carts.length + ")";
                    }
                }
            }
        }
    });
}
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { calculatePrice, render } from "./frame.js";
import { getObject } from "./met-api.js";
import { setCurrentCartCount } from "./cart-count.js";
function getStoredCart() {
    let cartString = localStorage.getItem("cart");
    if (!cartString || cartString.length === 0 || cartString.match("null") !== null) 
    else {
        let cartList = JSON.parse(cartString);
        return cartList;
    }
}
function checkForEmptyCartsToDisplayTextAndDisableButton() {
    let carts = getStoredCart();
    if (carts.length === 0) 
}
function calculateAndSetCartPrices() {
    return __awaiter(this, void 0, void 0, function* () {
        let carts = getStoredCart();
        if (carts != null) {
            let priceTotal = 0;
            for (let cartObject of carts) {
                const price = calculatePrice(cartObject.printSize, cartObject.frameStyle, cartObject.frameWidth, cartObject.matWidth);
                priceTotal += price;
                let cartPriceHTML = document.getElementById(`price-${cartObject.objectID}`);
                if (!cartPriceHTML) {
                    console.log(`Could not find an Element with the ID price-${cartObject.objectID}`);
                }
            }
            let priceTotalHTML = document.getElementById("price-total");
            if (!priceTotalHTML) 
            else {
                priceTotalHTML.innerHTML = priceTotal.toFixed(2);
            }
        }
    });
}
function displayCarts() {
    return __awaiter(this, void 0, void 0, function* () {
        let carts = getStoredCart();
        let checkoutBtn = document.getElementById("checkout-button");
        checkoutBtn.addEventListener('onclick', );
        for (let i = 0; i < carts.length; i++) {
            let cartItemDiv = document.createElement('div');
            cartItemDiv.className = 'cart-item';
            let cartPreviewDiv = document.createElement('div');
            cartPreviewDiv.className = 'cart-preview';
            cartPreviewDiv.id = `preview-container-${carts[i].objectID}`;
            let cartLink = document.createElement('a');
            cartLink.setAttribute('href', `config.html?objectID=${carts[i].objectID}&printSize=${carts[i].printSize}&frameStyle=${carts[i].frameStyle}&frameWidth=${carts[i].frameWidth}&matColor=${carts[i].matColor}&matWidth=${carts[i].matWidth}`);
            let artwork = yield getObject(carts[i].objectID);
            let cartImage = document.createElement('img');
            cartImage.className = 'cart-thumb';
            cartImage.id = `preview-${carts[i].objectID}`;
            cartImage.setAttribute('src', artwork.primaryImageSmall);
            cartImage.addEventListener('load', () => render(cartImage, cartPreviewDiv, carts[i].printSize, carts[i].frameStyle, carts[i].frameWidth, carts[i].matColor, carts[i].matWidth));
            cartLink.appendChild(cartImage);
            cartPreviewDiv.appendChild(cartLink);
            let museumLabelDiv = document.createElement('div');
            museumLabelDiv.className = 'museum-label';
            let museumLabelInnerDiv = document.createElement('div');
            let artistSpan = document.createElement('span');
            artistSpan.className = 'artist';
            artistSpan.innerText = artwork.artistDisplayName;
            let titleSpan = document.createElement('span');
            titleSpan.className = 'title';
            titleSpan.innerText = artwork.title + ", ";
            let dateSpan = document.createElement('span');
            dateSpan.className = 'date';
            dateSpan.innerText = artwork.objectDate;
            let museumLabelBr1 = document.createElement('br');
            let museumLabelBr2 = document.createElement('br');
            let frameDescriptionSpan = document.createElement('span');
            frameDescriptionSpan.className = 'frame-description';
            let frameSize;
            switch (carts[i].printSize) {
                case "S":
                    frameSize = "Small";
                    break;
                case "M":
                    frameSize = "Medium";
                    break;
                
            }
            if (carts[i].matWidth === 0) 
            else {
                frameDescriptionSpan.innerText = `${frameSize} print in a ${carts[i].frameWidth / 10} cm ${carts[i].frameStyle} frame with a ${carts[i].matWidth / 10} cm ${carts[i].matColor} mat.`;
            }
            let cartPriceDiv = document.createElement('div');
            cartPriceDiv.className = 'cart-price';
            let priceSpan = document.createElement('span');
            priceSpan.id = `price-${carts[i].objectID}`;
            const price = calculatePrice(carts[i].printSize, carts[i].frameStyle, carts[i].frameWidth, carts[i].matWidth);
            priceSpan.innerText = price.toFixed(2);
            cartPriceDiv.innerText = `€`; // DON´T KNOW IF THIS WORKS
            cartPriceDiv.appendChild(priceSpan);
            let removeButton = document.createElement('button');
            removeButton.className = 'cart-remove';
            removeButton.addEventListener("click", );
            museumLabelInnerDiv.appendChild(artistSpan);
            museumLabelInnerDiv.appendChild(titleSpan);
            museumLabelInnerDiv.appendChild(dateSpan);
            museumLabelInnerDiv.appendChild(museumLabelBr1);
            museumLabelInnerDiv.appendChild(museumLabelBr2);
            museumLabelInnerDiv.appendChild(frameDescriptionSpan);
            museumLabelDiv.appendChild(museumLabelInnerDiv);
            museumLabelDiv.appendChild(cartPriceDiv);
            museumLabelDiv.appendChild(removeButton);
            cartItemDiv.appendChild(cartPreviewDiv);
            cartItemDiv.appendChild(museumLabelDiv);
            let cartSection = document.getElementById('cart');
            if (cartSection !== null) {
                cartSection.prepend(cartItemDiv);
            }
        }
    });
}

checkForEmptyCartsToDisplayTextAndDisableButton();
displayCarts();
setCurrentCartCount();
calculateAndSetCartPrices();
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getObject } from "./met-api.js";
import { calculatePrice, getPrintSizes, render } from "./frame.js";
import { setCurrentCartCount } from "./cart-count.js";
export const SIZES = ['S', 'M', 'L'];
export const FRAME_STYLES = ['classic', 'natural', 'shabby', 'elegant'];
export const MAT_COLORS = ['ivory', 'mint', 'wine', 'indigo', 'coal'];
function connectInputForms(idNumber, idRange) {
    const input1 = document.getElementById(idNumber);
    const input2 = document.getElementById(idRange);
    if (input1 === null || !(input1 instanceof HTMLInputElement)) 
    else if (input2 === null || !(input2 instanceof HTMLInputElement)) 
    else {
        input1.addEventListener("change", );
        input2.addEventListener("change", );
    }
}
function setImageValues(objectBody) {
    let previewImage = document.getElementById("preview-image");
    let imageLabel = document.getElementById("image-label");
    if (previewImage === null || !(previewImage instanceof HTMLImageElement)) 
    else {
        previewImage.onload = () => {
            updatePage();
        };
        previewImage.src = objectBody.primaryImageSmall;
        const artistSpan = document.createElement('span');
        artistSpan.className = "artist";
        artistSpan.innerText = objectBody.artistDisplayName;
        const titleSpan = document.createElement('span');
        titleSpan.className = "title";
        titleSpan.textContent = objectBody.title;
        const dateSpan = document.createElement('span');
        dateSpan.className = "date";
        dateSpan.textContent = objectBody.objectDate;
        imageLabel.appendChild(artistSpan);
        imageLabel.appendChild(titleSpan);
        imageLabel.append(", ");
        imageLabel.appendChild(dateSpan);
    }
}
function fetchConfigImage() {
    return __awaiter(this, void 0, void 0, function* () {
        const params = (new URL(document.location.toString())).searchParams;
        const objectQuery = params.get('objectID');
        if (objectQuery === null || objectQuery.length === 0) 
        const artObject = yield getObject(objectQuery);
        if (!artObject || artObject.primaryImageSmall.length == 0) 
        const configImageObject = {
            objectID: artObject.objectID,
            primaryImageSmall: artObject.primaryImageSmall,
            title: artObject.title,
            artistDisplayName: artObject.artistDisplayName,
            objectDate: artObject.objectDate
        };
        setImageValues(artObject);
        localStorage.setItem("configImage", JSON.stringify(configImageObject));
    });
}
function initWithQueryParams(params) {
    let size = params.get("printSize");
    if (size !== null ) 
    let frameWidth = params.get("frameWidth");
    if (frameWidth !== null) 
    let frameStyle = params.get("frameStyle");
    if (frameStyle !== null ) 
    let matWidth = params.get("matWidth");
    if (matWidth !== null) 
    let matColor = params.get("matColor");
    if (matColor !== null ) 
}
function addConfigEventListeners() {
    const inputElements = document.getElementsByTagName("input");
    for (let element of inputElements) {
        element.addEventListener("change", updatePage);
    }
    let addToCartButton = document.getElementById('config-form');
    addToCartButton.addEventListener("submit", );
}
function getCurrentValues() {
    const params = (new URL(document.location.toString())).searchParams;
    let objectID = params.get('objectID');
    let printSize = 'S';
    let frameStyle = 'classic';
    let frameWidth = 0;
    let matWidth = 0;
    let matColor = "";
    for (let size of SIZES) {
        let sizeInput = document.getElementById(`print-size-${size.toLowerCase()}`);
        if (sizeInput !== null && sizeInput instanceof HTMLInputElement && sizeInput.checked == true) {
            printSize = size;
            break;
        }
    }
    for (let style of FRAME_STYLES) {
        let styleInput = document.getElementById(`frame-style-${style}`);
        if (styleInput !== null && styleInput instanceof HTMLInputElement && styleInput.checked == true) {
            frameStyle = style;
            break;
        }
    }
    let frameWithInput = document.getElementById(`frameWidthInputNumber`);
    if (frameWithInput !== null && frameWithInput instanceof HTMLInputElement) {
        frameWidth = Number(frameWithInput.value);
    }
    let matWidthInput = document.getElementById(`matWidthInputNumber`);
    if (matWidthInput !== null && matWidthInput instanceof HTMLInputElement) {
        matWidth = Number(matWidthInput.value);
    }
    for (let color of MAT_COLORS) {
        let colorInput = document.getElementById(`mat-color-${color}`);
        if (colorInput !== null && colorInput instanceof HTMLInputElement && colorInput.checked == true) {
            matColor = color;
            break;
        }
    }
    return {
        objectID: objectID,
        printSize: printSize,
        frameStyle: frameStyle,
        frameWidth: frameWidth,
        matColor: matColor,
        matWidth: matWidth
    };
}
function updatePage() {
    const cartObject = getCurrentValues();
    let image = document.getElementById("preview-image");
    let imageContainer = document.getElementById("preview-container");
    render(image, imageContainer, cartObject.printSize, cartObject.frameStyle, cartObject.frameWidth, cartObject.matColor, cartObject.matWidth);
    let printSizes = getPrintSizes(image);
    let printWidth = printSizes[cartObject.printSize][0];
    let printHeight = printSizes[cartObject.printSize][1];
    for (let size of SIZES) {
        let relevantLabel = document.getElementById(`print-size-${size.toLowerCase()}-label`);
        relevantLabel.innerHTML = `${size == "S" ? "Small" : size == "M" ? "Medium" : "Large"}<br>${printSizes[size][0]} &times; ${printSizes[size][1]} cm`;
    }
    let priceDisplay = document.getElementById("price");
    priceDisplay.innerText = "€ " + calculatePrice(cartObject.printSize, cartObject.frameStyle, cartObject.frameWidth, cartObject.matWidth).toFixed(2);
    let totalSize = document.getElementById('total-size');
    const totalHeight = printHeight + cartObject.frameWidth + cartObject.matWidth;
    const totalWidth = printWidth + cartObject.frameWidth + cartObject.matWidth;
    totalSize.innerText = `${totalWidth} x ${totalHeight}`;
}

connectInputForms("matWidthInputNumber", "matWidthInputRange");
connectInputForms("frameWidthInputNumber", "frameWidthInputRange");
fetchConfigImage();
initWithQueryParams(new URLSearchParams(window.location.search));
addConfigEventListeners();
setCurrentCartCount();
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2
    const w = img.naturalWidth;
    const h = img.naturalHeight;
    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }
    else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }
    return { S: S, M: M, L: L };
}
export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }
    else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }
    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };
    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle].toString();
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let baseCost = 30;
    let matCost = matWidth * 0.05;
    let sizeFactor = printSize == "S" ? 1 : printSize == "M" ? 2 ;
    let frameCost;
    switch (frameStyle) {
        
        case 'natural':
            frameCost = frameWidth * 0.8;
            break;
        
        case 'elegant':
            frameCost = frameWidth * 0.85;
            break;
    }
    const price = (baseCost + frameCost + matCost) * sizeFactor;
    return Math.round(price * 100) / 100;
}
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    
    return new (P || (P = Promise))(function (resolve, reject) {
        
        
        function step(result) { result.done ? resolve(result.value) ; }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export function getObject(objectId) {
    return __awaiter(this, void 0, void 0, function* () {
        const cachedObject = localStorage.getItem(objectId);
        if (cachedObject) {
            return JSON.parse(cachedObject);
        }
    });
}
export 
export 
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { fetchResults, search } from "./met-api.js";
import { setCurrentCartCount } from "./cart-count.js";
const RESULT_LIMIT = 100;
performSearch("q");
setCurrentCartCount();
function performSearch(queryParam) {
    return __awaiter(this, void 0, void 0, function* () {
        const searchQuery = (new URL(document.location.toString())).searchParams.get(queryParam);
        const searchInfo = document.getElementById("search-info");
        const gallery = document.getElementById("gallery");
        let resultNumber = 0;
        if (searchQuery === null || searchQuery.length === 0) 
        else {
            searchInfo.innerText = `Searching for “${searchQuery}”...`;
            let response = yield search(searchQuery, true);
            let searchResponse = yield response.json();
            let connectedResults = yield fetchResults(searchResponse, RESULT_LIMIT);
            displayResults(connectedResults, gallery);
            searchInfo.innerText = `Found ${searchResponse.total} ${searchResponse.total === 1  : "artworks"} for “${searchQuery}”`;
        }
    });
}
function displayResults(connectedSearchResults, gallery) {
    connectedSearchResults.forEach(obj => {
        const resultDiv = document.createElement('div');
        resultDiv.className = "thumb";
        const resultLink = document.createElement('a');
        resultLink.href = `config.html?objectID=${obj.objectID}`;
        resultLink.id = `object-${obj.objectID}`;
        const imageElement = document.createElement('img');
        imageElement.src = obj.primaryImageSmall;
        imageElement.alt = "";
        imageElement.id = `object-image-${obj.objectID}`;
        const objectLabel = document.createElement('div');
        objectLabel.className = "museum-label";
        const artistSpan = document.createElement('span');
        artistSpan.className = "artist";
        artistSpan.textContent = obj.artistDisplayName;
        const titleSpan = document.createElement('span');
        titleSpan.className = "title";
        titleSpan.textContent = obj.title;
        const dateSpan = document.createElement('span');
        dateSpan.className = "date";
        dateSpan.textContent = obj.objectDate;
        objectLabel.appendChild(artistSpan);
        objectLabel.appendChild(titleSpan);
        objectLabel.append(", ");
        objectLabel.appendChild(dateSpan);
        resultLink.appendChild(imageElement);
        resultLink.appendChild(objectLabel);
        resultDiv.appendChild(resultLink);
        gallery.appendChild(resultDiv);
    });
}
