import * as API from './met-api.js';
import {setCartQty} from './helpers.js';
import * as DOM from "./dom-helpers.js";
import {calculatePrice, render} from "./frame.js";

export const fetchCart = () => {
    if ('cart' in localStorage) {
        return JSON.parse(localStorage['cart'])
    }
}

document.addEventListener('DOMContentLoaded', event => {
    shoppingCart = fetchCart();
    /* construct html */
    cartItems(shoppingCart);
})

/* get array of items in cart */
const printSizes = {"S": "Small", "M": "Medium", "L": "Large"};
var priceList = [];
let shoppingCart = fetchCart();

/* add html dynamically */
const cartItems = async (cart) => {
    /* set number of cart items in header */
    setCartQty();
    shoppingCart = fetchCart();
    const cartSection = document.getElementById("cart");
    if (cartSection) {
        cartSection.innerHTML = '';
        /* reset list of prices */
        priceList = [];

        for (const idx in cart) {
            const item = cart[idx];
            const child = await renderEntry(idx, item);
            cartSection.appendChild(child);
        }
        cartSection.appendChild(cartTotal());
    }
};

const renderEntry = async (idx, item) => {
    const data = await API.fetchObjectData(item.objectID);
    if (data) {
        return DOM.setAttributes(
            DOM.container([
                cartPreview(data, item, idx),
                museumLabel(data, item, idx)
            ], 'div'),
            {class: ['cart-item']}
        );
    }};


const frameDescr = (item) => {
    /* divide width dimensions by 10, as they are stored in mm */
    let matWidth = item.matWidth / 10;
    let description = `${printSizes[item.printSize]} print in a ${item.frameWidth / 10} cm ${item.frameStyle} frame`;
    return matWidth === 0  : description + ` with a ${matWidth} cm ${item.matColor} mat.`;
};

const museumLabel = (data, item, idx) => {
    const artist = DOM.setAttributes(DOM.textElement('span', data.artist), {class: ["artist"]});
    const title = DOM.setAttributes(DOM.textElement('span', `${data.title}, `), {class: ["title"]});
    const date = DOM.setAttributes(DOM.textElement('span', data.year), {class: ["date"]});
    const lineBreak0 = DOM.br();
    const lineBreak1 = DOM.br();
    const frameDescription = DOM.setAttributes(DOM.textElement('span',
        frameDescr(item)
    ), {class: ["frame-description"]});
    const artDiv = DOM.container([artist, title, date, lineBreak0, lineBreak1, frameDescription], 'div');

    let artPrice = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
    const price = DOM.setAttributes(DOM.textElement('span', artPrice),
        {id: `price-${idx}`});
    priceList.unshift(artPrice);

    const cartPrice = DOM.setAttributes(DOM.container([price], 'div'), {class: ['cart-price']});
    cartPrice.innerHTML = '€ ' + cartPrice.innerHTML;

    let cartRemove = DOM.setAttributes(document.createElement('button'), {class: ['cart-remove']});
    cartRemove.onclick = ;

    return DOM.setAttributes(DOM.container(
        [artDiv, cartPrice, cartRemove], 'div'),
        {class: ["museum-label"]});
};

const cartPreview = (data, item, idx) => {
    const previewImage = DOM.setAttributes(DOM.img(data.url),
        {class: ['cart-thumb'], id: `preview-${idx}`});

    let url = new URL('config.html', window.location.origin);
    for (let param in item) {
        url.searchParams.set(param, item[param]);
    }

    const link = DOM.setAttributes(DOM.container([previewImage],
        'a'), {href: url.toString()/*'config.html'*/});
    const container = DOM.setAttributes(
        DOM.container([link], 'div'),
        {class: ["cart-preview"], id: `preview-container-${idx}`}
    );
    previewImage.onload = () => {
        render(previewImage, container,
            item.printSize, item.frameStyle, item.frameWidth,
            item.matColor, item.matWidth);
    };
    return container;
};

const cartTotal = () => {

    let price, checkout;
    if (!shoppingCart || shoppingCart.length === 0)  else {
        console.log(priceList);
        const priceTotal = DOM.setAttributes(DOM.textElement("span", priceList.reduce((a, b) => a + b, 0).toFixed(2)),
            {id: "price-total"});
        price = DOM.setAttributes(DOM.container([priceTotal]), {class: ['price']});
        price.innerHTML = "Total: €" + price.innerHTML;
        checkout = DOM.setAttributes(DOM.textElement("button", "Checkout"), {
            type: "button",
            id: "checkout-button"
        });
        checkout.onclick = ;
    }

    return DOM.setAttributes(DOM.container([price, checkout], "div"), {class: ["cart-total"]});
};


export 

export function setAttributes(element, attributes) {
  for(let key in attributes) {
      if(key === 'class'){
        setClasses(element, attributes[key]);
        continue;
      }
      

      if(typeof(attributes[key]) === 'object')  else {
          element[key] = attributes[key];
      }
  }
  return element;
}

export function br() {
    return document.createElement('br');
}

export function textElement(tag, text) {
  const element = document.createElement(tag);
  element.innerText = text;
  return element;
}

export function container(elements, tag='div') {
  const container = document.createElement(tag);
  for(let element of elements) {
      container.appendChild(element);
  }
  return container;
}

export function img(src, alt="") {
  const element = document.createElement('img');
  setAttributes(element, {src, alt});
  return element;
}

export function setClasses(element, classes){
  return element.className = classes.join(',');
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let sizeFactor;
    switch (printSize) {
        case 'S':
            sizeFactor = 1;
            break;
        
        case 'L':
            sizeFactor = 3.5;
            break;
    }
    let woodFactor;
    switch (frameStyle) {
        
        case 'natural':
            woodFactor = 0.8;
            break;
        case 'shabby':
            woodFactor = 0.9;
            break;
        case 'elegant':
            woodFactor = 0.85;
            break;
    }
    let price = sizeFactor * (30 + woodFactor * (frameWidth/10) + (matWidth/10) * 0.05);
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { fetchCart } from './cart.js';

export const getQueryParameter = 

export const setCartQty = () => {
  const cart = fetchCart();
  const element = document.getElementById('cart-link');
  element.innerText = cart.length === 0  : `Cart (${cart.length})`;
}
import * as MetCache from './met-cache.js';
import { ImageObject } from './met.js';

const BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1';

export const search = 

export const fetchObjectData = async (id) => {
  const url = `${BASE_URL}/objects/${id}`;

  let image = MetCache.fetchImage(id);
  if(image)

  try {
    const data = await fetch(url).then((response)=>{
      console.log(`received response ${response.ok}`)
      if(response.ok) {
        return response.json();
      }
    }).catch();
    if(!data) 
    const img = new ImageObject(data.objectID, data.primaryImageSmall, data.artistDisplayName, data.title, data.objectDate);
    MetCache.storeImage(img);
    return img;
  }export const storeImage = (image) => {
  const key = image.id;
  console.log(`Storing image with id ${key} in local storage.`);
  localStorage[key] = JSON.stringify(image);
}

export const fetchImage = (id) => {
  if(id in localStorage)
}export class ImageObject {
  constructor(id, url, artist, title, year){
    this.id = id;
    this.url = url;
    this.artist = artist;
    this.title = title;
    this.year = year;
  }
}