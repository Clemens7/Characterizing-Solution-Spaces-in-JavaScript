export async function fetchJsonFromAPI(id, shouldCache = true) {
    if (shouldCache && id in window.localStorage) 

    let response = await fetch('https://collectionapi.metmuseum.org/public/collection/v1/objects/' + id);
    if (response.status !== 200) 
    let json = await response.json();
    if (shouldCache) cacheJson(json, id);
    return json;
}

export 

export function cacheJson(json, key) {
    try {
        window.localStorage[key] = JSON.stringify(json);
        console.log(`Saved json response '${key}' to localStorage`);
    } 
}
import { retrieveJson, fetchJsonFromAPI } from './cache.js';
import { calculatePrice, render } from './frame.js';

const cart = document.getElementById("cart");
let priceTotal = 0;
let id = 0;

document.addEventListener('DOMContentLoaded', event => {
    loadDataAndPopulateUI();
});


async function loadDataAndPopulateUI() {
    priceTotal = 0;
    try {
        let jsonItems = localStorage.getItem('cart');
        const elements = JSON.parse(jsonItems);
        if (elements.length === 0) catch {
        createPriceAndCheckout();
        displayEmptyCart();
    }}















function createPriceAndCheckout() {
    const cartTotal = document.createElement("div");
    cartTotal.className = "cart-total";
    cart.appendChild(cartTotal);
    const price = document.createElement("div");
    price.className = "price";
    price.innerText = "Total: € ";
    cartTotal.appendChild(price);
    const checkoutPriceTotal = document.createElement("span");
    checkoutPriceTotal.id = "price-total";
    checkoutPriceTotal.innerText = `${parseFloat(priceTotal)}`;
    price.appendChild(checkoutPriceTotal);
    const checkoutButton = document.createElement("button");
    checkoutButton.id = "checkout-button";
    checkoutButton.innerText = "Checkout";
    checkoutButton.addEventListener('click', );

    cartTotal.appendChild(checkoutButton);
}

export function updateHeaderCartCount() {
    let jsonItems = localStorage.getItem('cart');
    try {
        const elements = JSON.parse(jsonItems);
        let count = 0;
        elements.forEach();
        const cartLink = document.getElementById("cart-link");
        if (count == 0) 
    }catch (e) {
        return;
    }
}

export 
import { getPrintSizes, render, calculatePrice, calculateTotalSize } from './frame.js';
import { fetchJsonFromAPI } from './cache.js';
import { updateHeaderCartCount } from './cart.js'

const frameWidthSlider = document.getElementsByName('frameWidthR')[0];
const frameWidthField = document.getElementsByName('frameWidth')[0];
const matWidthSlider = document.getElementsByName('matWidthR')[0];
const matWidthField = document.getElementsByName('matWidth')[0];
const previewImage = document.getElementById('preview-image');
const imageLabel = document.getElementById('image-label');
const previewContainer = document.getElementById('preview-container');
const radioElements = document.querySelectorAll('input[type = radio]');
const form = document.getElementById('config-form');
const cartLink = document.getElementById('cart-link');

let config = {
    objectId : null,
    printSize: 'M',
    frameStyle: 'natural',
    frameWidth: 4,
    matColor: 'mint',
    matWidth: 5.5,
    price: 30.0,
    artist: null,
    title: null,
    date: null
}

form.onsubmit = ;






updateHeaderCartCount();

previewImage.onload = function() {
    calculatePrintSizeLabels();
    updatePreview();
};

for (let radioElement of radioElements) {
    radioElement.addEventListener('click', updateConfig);
}

let params = new URLSearchParams(window.location.search);
if (!params.has('objectID')) 

for (const [key, value] of params) {
    if (key === 'objectID') {
        config.objectId = value;

        fetchJsonFromAPI(config.objectId).then(data => {
            if (data === null) 
            config.artist = data.artistDisplayName;
            config.title = data.title;
            config.date = data.objectDate;
            imageLabel.innerHTML = `<strong>${config.artist}</strong> <br> <i>${config.title}, ${config.date}</i>`;
            previewImage.src = data.primaryImageSmall;
            previewImage.alt = `${config.title} by ${config.artist} from ${config.date}`;
        });
    }
}

frameWidthSlider.addEventListener('input', );
frameWidthField.addEventListener('focusout', );
matWidthSlider.addEventListener('input', );
matWidthField.addEventListener('focusout', );



function calculatePrintSizeLabels() {
    const sizes = getPrintSizes(previewImage);

    document.getElementById('print-size-s-label').innerHTML = `Small<br>${sizes.S[0]} × ${sizes.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${sizes.M[0]} × ${sizes.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${sizes.L[0]} × ${sizes.L[1]} cm`;
}



function updatePreview() {
    const priceLabel = document.getElementById('price');
    const totalSizeLabel = document.getElementById('total-size');
    const price = calculatePrice(config.printSize, config.frameStyle, config.frameWidth, config.matWidth);

    config.price = price;
    priceLabel.innerText = '€ ' + price.toFixed(2);
    totalSizeLabel.innerText = calculateTotalSize(previewImage, config.printSize, config.frameWidth, config.matWidth);

    render(previewImage, previewContainer, config.printSize, config.frameStyle, config.frameWidth*10, config.matColor, config.matWidth*10);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    if (frameStyle === 'classic')  else if (frameStyle === 'natural') {
        price += 0.8 * frameWidth;
    }

    price += matWidth * 0.05;

    if (printSize === 'M') {
        price *= 2;
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export function calculateTotalSize(img, printSize, frameWidth, matWidth) {
    const printSizes = getPrintSizes(img);
    const width = printSizes[printSize][0] + 2 * frameWidth + 2 * matWidth;
    const height = printSizes[printSize][1] + 2 * frameWidth + 2 * matWidth;

    return `${(Math.round((width + Number.EPSILON) * 100) / 100)} × ${(Math.round((height + Number.EPSILON) * 100) / 100)} cm`;
}
