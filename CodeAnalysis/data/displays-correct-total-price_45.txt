
    import * as Frame from './frame.js';

    let total = 0;

    function getLabelText(item){
      let text;
      let size;
      if(item.printSize==="S"){
        size = "Small";
      }else if(item.printSize==="M")else{
        size = "Large";
      }

      if (item.matWidth > 0){

        text = size + " print in a " + (item.frameWidth)/10 + " cm " + item.frameStyle + " frame with a " + (item.matWidth)/10 + " cm " + item.matColor + " mat.";

      }
      return text;
    }


    function itemToHtml(item, ur, ar, ti, da, cont){
      const outerContainer = document.createElement('div');
      outerContainer.className = "cart-item";
      cont.appendChild(outerContainer);
      const preview = document.createElement('div');
      preview.className = "cart-preview";
      const link = document.createElement('a'); //Link for redirection to the corresponding config page
      link.href = "config.html?objectID=" + item.objectID + "&printSize=" + item.printSize + "&frameStyle=" + item.frameStyle + "&frameWidth=" + item.frameWidth + "&matColor=" + item.matColor + "&matWidth=" + item.matWidth;
      const img = document.createElement('img');
      img.src = ur; //always Small?
      preview.appendChild(link);
      link.appendChild(img);
      outerContainer.appendChild(preview);
      Frame.render(img, preview, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
      const label = document.createElement('div');
      label.className = "museum-label";
      const innerLabel = document.createElement('div');
      const artist = document.createElement('span');
      artist.className ="artist";
      artist.innerText = ar;
      const title = document.createElement('span');
      title.className ="title";
      title.innerText = ti + ', ';
      const date = document.createElement('span');
      date.className ="date";
      date.innerText = da;
      const br = document.createElement('br');
      const frame_description = document.createElement('span');
      frame_description.className ="frame-description";
      frame_description.innerText = getLabelText(item);
      innerLabel.appendChild(artist);
      innerLabel.appendChild(title);
      innerLabel.appendChild(date);
      innerLabel.appendChild(br);
      innerLabel.appendChild(br);
      innerLabel.appendChild(frame_description);
      label.appendChild(innerLabel);
      const priceLabel = document.createElement('div');
      priceLabel.className ="cart-price";
      priceLabel.innerText ="â‚¬ ";
      const price = document.createElement('span');
      let itemPrice = Frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
      total += itemPrice;
      price.innerText = itemPrice.toFixed(2);
      priceLabel.appendChild(price);
      label.appendChild(priceLabel);
      const button = document.createElement('button');
      button.className = "cart-remove";
      button.addEventListener("click", );
      label.appendChild(button);
      outerContainer.appendChild(label);
    }

    function showArtWorks(container){
      const key = 'cart';
      if (key in localStorage) {
        console.log(`Retrieving ${key} from local storage`);
        if (localStorage[key] === "" || localStorage[key] === "[]")  else {
          let objects = JSON.parse(localStorage[key]);
          console.log(`Found ${objects.length} item(s) in shopping cart.`);
          document.querySelector('#cart-link').innerHTML = "Cart (" + objects.length + ")";
          const url = 'https://collectionapi.metmuseum.org/public/collection/v1/objects/';
          let revObjects = objects.reverse();
          let fetches = [];
          for(let item of revObjects){
            if (item.objectID in localStorage) else{
              let objectUrl = url + item.objectID;
              fetches.push(
                fetch(objectUrl)
                      .then(response => {
                        return response.json()
                      })
                      .then(data => {
                        itemToHtml(item, data.primaryImageSmall, data.artistDisplayName, data.title, data.objectDate, container);
                        localStorage[item.objectID] = JSON.stringify(data);
                      })
                      .catch()
              );
            }
          }

          Promise.all(fetches).then(function() {
            let cartTotal = container.children[0];
            container.removeChild(cartTotal);
            container.appendChild(cartTotal);
            document.querySelector('#price-total').innerHTML = total.toFixed(2);
            document.getElementById("checkout-button").disabled = false;
          });
        }
      }

    }

    class ArtWorksContainer {
      constructor(containerID = 'cart') {
        this.container = document.getElementById(containerID);
        if (!this.container) 

        /*var jtext =  '[' +
                '{ "objectID": 726968 , "printSize":"S",' +
                '"frameStyle":"classic" , "frameWidth": 40,' +
                '"matColor":"ivory" , "matWidth": 50 },' +
                '{ "objectID": 742769 , "printSize":"S",' +
                '"frameStyle":"classic" , "frameWidth": 40,' +
                '"matColor":"ivory" , "matWidth": 50 } ,' +
                '{ "objectID":  823328, "printSize":"S",' +
                '"frameStyle":"classic" , "frameWidth": 40,' +
                '"matColor":"ivory" , "matWidth": 50 }]';
        var key = "cart";
        localStorage[key] = jtext;


        showArtWorks(this.container);
      }
    }

    new ArtWorksContainer();


    

    document.getElementById('checkout-button').addEventListener('click', );

  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {

    let price = 0.0;
    let basePrice = 30.0;
    let sizeFactor;
    let frameStylePrice;
    let mat = 0.05;

    switch(printSize){
        case "S":
            sizeFactor = 1.0;
            break;
        
        case "L":
            sizeFactor = 3.5
            break;
        
    }

    switch(frameStyle){
        case "natural":
            frameStylePrice = 0.80;
            break;
        case "shabby":
            frameStylePrice = 0.90;
            break;
        case "elegant":
            frameStylePrice = 0.85;
            break;
        
        
    }

    console.log("framestyleprice: " + frameStylePrice);
    let framePrice = frameStylePrice * frameWidth / 10;
    let matPrice = mat * matWidth / 10;
    price = (basePrice + framePrice + matPrice) * sizeFactor;
    console.log("Frame Price: " + price);

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
