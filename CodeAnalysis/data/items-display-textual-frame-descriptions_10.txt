import {Artwork} from "./artwork.js";
import * as ArtworkCache from "./artwork-cache.js"

export const BASE_URL = "https://collectionapi.metmuseum.org/public/collection/v1/";

export const retrieve = ;

export const retrieveFromObjectIDs = ;

export const retrieveFromObjectID = async objectID => {
    try {
        const response = await fetch(`${BASE_URL}objects/${objectID}`);
        const jsonArtwork = await response.json();
        return new Artwork(
            jsonArtwork.primaryImageSmall,
            jsonArtwork.objectName,
            jsonArtwork.artistDisplayName,
            jsonArtwork.title,
            jsonArtwork.objectDate,
            jsonArtwork.objectID
        );
    }};export const retrieveByObjectID = 

export const storeArtwork = 

export const retrieve = 

export const store = export class Artwork {
    constructor(imageLink, alt, artist, title, date, objectID) {
        this.imageLink = imageLink;
        this.alt = alt;
        this.artist = artist;
        this.title = title;
        this.date = date;
        this.objectID = objectID;
    }
}import {FrameConfig} from "./frameconfig.js";

export const STORAGE_KEY = "cart";

export const retrieveCart = () => {
    return JSON.parse(localStorage.getItem(STORAGE_KEY));
}

export const insertItemInCart = 

export const removeIndexInCart = 

export const retrieveIndexInCart = 


        import * as Cart from "./cart-cache.js"

        document.addEventListener("DOMContentLoaded", async event => {
            const cart = Cart.retrieveCart();
            if (cart) {
                if (cart.length > 0) {
                    document.getElementById("cart-link").innerText = `Cart (${cart.length})`
                }
            }
        })
    export class FrameConfig {
    
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
     let price = 0;
     let counter = 1
     if(printSize==='S'){
         price+=30;
     }else if(printSize==='M') else{
         price+=105;
         counter = 3.5;
     }
     frameWidth/=10; //cost per centimeter
     frameWidth*=counter
     switch (frameStyle) {
         case ("classic"):
             price+=frameWidth;
             break;
         
         case ("shabby"):
             price+=(frameWidth*0.9);
             break;
         
     }
     price = Math.round((price + Number.EPSILON) * 100) / 100
     matWidth/=10; //cost per centimeter
     price=price+(matWidth*0.05*counter);
     return (Math.round((price + Number.EPSILON) * 100) / 100);
}
