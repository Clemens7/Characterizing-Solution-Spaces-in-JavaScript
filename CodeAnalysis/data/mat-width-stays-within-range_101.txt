export 

export function storeArtwork(artwork) {
  console.log(`store: ${JSON.stringify(artwork)}`);
  localStorage.setItem(artwork.objectID, JSON.stringify(artwork));
}

export 

export 


export function retrieveArtwork(objectID) {
  console.log(`Retrieving ${objectID} from local storage`);
  if (localStorage.getItem(objectID) !== null) 
}export class Artwork {
  
}

export var NumberOfItems = {
  store: ,
  getNumber: 
}import * as ArtworkCache from './helper/artwork-cache.js';
import * as ArtworkAPI from './helper/met-museum-api.js';
import * as FrameConfigurator from '../frame.js';
import * as Storage from './helper/storage.js'

var confPrintSize, confFrameStyle, confFrameWidth, confMatColor, confMatWidth;

const params = (new URL(document.location)).searchParams;
const objectID = params.get('objectID');
const printSize = params.get('printSize');
const frameStyle = params.get('frameStyle');
const frameWidth = params.get('frameWidth');
const matColor = params.get('matColor');
const matWidth = params.get('matWidth');
if (objectID == null) 
console.log(`objectID: ${objectID}`);
(async function() {
    const artwork = await ArtworkAPI.retrieveUsingObjectID(objectID);
    console.log(artwork);

    if (artwork.message === "ObjectID not found" || artwork === undefined) 
    const preview_image = document.getElementById('preview-image');
    preview_image.setAttribute("src", artwork.primaryImageSmall);

    document.getElementById('image-label').innerHTML = "<label><b>" +
        artwork.artistDisplayName +
        "</b><br><i>" + artwork.title +
        ",</i> " + artwork.objectDate +
        "</label>";
}())





if (printSize != null) 

if (frameStyle != null) 

if (frameWidth != null) 

if (matColor != null) 

if (matWidth != null) 
const printSizeRadioInputs = document.getElementsByName('printSize');
const printSizeInputs = Array.from(printSizeRadioInputs);
printSizeInputs.map(input => input.addEventListener('change', ));

const frameStyleRadioInputs = document.getElementsByName('frameStyle');
const frameStyleInputs = Array.from(frameStyleRadioInputs);
frameStyleInputs.map(input => input.addEventListener('change', ));

const matColorRadioInputs = document.getElementsByName('matColor');
const matColorInputs = Array.from(matColorRadioInputs);
matColorInputs.map(input => input.addEventListener('change', ));

function updateRenderer() {
    const printSizeRadioInputs = document.querySelectorAll("input[name='printSize']");
    const printSizeInputs = Array.from(printSizeRadioInputs);
    const printSizeInput = getCheckedItem(printSizeInputs);
    console.log(printSizeInput.value);
    confPrintSize = printSizeInput.value;

    const frameStyleRadioInputs = document.querySelectorAll("input[name='frameStyle']");
    const frameStyleInputs = Array.from(frameStyleRadioInputs);
    const frameStyleInput = getCheckedItem(frameStyleInputs);
    console.log(frameStyleInput.value);
    confFrameStyle = frameStyleInput.value;

    const frameWidthRadioInputs = document.querySelectorAll("input[name='frameWidth']");
    const frameWidthInputs = Array.from(frameWidthRadioInputs);
    const frameWidthInput = frameWidthInputs[0];
    console.log(frameWidthInput.value);
    confFrameWidth = frameWidthInput.value * 10;

    const matColorRadioInputs = document.querySelectorAll("input[name='matColor']");
    const matColorInputs = Array.from(matColorRadioInputs);
    const matColorInput = getCheckedItem(matColorInputs);
    console.log(matColorInput.value);
    confMatColor = matColorInput.value;

    const matWidthRadioInputs = document.querySelectorAll("input[name='matWidth']");
    const matWidthInputs = Array.from(matWidthRadioInputs);
    const matWidthInput = matWidthInputs[0];
    console.log(matWidthInput.value);
    confMatWidth = matWidthInput.value * 10;

    const preview_image = document.getElementById('preview-image');
    const container = document.getElementById('preview-container');
    FrameConfigurator.render(preview_image, container, printSizeInput.value, frameStyleInput.value, frameWidthInput.value, matColorInput.value, matWidthInput.value);
    document.getElementById('price').innerText = `€ ${FrameConfigurator.calculatePrice(printSizeInput.value, frameStyleInput.value, frameWidthInput.value*10, matWidthInput.value*10).toFixed(2)}`;
    document.getElementById('total-size').innerText = `${Math.round(((printSizeInput.value=="S":printSizeInput.value=="M"?42)+frameWidthInput.value*2+matWidthInput.value*2)*10)/10} × ${Math.round(((printSizeInput.value=="S":printSizeInput.value=="M"?28.7)+frameWidthInput.value*2+matWidthInput.value*2)*10)/10} cm`;
}


function getCheckedItem(items) {
    let checkedItem;
    for (let item of items) {
        if (item.type === 'radio') {
            if (item.checked) {
                checkedItem = item;
            }
        }
    }
    return checkedItem;
}

document.getElementById('frameWidth').addEventListener("change", );

document.getElementById('frameWidthR').addEventListener("change", );

document.getElementById('matWidth').addEventListener("change", function() {
    this.value = Math.round(this.value * 10) / 10;
    if (this.value < 0) {
        this.value = document.getElementById('matWidthR').min;
    } else if (this.value > 10) {
        this.value = document.getElementById('matWidthR').max;
    }
    document.getElementById('matWidthR').value = this.value;
    updateRenderer();

});

document.getElementById('matWidthR').addEventListener("change", );

document.getElementById('add-to-chart').addEventListener("click", );

document.addEventListener('DOMContentLoaded', event => {
    updateRenderer();
    updateCartItems();
});


function updateCartItems() {
    const cart_link = document.getElementById('cart-link');
    const numberOfItems = Storage.getCartItemCount();
    if (numberOfItems > 0) 
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {
        S: S,
        M: M,
        L: L
    };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;
    switch (frameStyle) {
        
        case "natural":
            price += 0.8 * frameWidth / 10;
            break;
        
        
        
    }
    price += 0.05 * matWidth / 10;
    switch (printSize) {
        case "M":
            price = price * 2;
            break;
        
        
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}import * as ArtworkCache from './artwork-cache.js';
import {
  Artwork,
  NumberOfItems
} from './artwork.js';

const API_SEARCH_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/search';
const API_OBJECT_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/objects/';
const HIGHLIGHTS_URL = './highlights.json';
const SEARCH_CONDITION = 'hasImages=true';

export 

export async function retrieveUsingObjectID(objectID) {
  let artworksCache = ArtworkCache.retrieveArtwork(objectID);
  console.log(`artworksCache:  ${JSON.stringify(artworksCache)}`);
  if (artworksCache) 
  let artworkResponse = await retrieveArtwork(objectID);
  console.log(`artwork ${JSON.stringify(artworkResponse)}`);
  ArtworkCache.storeArtwork(artworkResponse);
  return artworkResponse;
}

async function retrieveArtwork(objectID) {
  const url = `${API_OBJECT_BASE_URL}${objectID}`;
  try {
    let response = await fetch(url);
    let responseJson = await response.json();
    return responseJson;
  }}





export 



export 

export 

export 

export function getCartItemCount() {    
    return JSON.parse(window.localStorage.getItem('cart')).length;
}