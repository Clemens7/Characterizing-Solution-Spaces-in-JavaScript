import * as API from './met-api.js';
import {setCartQty} from './helpers.js';
import * as DOM from "./dom-helpers.js";
import {calculatePrice, render} from "./frame.js";

export const fetchCart = () => {
    if ('cart' in localStorage)  else {
        return [];
    }
}

document.addEventListener('DOMContentLoaded', event => {
    shoppingCart = fetchCart();
    /* construct html */
    cartItems(shoppingCart);
})

/* get array of items in cart */
const printSizes = {"S": "Small", "M": "Medium", "L": "Large"};
var priceList = [];
let shoppingCart = fetchCart();

/* add html dynamically */
const cartItems = async (cart) => {
    /* set number of cart items in header */
    setCartQty();
    shoppingCart = fetchCart();
    const cartSection = document.getElementById("cart");
    if (cartSection) 
};

const renderEntry = ;


const frameDescr = ;

const museumLabel = ;

const cartPreview = ;

const cartTotal = ;

import * as API from './met-api.js';
import {getQueryParameter, setCartQty} from './helpers.js';
import {render, getPrintSizes, calculatePrice} from "./frame.js";
import * as DOM from "./dom-helpers.js";

/* for shopping cart */
var cartItem = {
    objectID: null,
    printSize: null,
    frameStyle: null,
    frameWidth: null,
    matWidth: null,
    matColor: null
}

/* sets config params in cartItem */
function setFrameConfigParams(printSize, frameStyle, frameWidth, matColor, matWidth) {
    cartItem.printSize = printSize;
    cartItem.frameStyle = frameStyle;
    cartItem.matColor = matColor;
    /* convert from cm to mm */
    cartItem.frameWidth = 10 * frameWidth;
    cartItem.matWidth = 10 * matWidth;
}

const updateConfiguration = () => {
    let img = document.getElementById('preview-image');
    let container = document.getElementById('preview-container');
    const form = document.getElementById('config-form');
    const printSize = form.elements['printSize'].value;
    const frameStyle = form.elements['frameStyle'].value;
    const frameWidth = form.elements['frameWidth'].value;
    const matWidth = form.elements['matWidth'].value;
    const matColor = form.elements['matColor'].value;
    render(img, container,
        printSize,
        frameStyle,
        frameWidth*10,
        matColor,
        matWidth*10);
    /* save config in cartItem */
    setFrameConfigParams(printSize, frameStyle, frameWidth, matColor, matWidth);
    document.getElementById('price').innerText =
        `€ ${calculatePrice(form.elements['printSize'].value,
            form.elements['frameStyle'].value,
            form.elements['frameWidth'].value*10,
            form.elements['matWidth'].value*10).toFixed(2)}`;
    const additional = Number(frameWidth) + Number(matWidth);
    const sizes = getPrintSizes(img)[printSize];
    document.getElementById('total-size').innerText =
        `${additional + sizes[0]} × ${additional + sizes[1]}`;
}

const textFieldSliderConfiguration = (sliderID, textFieldID, minValue, maxValue) => {
    const slider = document.getElementById(sliderID);
    const textField = document.getElementById(textFieldID);
    slider.addEventListener("input", );
    textField.addEventListener("click", );
    textField.addEventListener("focusout", );
    textField.addEventListener("change", );
    if (slider.value < minValue)  else if (slider.value > maxValue) 
    if (textField.value < minValue)  else if (textField.value > maxValue) 
}

const fetchData = async () => {
    const objectID = getQueryParameter('objectID');
    if (objectID) {
        console.log('checking for', objectID);
        const imageData = await API.fetchObjectData(objectID);
        console.log(`received ${imageData}`)
        if (!imageData)  else {
            cartItem.objectID = objectID;
            return imageData;
        }
    }}

const presetConfiguration = async () => {
    const form = document.getElementById('config-form');

    let printSize = getQueryParameter('printSize');
    if (printSize) 
    let frameStyle = getQueryParameter('frameStyle');
    if (frameStyle) 
    let frameWidth = getQueryParameter('frameWidth');
    console.log(frameWidth);
    if (frameWidth) 
    let matColor = getQueryParameter('matColor');
    if (matColor) 
    let matWidth = getQueryParameter('matWidth');
    if (matWidth) 

    let img = document.getElementById('preview-image');
    img.onload = () => {
        console.log('Loaded Image');
        const printSizes = getPrintSizes(img);
        document.getElementById('print-size-s-label').innerHTML = `Small<br>${printSizes.S[0]} × ${printSizes.S[1]}`;
        document.getElementById('print-size-m-label').innerHTML = `Medium<br>${printSizes.M[0]} × ${printSizes.M[1]}`;
        document.getElementById('print-size-l-label').innerHTML = `Large<br>${printSizes.L[0]} × ${printSizes.L[1]}`;
        updateConfiguration();
    };

    const imageData = await fetchData();
    if (imageData) {
        const artist = DOM.setAttributes(DOM.textElement('span', imageData.artist), {class: ['artist']});
        const title = DOM.setAttributes(DOM.textElement('span', `${imageData.title}, `), {class: ['title']});
        const date = DOM.setAttributes(DOM.textElement('span', imageData.year), {class: ['date']});
        const imageLabel = document.getElementById('image-label');
        imageLabel.appendChild(artist);
        imageLabel.appendChild(title);
        imageLabel.appendChild(date);

        img.src = imageData.url;
    }
}


document.addEventListener('DOMContentLoaded', event => {
    textFieldSliderConfiguration('frameSlider', 'frameTextField', 2, 5);
    textFieldSliderConfiguration('matSlider', 'matTextField', 0, 10);
    setCartQty();
    presetConfiguration();
    const inputs = document.querySelectorAll("input[type='radio']");
    for (let i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener('change', updateConfiguration)
    }
});



const form = document.getElementById("config-form")
form.addEventListener('submit', );


export 

export function setAttributes(element, attributes) {
  for(let key in attributes) {
      if(key === 'class'){
        setClasses(element, attributes[key]);
        continue;
      }
  }
  return element;
}

export 

export function textElement(tag, text) {
  const element = document.createElement(tag);
  element.innerText = text;
  return element;
}

export 

export 

export function setClasses(element, classes){
  return element.className = classes.join(',');
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let sizeFactor;
    switch (printSize) {
        
        case 'M':
            sizeFactor = 2;
            break;
        
    }
    let woodFactor;
    switch (frameStyle) {
        
        case 'natural':
            woodFactor = 0.8;
            break;
        
        
    }
    let price = sizeFactor * (30 + woodFactor * (frameWidth/10) + (matWidth/10) * 0.05);
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { fetchCart } from './cart.js';

export const getQueryParameter = (param) => {
  const params = new URLSearchParams(window.location.search);
  return params.get(param);
}

export const setCartQty = () => {
  const cart = fetchCart();
  const element = document.getElementById('cart-link');
  element.innerText = cart.length === 0 ? 'Cart' ;
}
import * as MetCache from './met-cache.js';
import { ImageObject } from './met.js';

const BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1';

export const search = 

export const fetchObjectData = async (id) => {
  const url = `${BASE_URL}/objects/${id}`;

  let image = MetCache.fetchImage(id);
  if(image)

  try {
    const data = await fetch(url).then((response)=>{
      console.log(`received response ${response.ok}`)
      if(response.ok) {
        return response.json();
      }
    }).catch();
    if(!data) 
    const img = new ImageObject(data.objectID, data.primaryImageSmall, data.artistDisplayName, data.title, data.objectDate);
    MetCache.storeImage(img);
    return img;
  }export const storeImage = (image) => {
  const key = image.id;
  console.log(`Storing image with id ${key} in local storage.`);
  localStorage[key] = JSON.stringify(image);
}

export const fetchImage = (id) => {
  if(id in localStorage)
}export class ImageObject {
  constructor(id, url, artist, title, year){
    this.id = id;
    this.url = url;
    this.artist = artist;
    this.title = title;
    this.year = year;
  }
}