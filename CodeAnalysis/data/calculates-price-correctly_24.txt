const API_BASE = 'https://collectionapi.metmuseum.org';

export async function loadObject(objId) {
    let obj = JSON.parse(localStorage.getItem(objId));
    if(obj) 

    obj = await fetch(`${API_BASE}/public/collection/v1/objects/${objId}`).then(res => res.json());
    if(!obj || !obj.objectID) 
    localStorage.setItem(objId, JSON.stringify(obj));
    return obj;
}

export import { loadObject } from "./artworkApi.js";
import { render, calculatePrice } from "./frame.js"

export function getItems() {
    return JSON.parse(localStorage.getItem('cart')) || [];
}

export 

export 

export function renderCart() {
    document.getElementById('cart-link').innerText = `Cart (${getItems().length})`;
}



export 


    import { initConfigurator } from './config.js';
    initConfigurator();
  
import { render, getPrintSizes, calculatePrice } from './frame.js';
import  * as cart  from './cart.js';
import { loadObject } from "./artworkApi.js";


let artwork = null;


function getConfig() {
    const formData = new FormData(document.getElementById('config-form'));
    return {
        objectID: formData.get('object-id'),
        printSize: formData.get('printSize'),
        frameStyle: formData.get('frameStyle'),
        frameWidth: formData.get('frameWidth') * 10,
        matColor: formData.get('matColor'),
        matWidth: formData.get('matWidth') * 10,
    }
}

export function initConfigurator() {
    const urlParams = new URLSearchParams(window.location.search);

    cart.renderCart();

    const form = document.getElementById('config-form');
    form['printSize'].value = urlParams.get('printSize') || 'M';    
    form['frameStyle'].value = urlParams.get('frameStyle') || 'natural';
    form['matColor'].value = urlParams.get('matColor') || 'Mint';

    const frameWidth = (urlParams.get('frameWidth')  : 40) / 10;
    form['frameWidth'].value = frameWidth;
    form['frameWidthR'].value = frameWidth;

    const matWidth = (urlParams.get('matWidth')  : 55) / 10;
    form['matWidth'].value = matWidth;
    form['matWidthR'].value = matWidth;
    
    const inputNames = ['printSize', 'frameStyle', 'matColor']
    for (let name of inputNames) {
        for (let input of document.getElementsByName(name)) {
            input.onchange = updateConfigurator;
        }
    }

    const checkAndSyncWithSlider = (sliderName, lower, upper) => {
        return (e) => {
            let val = Math.round(e.target.value * 10) / 10;
            if (val < lower) 
                
            else if (val > upper)
                
            e.target.value = val;

            const slider = document.getElementsByName(sliderName)[0]
            slider.value = val;
            updateConfigurator();
        }
    }

    document.getElementsByName('frameWidth')[0].onchange = checkAndSyncWithSlider('frameWidthR', 2, 5);
    document.getElementsByName('matWidth')[0].onchange = checkAndSyncWithSlider('matWidthR', 0, 10);

    document.getElementsByName('frameWidthR')[0].onchange = 

    document.getElementsByName('matWidthR')[0].onchange = 

    document.getElementById('config-form').onsubmit = ;

    initialRenderConfigurator(urlParams);
}

async function initialRenderConfigurator(urlParams) {
    try {
        artwork = await loadObject(urlParams.get('objectID'));
    } 

    document.getElementById("object-id").value = artwork.objectID;

    const artist = document.createElement("b");
    artist.classList.add("artist");
    artist.innerHTML = artwork.artistDisplayName;
    
    const title = document.createElement("i");
    title.classList.add("title");
    title.innerHTML = artwork.title;
    
    const comma = document.createTextNode(', ');
    
    const date = document.createElement("span");
    date.classList.add("date");
    date.innerHTML = artwork.objectDate;

    const label = document.getElementById('image-label');
    label.appendChild(artist);
    label.appendChild(title);
    label.appendChild(comma);
    label.appendChild(date);

    await updateConfigurator();

    const img = document.getElementById('preview-image');
    const printSizes = getPrintSizes(img);
    
    document.getElementById('print-size-s-label-val').innerHTML = `${printSizes.S[0]/10} &times; ${printSizes.S[1]/10}`;
    document.getElementById('print-size-m-label-val').innerHTML = `${printSizes.M[0]/10} &times; ${printSizes.M[1]/10}`;
    document.getElementById('print-size-l-label-val').innerHTML = `${printSizes.L[0]/10} &times; ${printSizes.L[1]/10}`;
}

export async function updateConfigurator() {
    return new Promise((res) => {
        const img = document.getElementById('preview-image');

        const updateImage = () => {
            const {printSize, frameStyle, frameWidth, matColor, matWidth} = getConfig();
            const container = document.getElementById('preview-container');
            render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth);

            const printSizes = getPrintSizes(img);
            const [w, h] = printSizes[printSize];
            const totalWidth = Math.round(w + (2*frameWidth) + (2*matWidth))  / 10;
            const totalHeight = Math.round(h + (2*frameWidth) + (2*matWidth)) / 10;
            document.getElementById('total-size').innerHTML = `${totalWidth} &times; ${totalHeight} cm`;

            const price = calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2);
            document.getElementById('price').innerHTML = `&euro; ${price}`;
            res();
        }
        
        if(img.src !== artwork.primaryImageSmall) {
            img.src = artwork.primaryImageSmall;
            img.onload = updateImage;
        } else {
            updateImage();
        }
    });
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const frameCost = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85,
    }

    const sizeFactor = {
        S: 1,
        M: 2,
        L: 3.5,
    }

    let price = 30.0 + frameWidth/10 * frameCost[frameStyle] + matWidth/10 * 0.05;
    price = price * sizeFactor[printSize];

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
