import { Artwork } from '/artwork.js';

export function retrieve(objID) {
    const key = objID;
    if(key in localStorage) 
}

export function store(objID, artwork) {
    const key = objID;
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(artwork);
}

import { Artwork } from "/artwork.js";

export class ArtworkDocumentContainer {

	

	


	
}export class Artwork {
	constructor(artist, title, objID, image, altText, date){
		this.artist = artist;
		this.title = title;
		this.objID = objID;
		this.image = image;
		this.altText = altText;
		this.date = date;

	}
}let cart = [];


export function retrieve() {
    if(!localStorage['cart']){
        return;
    }}


export 

    import * as Frame from '/frame.js';
    import { ConfiguredImage } from '/configuredImage.js';
    import * as CartCache from '/cart-cache.js';
    import * as ArtworkCache from '/artwork-cache.js';
    import * as SearchAPI from '/search-api.js';

    let defImg;
    let configuredImage;

    async function cacheArtwork(objectID){   
      const cachedImage = ArtworkCache.retrieve(objectID);
      if(!cachedImage){
        let artwork = await SearchAPI.retrieveArt(objectID);
        console.log(artwork);
        ArtworkCache.store(objectID, artwork);
      } 
    }




    document.addEventListener('DOMContentLoaded', event => {


      const urlParams = new URLSearchParams(window.location.search);
      const param = urlParams.get('objectID');
      if(!param)

      cacheArtwork(param);
      const cache = CartCache.retrieve();
      const cart = document.getElementById('cart-link');
      if(cache)


      getPictureAndLabel(param);

      const printSize = urlParams.get('printSize');
      const frameStyle = urlParams.get('frameStyle');
      const frameWidth = urlParams.get('frameWidth');
      const matColor = urlParams.get('matColor');
      const matWidth = urlParams.get('matWidth');

      async function getPictureAndLabel(objectID) {
        try {

          const URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
          const objResponse = await fetch(URL);
          const objRawData = await objResponse.json();
          if(!objRawData.primaryImageSmall)

          const prevContainer = document.getElementById('preview-container')
          const previewPicture = document.createElement('img');
          previewPicture.src = objRawData.primaryImageSmall;
          previewPicture.id = "preview-image";
          prevContainer.appendChild(previewPicture);

          const previewLabel = document.createElement('div');
          previewLabel.id = "image-label";
          previewLabel.classList.add("museum-label");
          prevContainer.appendChild(previewLabel);

          const artist = document.createElement('span');
          artist.classList.add("artist");
          artist.innerHTML = objRawData.artistDisplayName;
          previewLabel.appendChild(artist);
          const title = document.createElement('span');
          title.classList.add("title");
          title.innerHTML = objRawData.title;
          previewLabel.appendChild(title);
          const date = document.createElement('span');
          date.classList.add("date");
          date.innerHTML = objRawData.objectDate;
          previewLabel.appendChild(date);

           defImg = {
            image: previewPicture,
            container : prevContainer,
            printSize : printSize,
            frameStyle : frameStyle,
            frameWidth : frameWidth,
            matColor : matColor,
            matWidth : matWidth
          }
          update();
        } 

      }
        document.getElementById("print-size-" + printSize.toLowerCase()).setAttribute("checked","");
        document.getElementById("frameField").setAttribute("value", checkUrlValue(frameWidth.toString(),2,5));
        document.getElementById("matField").setAttribute("value",checkUrlValue(matWidth.toString(),0,10));
        document.getElementById("frameSlider").value = checkUrlValue(frameWidth.toString(),2,5);
        document.getElementById("matSlider").value = checkUrlValue(matWidth.toString(),0,10);
        document.getElementById("frame-style-" + frameStyle.toLowerCase()).setAttribute("checked","");
        document.getElementById("mat-color-" + matColor.toLowerCase()).setAttribute("checked","");



    });
    function checkUrlValue(value,min,max) {
      let x;
        if (value.length === 1)else{
        x = value.substring(0,1) + '.'  +value.substring(1,value.size);
        }
        console.log(x)
        return validate(x,min,max);
    }
    function update(){
      let size = document.querySelector("div.segmented").getElementsByTagName("label");
      let small = Frame.getPrintSizes(defImg.image).S;
      let medium = Frame.getPrintSizes(defImg.image).M;
      let large = Frame.getPrintSizes(defImg.image).L;
      size.item(0).childNodes.item(2).data = small[0] + " x " + small[1] + " cm";
      size.item(1).childNodes.item(2).data = medium[0] + " x " + medium[1] + " cm";
      size.item(2).childNodes.item(2).data = large[0] + " x " + large[1] + " cm";


      document.getElementById("price").innerHTML = "â‚¬ " +  Frame.calculatePrice2(defImg.printSize,defImg.frameStyle,defImg.frameWidth,defImg.matWidth).toFixed(2);

      Frame.render(defImg.image,defImg.container,defImg.printSize,defImg.frameStyle,defImg.frameWidth,defImg.matColor,defImg.matWidth);


    }
    document.getElementById("print-size-s").addEventListener('click',);
    document.getElementById("print-size-m").addEventListener('click',);
    document.getElementById("print-size-l").addEventListener('click',);




    document.getElementById("frame-style-classic").addEventListener('click',);
    document.getElementById("frame-style-natural").addEventListener('click',);
    document.getElementById("frame-style-shabby").addEventListener('click',);
    document.getElementById("frame-style-elegant").addEventListener('click',);



    document.getElementById("mat-color-ivory").addEventListener('click',);
    document.getElementById("mat-color-mint").addEventListener('click',);
    document.getElementById("mat-color-wine").addEventListener('click',);
    document.getElementById("mat-color-indigo").addEventListener('click',);
    document.getElementById("mat-color-coal").addEventListener('click',);


    document.getElementById("frameField").addEventListener("change", );

    document.getElementById("frameSlider").addEventListener("input", );

      document.getElementById("matField").addEventListener("change", );
    document.getElementById("matSlider").addEventListener("input", );

    function validate(inputData, min, max) {
        inputData = parseFloat(inputData).toFixed(1);
        let result = inputData;
        let check = inputData - Math.round(inputData);
        if (check === 0 ){
          result = Math.round(inputData);
        }
      if (inputData > max 
      if (inputData < min 


        return result;
    }



  export class ConfiguredImage {
	

	



	
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}



export 



export function calculatePrice2(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    let basePrice = 30;
    let pricePerCentimeter = 0.0;
    switch (frameStyle) {

        

        

        case "shabby":
            pricePerCentimeter = frameWidth * 0.9;
            console.log("shabby " + pricePerCentimeter);
            break;

        

        
    }
    let pricePerMat = matWidth * 0.05;

    if (printSize === 'S')else if(printSize === 'M'){
        price = 2*(basePrice+pricePerCentimeter+pricePerMat);
    }


    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { Artwork } from '/artwork.js';
import * as ArtworkCache from '/artwork-cache.js';
import { ArtworkDocumentContainer } from '/artwork-dom.js';

export ;

export async function retrieveArt(objectID){
	const objURL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
	const objResponse = await fetch(objURL);
	const objRawData = await objResponse.json();
	let artwork = new Artwork(objRawData.artistDisplayName, objRawData.title, objRawData.objectID, 
				objRawData.primaryImageSmall, objRawData.objectName, objRawData.objectDate);
	return artwork;
}


export 