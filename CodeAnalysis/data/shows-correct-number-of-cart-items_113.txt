import * as API from './met-api.js';
import {setCartQty} from './helpers.js';
import * as DOM from "./dom-helpers.js";
import {calculatePrice, render} from "./frame.js";

export const fetchCart = () => {
    if ('cart' in localStorage) {
        return JSON.parse(localStorage['cart'])
    }
}

document.addEventListener('DOMContentLoaded', event => {
    shoppingCart = fetchCart();
    /* construct html */
    cartItems(shoppingCart);
})

/* get array of items in cart */
const printSizes = {"S": "Small", "M": "Medium", "L": "Large"};
var priceList = [];
let shoppingCart = fetchCart();

/* add html dynamically */
const cartItems = async (cart) => {
    /* set number of cart items in header */
    setCartQty();
    shoppingCart = fetchCart();
    const cartSection = document.getElementById("cart");
    if (cartSection) {
        cartSection.innerHTML = '';
        /* reset list of prices */
        priceList = [];

        for (const idx in cart) 
        cartSection.appendChild(cartTotal());
    }
};

const renderEntry = ;


const frameDescr = ;

const museumLabel = ;

const cartPreview = ;

const cartTotal = () => {

    let price, checkout;
    if (!shoppingCart || shoppingCart.length === 0) {
        price = DOM.textElement("div", "There are no items in your shopping cart.");
        checkout = DOM.setAttributes(DOM.textElement("button", "Checkout"), {
            type: "button",
            id: "checkout-button",
            disabled: true
        });
    }

    return DOM.setAttributes(DOM.container([price, checkout], "div"), {class: ["cart-total"]});
};

import * as API from './met-api.js';
import {getQueryParameter, setCartQty} from './helpers.js';
import {render, getPrintSizes, calculatePrice} from "./frame.js";
import * as DOM from "./dom-helpers.js";

/* for shopping cart */
var cartItem = {
    objectID: null,
    printSize: null,
    frameStyle: null,
    frameWidth: null,
    matWidth: null,
    matColor: null
}

/* sets config params in cartItem */
function setFrameConfigParams(printSize, frameStyle, frameWidth, matColor, matWidth) {
    cartItem.printSize = printSize;
    cartItem.frameStyle = frameStyle;
    cartItem.matColor = matColor;
    /* convert from cm to mm */
    cartItem.frameWidth = 10 * frameWidth;
    cartItem.matWidth = 10 * matWidth;
}

const updateConfiguration = () => {
    let img = document.getElementById('preview-image');
    let container = document.getElementById('preview-container');
    const form = document.getElementById('config-form');
    const printSize = form.elements['printSize'].value;
    const frameStyle = form.elements['frameStyle'].value;
    const frameWidth = form.elements['frameWidth'].value;
    const matWidth = form.elements['matWidth'].value;
    const matColor = form.elements['matColor'].value;
    render(img, container,
        printSize,
        frameStyle,
        frameWidth*10,
        matColor,
        matWidth*10);
    /* save config in cartItem */
    setFrameConfigParams(printSize, frameStyle, frameWidth, matColor, matWidth);
    document.getElementById('price').innerText =
        `€ ${calculatePrice(form.elements['printSize'].value,
            form.elements['frameStyle'].value,
            form.elements['frameWidth'].value*10,
            form.elements['matWidth'].value*10).toFixed(2)}`;
    const additional = Number(frameWidth) + Number(matWidth);
    const sizes = getPrintSizes(img)[printSize];
    document.getElementById('total-size').innerText =
        `${additional + sizes[0]} × ${additional + sizes[1]}`;
}

const textFieldSliderConfiguration = (sliderID, textFieldID, minValue, maxValue) => {
    const slider = document.getElementById(sliderID);
    const textField = document.getElementById(textFieldID);
    slider.addEventListener("input", );
    textField.addEventListener("click", );
    textField.addEventListener("focusout", );
    textField.addEventListener("change", );
    if (slider.value < minValue)  else if (slider.value > maxValue) 
    if (textField.value < minValue)  else if (textField.value > maxValue) 
}

const fetchData = async () => {
    const objectID = getQueryParameter('objectID');
    if (objectID) {
        console.log('checking for', objectID);
        const imageData = await API.fetchObjectData(objectID);
        console.log(`received ${imageData}`)
        if (!imageData)  else {
            cartItem.objectID = objectID;
            return imageData;
        }
    }}

const presetConfiguration = async () => {
    const form = document.getElementById('config-form');

    let printSize = getQueryParameter('printSize');
    if (printSize) 
    let frameStyle = getQueryParameter('frameStyle');
    if (frameStyle) 
    let frameWidth = getQueryParameter('frameWidth');
    console.log(frameWidth);
    if (frameWidth) 
    let matColor = getQueryParameter('matColor');
    if (matColor) 
    let matWidth = getQueryParameter('matWidth');
    if (matWidth) 

    let img = document.getElementById('preview-image');
    img.onload = () => {
        console.log('Loaded Image');
        const printSizes = getPrintSizes(img);
        document.getElementById('print-size-s-label').innerHTML = `Small<br>${printSizes.S[0]} × ${printSizes.S[1]}`;
        document.getElementById('print-size-m-label').innerHTML = `Medium<br>${printSizes.M[0]} × ${printSizes.M[1]}`;
        document.getElementById('print-size-l-label').innerHTML = `Large<br>${printSizes.L[0]} × ${printSizes.L[1]}`;
        updateConfiguration();
    };

    const imageData = await fetchData();
    if (imageData) {
        const artist = DOM.setAttributes(DOM.textElement('span', imageData.artist), {class: ['artist']});
        const title = DOM.setAttributes(DOM.textElement('span', `${imageData.title}, `), {class: ['title']});
        const date = DOM.setAttributes(DOM.textElement('span', imageData.year), {class: ['date']});
        const imageLabel = document.getElementById('image-label');
        imageLabel.appendChild(artist);
        imageLabel.appendChild(title);
        imageLabel.appendChild(date);

        img.src = imageData.url;
    }
}


document.addEventListener('DOMContentLoaded', event => {
    textFieldSliderConfiguration('frameSlider', 'frameTextField', 2, 5);
    textFieldSliderConfiguration('matSlider', 'matTextField', 0, 10);
    setCartQty();
    presetConfiguration();
    const inputs = document.querySelectorAll("input[type='radio']");
    for (let i = 0; i < inputs.length; i++) {
        inputs[i].addEventListener('change', updateConfiguration)
    }
});



const form = document.getElementById("config-form")
form.addEventListener('submit', );


export 

export function setAttributes(element, attributes) {
  for(let key in attributes) {
      if(key === 'class'){
        setClasses(element, attributes[key]);
        continue;
      }
      

      if(typeof(attributes[key]) === 'object')  else {
          element[key] = attributes[key];
      }
  }
  return element;
}

export 

export function textElement(tag, text) {
  const element = document.createElement(tag);
  element.innerText = text;
  return element;
}

export function container(elements, tag='div') {
  const container = document.createElement(tag);
  for(let element of elements) {
      container.appendChild(element);
  }
  return container;
}

export 

export function setClasses(element, classes){
  return element.className = classes.join(',');
}export 

export 

export 
import { fetchCart } from './cart.js';

export const getQueryParameter = 

export const setCartQty = () => {
  const cart = fetchCart();
  const element = document.getElementById('cart-link');
  element.innerText = cart.length === 0 ? 'Cart' ;
}
import * as MetCache from './met-cache.js';
import { ImageObject } from './met.js';

const BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1';

export const search = 

export const fetchObjectData = export const storeImage = 

export const fetchImage = export class ImageObject {
  
}import * as API from './met-api.js';
import { getQueryParameter, setCartQty } from './helpers.js';
import * as DOM from './dom-helpers.js';

const setHeadline = 

const searchCollection = async (term) => {
  const CHUNKSIZE = 10;

  let ids = [];

  const container = document.getElementById('gallery');
  container.innerHTML = '';

  if(term) else {
    const repsonse = await fetch('./highlights.json')
    const data = await repsonse.json();
    ids = ids.concat(data.highlights);
  }

  const jobs = ids.map(id => API.fetchObjectData(id));

  const chunks = jobs.reduce((chunks, job, i) => {
    const chunkIndex = Math.floor(i/CHUNKSIZE);
    if(!chunks[chunkIndex]){
      chunks[chunkIndex] = [];
    }

    chunks[chunkIndex].push(job);
    return chunks;
  }, []);
  
  for (const chunk of chunks) {
    console.log(chunk);
    
    const objects = await Promise.all(chunk); 
    for (const object of objects) {
      container.appendChild(renderEntry(object));
    }
  }
}

const renderEntry = (object) => {
  const artist = DOM.setAttributes(DOM.textElement('span', object.artist),{class: ['artist']});
  const title = DOM.setAttributes(DOM.textElement('span', `${object.title}, `),{class: ['title']});
  const date = DOM.setAttributes(DOM.textElement('span', object.year),{class: ['date']});
  const label = DOM.setAttributes(DOM.container([artist, title, date]),{class: ['museum-label']});
  const img = DOM.setAttributes(DOM.img(object.url,object.title),{id: `object-image-${object.id}`})
  const link = DOM.setAttributes(DOM.container([img, label],'a'),{href: `config.html?objectID=${object.id}`, id: `object-${object.id}`})

  return DOM.setAttributes(DOM.setAttributes(DOM.container([link]), {class: ['thumb']}));
}

document.addEventListener('DOMContentLoaded', event => {
  setCartQty();
  const term = getQueryParameter('q');
  if(term)
  searchCollection(term);
});

const form = document.querySelector('.search-form');
form.addEventListener('submit', );