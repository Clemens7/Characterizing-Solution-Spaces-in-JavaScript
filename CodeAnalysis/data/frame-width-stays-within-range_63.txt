
const GET_OBJECT_API_URL = "https://collectionapi.metmuseum.org/public/collection/v1/objects/{ID}";
const CACHE_KEY = "cache";

let cache = {};

export function initCache(){
    if(!localStorage.getItem(CACHE_KEY)){
        localStorage.setItem(CACHE_KEY, "{}");
    }
    cache = JSON.parse(localStorage.getItem(CACHE_KEY));
}


export async function getItem(id){
    let item = getItemFromLocalStorage(id);
    if(item)
    else{
        item = await getItemFromApi(id);
        if(item.message)
        saveItemToLocalStorage(item);
        return item;
        
    }}

export async function getItemFromApi(id){
    console.log("GOT ITEM FROM API");
    const response = await fetch(GET_OBJECT_API_URL.replace('{ID}', id));
    const rawData = await response.json();
    return rawData;
}

export function getItemFromLocalStorage(id){
    return cache[id];
}

export function saveItemToLocalStorage(item){
    cache[item.objectID] = item;
    localStorage.setItem(CACHE_KEY, JSON.stringify(cache));
}
    import * as Frame from './frame.js';
    import {Config, load, save} from './config.js';

    let object;
    let config;
    const preview = {
      img : document.getElementById('preview-image'),
      container : document.getElementById('preview-container')
    };
    const form = {
      printSizes : document.getElementsByName('printSize'),
      frameStyles : document.getElementsByName('frameStyle'),
      matColors : document.getElementsByName('matColor'),

      frameWidth : document.getElementsByName('frameWidth').item(0),
      frameWidthR : document.getElementsByName('frameWidthR').item(0),

      matWidth : document.getElementsByName('matWidth').item(0),
      matWidthR : document.getElementsByName('matWidthR').item(0),

      button : document.getElementsByTagName('button')[0]
    };

    async function loadObject(objectID) {
      object = await load(objectID);
      if (!object) 
    }

    function showPreview() {
      const artist = document.getElementById("artist");
      artist.innerText = object.artistDisplayName;
      const title = document.getElementById("title");
      title.innerText = object.title;
      const date = document.getElementById("date");
      date.innerText = object.objectDate;


      preview.img.src = object.primaryImageSmall;
      preview.img.onload = event => {
        const size = Frame.getPrintSizes(preview.img);
        document.getElementById('print-size-s-label').innerHTML = `Small<br>${size['S'][0]} × ${size['S'][1]} cm`;
        document.getElementById('print-size-m-label').innerHTML = `Medium<br>${size['M'][0]} × ${size['M'][1]} cm`;
        document.getElementById('print-size-l-label').innerHTML = `Large<br>${size['L'][0]} × ${size['L'][1]} cm`;

        updateFrame();
      };
    }

    function updateFrame() {
      Frame.render(preview.img, preview.container, config.printSize, config.frameStyle, config.frameWidth, config.matColor, config.matWidth);
      const price = Frame.calculatePrice(config.printSize, config.frameStyle, config.frameWidth, config.matWidth);
      document.getElementById('price').innerText = `€ ${price.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}`;
    }

    function initForm() {
      for (const size of form.printSizes) {
        size.addEventListener('change', );
        size.checked = size.value === config.printSize;
      }

      for (const frame of form.frameStyles) {
        frame.addEventListener('change', );
        frame.checked = frame.value === config.frameStyle;
      }

      for (const color of form.matColors) {
        color.addEventListener('change', );
        color.checked = color.value === config.matColor;
      }

      form.frameWidth.addEventListener('change', event => {
        config.frameWidth = form.frameWidth.value * 10;
        form.frameWidth.value = config.frameWidth / 10;
        form.frameWidthR.value = config.frameWidth / 10;
        updateFrame();
      });
      form.frameWidthR.addEventListener('change', );
      form.frameWidth.value = config.frameWidth / 10;
      form.frameWidthR.value = config.frameWidth / 10;

      form.matWidth.addEventListener('change', );
      form.matWidthR.addEventListener('change', );
      form.matWidth.value = config.matWidth / 10;
      form.matWidthR.value = config.matWidth / 10;

      form.button.addEventListener('click', );
    }




    const params = (new URL(document.location)).searchParams;
    config = new Config(params.get('objectID'), params.get('printSize'), params.get('frameStyle'), params.get('frameWidth'), params.get('matColor'), params.get('matWidth'));

    initForm();

    document.addEventListener('DOMContentLoaded', async (event) => {
      let cart=JSON.parse(localStorage.getItem('cart'));
      if(cart) 
      await loadObject(config.objectID);
      showPreview();
    });

  
import * as API from './api-abstraction.js';
API.initCache();


export async function load(objectID) {
    console.log(`fetch object...`);

    if (!objectID) 

    try {
        return await API.getItem(objectID); //config now ueses the cache :)
    }}

export 

export class Config {
    constructor(id, printSize, frameStyle, frameWidth, matColor, matWidth) {
        this.objectID = id;
        this.printSize = printSize;
        this.frameStyle = frameStyle;
        this.frameWidth = frameWidth;
        this.matColor = matColor;
        this.matWidth = matWidth;
    }

    get printSize() {
        return this._printSize;
    }

    get frameStyle() {
        return this._frameStyle;
    }

    get frameWidth() {
        return this._frameWidth;
    }

    get matColor() {
        return this._matColor;
    }

    get matWidth() {
        return this._matWidth;
    }


    set printSize(value) {
        this._printSize = parseString(value, /^[SML]$/) || 'M';
    }

    set frameStyle(value) {
        this._frameStyle = parseString(value, /^(classic|natural|shabby|elegant)$/) || 'natural';
    }

    set frameWidth(value) {
        const num = parseNumber(value, 20, 50);
        this._frameWidth = isNaN(num)  : num;
    }

    set matColor(value) {
        this._matColor = parseString(value, /^(ivory|mint|wine|indigo|coal)$/) || 'mint';
    }

    set matWidth(value) {
        const num = parseNumber(value, 0, 100);
        this._matWidth = isNaN(num)  : num;
    }
}

function parseString(value, regex) {
    if (!regex.test(value)) {
        return null;
    }}

function parseNumber(value, min, max) {
    let num = Number(value);
    if (isNaN(num)) 
    if (num < min) return min;
    if (num > max) return max;
    return Math.round(num + Number.EPSILON);
}




export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    price += 30 + .05 * matWidth / 10;

    switch (frameStyle) {
        
        case 'natural':
            price += .8 * frameWidth / 10;

            break;
        
        
    }

    if (printSize === 'M') price *= 2;
    if (printSize === 'L') 


    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
