import { Artwork } from './artwork.js';
import { retrieveArtwork, storeArtwork } from './cache.js';

const baseUrl = 'https://collectionapi.metmuseum.org/public/collection/v1';
const searchEndpoint = baseUrl + '/search';
const objectsEndpoint = baseUrl + '/objects';

export 

export async function resolveArtwork(objectID) {
    const cachedArtwork = retrieveArtwork(objectID);
    if(cachedArtwork !== null)

    const url = `${objectsEndpoint}/${objectID}`;
    const response = await fetch(url);
    const data = await response.json();
    const artwork = new Artwork (data.objectID, data.title, data.artistDisplayName, data.primaryImageSmall, data.objectDate);
    storeArtwork(artwork);
    return artwork;
}

export export class Artwork {


    constructor(objectID, title, artist, image, date) {
        this.objectID = objectID;
        this.title = title;
        this.artist = artist;
        this.image = image;
        this.date = date;
    }

}import {Artwork} from "./artwork.js";
import {Cart} from "./cart.js";

function getArtworkStorageKey(objectID) {
    return 'a_' + objectID;
}

export function retrieveArtwork(objectID) {
    const key = getArtworkStorageKey(objectID);
    if (key in localStorage) 
    return null;
}

export function storeArtwork(artwork) {
    const key = getArtworkStorageKey(artwork.objectID);
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(artwork);
}

function getCartStorageKey() {
    return "cart";
}

export function retrieveCart() {
    let key = getCartStorageKey();
    if (key in localStorage)  else {
        return new Cart([]);
    }
}

export 

export class CartItem {

    

}import * as Cache from './cache.js';
import {calculatePrice} from './frame.js';

export class Cart {

    constructor(items) {
        this.items = items;
    }

    isEmpty() {
        return this.getItemCount() === 0;
    }

    getItemCount(){
        if(this.items === undefined)
            
        return this.items.length;
    }

    

    
}import * as Frame from "./frame.js";
import * as Util from "./util.js";
import * as Cache from "./cache.js";
import { Artwork } from "./artwork.js";
import { CartItem } from "./cart-item.js";
import { resolveArtwork } from "./api.js";

function roundAndBoundValue(val, range) {
    return Math.round(Math.max(range[0], Math.min(val, range[1])) * 10) / 10;
}

function setValues(self, other, range, e) {
    const v = roundAndBoundValue(parseFloat(e.target.value), range);
    self.value = v;
    other.value = v;
    renderPreview(imgObj);
}

function link(idSlider, idTextInput, range) {
    const slider = document.getElementById(idSlider);
    const textInput = document.getElementById(idTextInput);
    slider.addEventListener('input', )
    textInput.addEventListener('change', (e) => setValues(textInput, slider, range, e))
}





async function getArtworkData(objectId) {
    const artwork = await resolveArtwork(objectId);
    handleArtworkData(artwork);
}

function getConfigurationData() {
    const data = {};
    data.printSize = document.querySelector('input[name="printSize"]:checked').value;
    data.frameStyle = document.querySelector('input[name="frameStyle"]:checked').value;
    data.frameWidth = parseFloat(document.getElementById('frame-width-text').value) * 10;
    data.matColor = document.querySelector('input[name="matColor"]:checked').value;
    data.matWidth = parseFloat(document.getElementById('mat-width-text').value) * 10;
    console.log(data)
    return data;
}
function showSizes(sizes, data) {
    for (let v of [['s', 'S', 'Small'], ['m', 'M', 'Medium'], ['l', 'L', 'Large']]) {
        const vHtml = document.getElementById(`print-size-${v[0]}-label`);
        vHtml.innerHTML = `${v[2]}<br>${sizes[v[1]][0]/10} × ${sizes[v[1]][1]/10} cm`;
    }
    const totalHtml = document.getElementById('total-size');
    const total = [sizes[data.printSize][0] + 2*data.matWidth + 2*data.frameWidth, sizes[data.printSize][1] + 2*data.matWidth + 2*data.frameWidth];
    totalHtml.innerHTML = `${total[0] / 10} × ${total[1] / 10}`
}
function renderPreview(img) {
    const imgContainer = document.getElementById('preview-container');
    const htmlImg = document.getElementById('preview-image');
    console.log(htmlImg);
    const configurationData = getConfigurationData();
    Frame.render(img, htmlImg, imgContainer, configurationData.printSize,
        configurationData.frameStyle, configurationData.frameWidth,
        configurationData.matColor, configurationData.matWidth)
    document.getElementById('price').innerHTML = "€ " + Frame.calculatePrice(configurationData.printSize, configurationData.frameStyle, configurationData.frameWidth, configurationData.matWidth).toFixed(2);
    const sizes = Frame.getPrintSizes(img);
    showSizes(sizes, configurationData)
}

function setLabel(data) {
    const label = document.getElementById('image-label');
    label.innerHTML = `${data.artist} ${data.title} ${data.date}`
}

function handleArtworkData(data) {
    console.log(data)
    if (data.image) {
        const img = new Image();
        img.onload = () => {
            document.getElementById('preview-image').src = img.src;
            imgObj = img;
            renderPreview(imgObj);
        }
        img.src = data.image
        setLabel(data);
    }
}



function presetValues(urlParams) {
    if (urlParams.get('printSize')) 
    if (urlParams.get('frameStyle')) 
    if (urlParams.get('frameWidth')) 
    if (urlParams.get('matColor')) 
    if (urlParams.get('matWidth')) 
}



function addRerenderOnChange() {
    const radios = document.querySelectorAll('input[type="radio"]')
    for (let radio of radios) {
        radio.addEventListener('click', () => renderPreview(imgObj))
    }
}

const urlParams = new URLSearchParams(window.location.search);
const objectId = urlParams.get('objectID');
let imgObj;
presetValues(urlParams)
if (!objectId)  else {
    getArtworkData(objectId)
}
addRerenderOnChange()
link("frame-width-slider", "frame-width-text", [2, 5])
link("mat-width-slider", "mat-width-text", [0, 10])
document.querySelector('#config-form').addEventListener('submit', )
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, htmlImg, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    htmlImg.style.boxSizing = 'border-box';
    htmlImg.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    htmlImg.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    htmlImg.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    htmlImg.style.borderImageSlice = frameImageSlices[frameStyle];
    htmlImg.style.borderWidth = `${frameWidth * x}px`;
    htmlImg.style.backgroundColor = matColors[matColor];
    htmlImg.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    switch (frameStyle) {
        case 'classic':
            price += frameWidth * 0.1;
            break;
        case 'natural':
            price += frameWidth * 0.08;
            break;
        case 'shabby':
            price += frameWidth * 0.09;
            break;
        case 'elegant':
            price += frameWidth * 0.085;
            break;
    }
    price += matWidth * 0.005;
    switch (printSize) {
        case 'S':
            break;
        case 'M':
            price *= 2;
            break;
        case 'L':
            price *= 3.5;
            break;
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}import { retrieveCart } from './cache.js';

document.addEventListener("DOMContentLoaded",() => {
    const cart = retrieveCart();
    if(!cart.isEmpty())
});export 

export 