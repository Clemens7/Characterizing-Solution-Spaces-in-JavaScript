

  import {getObject, cache} from './met-api.js'
  import {render} from "./frame.js";
  import {calculatePrice} from "./frame.js";

  let cart = JSON.parse(localStorage.getItem('cart')) ;

  if (!cart.length) else {
    showAll()
    document.getElementById('cart-link').innerHTML = `Cart (${cart.length})`
  }

  async function showAll() {
    cart.forEach(async (item, index) => {

      const itemAPI = await getObject(item.objectID, cache)

      if (!cache.getById(item.objectID)) {
        cache.add([itemAPI])
      }

      document.querySelector('.cart-total').insertAdjacentHTML('beforebegin', `
        <div class="cart-item" id="cart-item-${index}">
          <div class="cart-preview">
            <div class="thumb">
              <a href="/config.html?${new URLSearchParams(item)}" id="object-${item.objectID}">
              </a>
            </div>
          </div>
          <div class="museum-label">
            <div>
              <span class="artist">${itemAPI.artistDisplayName}</span>
              <span class="title">${itemAPI.title},</span>
              <span class="date">${itemAPI.objectDate}</span>
              <br><br>
              <span class="frame-description">${getDescription(item)}</span>
            </div>
          <div class="cart-price">€ <span>${getItemPrice(item)}</span></div>
          <button class="cart-remove" data-index="${index}"></button>
          </div>
        </div>
      `)

      const img = document.createElement('img')
      img.className = 'cart-thumb'
      img.alt = itemAPI.title
      img.id = `object-image-${item.objectID}`
      img.onload = () => render(
        img,
        document.getElementById(`object-${item.objectID}`),
        item.printSize,
        item.frameStyle,
        item.frameWidth,
        item.matColor,
        item.matWidth
      )
      img.src = itemAPI.primaryImageSmall

      document.querySelector(`#cart-item-${index} a`).appendChild(img)

      document.querySelector(`#cart-item-${index} .cart-remove`)
        .addEventListener('click', )
    })
  }

  function getDescription(item) {
    let size = '';
    switch (item.printSize) {
      case 'S':
        size = 'Small'
        break;
      
      case 'L':
        size = 'Large'
        break;
    }

    let frameWidth = item.frameWidth
    let frameStyle = item.frameStyle
    let matWidth = item.matWidth

    return (matWidth === 0)
      ? `${size} print in a ${frameWidth / 10} cm ${frameStyle} frame.`
      : `${size} print in a ${frameWidth / 10} cm ${frameStyle} frame with a ${matWidth / 10} cm ${item.matColor} mat.`
  }

  const getItemPrice = (item) => calculatePrice(
    item.printSize,
    item.frameStyle,
    item.frameWidth,
    item.matWidth
  )

  let total = cart.reduce((total, item) =>   total + getItemPrice(item), 0)
  document.getElementById("price-total").innerHTML = total.toFixed(2)

  document.getElementById('checkout-button')
    .addEventListener('click', )

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.00;

    frameWidth = (frameWidth / 10);
    matWidth = (matWidth / 10);

    if(frameStyle === 'classic'){
        price += +frameWidth;
    } else if(frameStyle === 'natural') else if(frameStyle === 'shabby'){
        price += frameWidth * 0.90;
    }

    if (matWidth !== null){
        price += matWidth * 0.05;
    }

    if (printSize === 'M') else if(printSize === 'L'){
        price = price * 3.5;
    }

    return Math.round(price * 100) / 100
}
export const MET_API = 'https://collectionapi.metmuseum.org/public/collection/v1/'

export const fetchObject = async id => {
  console.log(`Fetch object with id ${id} from API`)
  const request = await fetch(`${MET_API}objects/${id}`)
  const response = await request.json()

  if (response.message)  else {
    return response
  }}

export const getObject = async (id, cache) => {
  return cache.getById(id) || await fetchObject(id)
}

export const getSearchResults = 

class Cache {
  constructor() {
    this.objects = JSON.parse(localStorage.getItem('cache') || '[]')
  }

  getById(id) {
    return this.objects.find(object => object.objectID == id)
  }

  add(items) {
    this.objects = Array.from(new Set([...this.objects, ...items]))
    localStorage.setItem('cache', JSON.stringify(this.objects))
  }
}

export const cache = new Cache()
