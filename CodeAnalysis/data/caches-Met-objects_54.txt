
      import * as Frame from './frame.js';
      import * as Common from './common.js';

      function cloneAndSetup(element, artwork, nextId) {
        let imgUrl = artwork.primaryImageSmall;
        if (!imgUrl)  else {
          let artist = artwork.artistDisplayName;
          let title = artwork.title;
          let date = artwork.objectDate;

          let original = document.getElementById("cart-item-template");
          let clone = original.cloneNode(true);
          let strId = `cart-item-${nextId}`;
          clone.id = strId;
          clone.setAttribute('dataid', element.objectID);
          clone.style.display = "flex";

          let button = document.getElementsByClassName("cart-total")[0];
          document.getElementById("cart").insertBefore(clone, button);
          clone = document.getElementById(strId);
          let buttonClick = clone.childNodes[3].childNodes[5];
          buttonClick.id = nextId;

          let container = clone.querySelector("div.cart-preview");
          container.id = `preview-container-${nextId}`;
          let link = container.querySelector("a");
          link.href = buildLink(element);
          let img = link.querySelector("img.cart-thumb");
          img.src = imgUrl;
          img.id = `preview-${nextId}`;
          Frame.render(img, container, element.printSize, element.frameStyle, element.frameWidth, element.matColor, element.matWidth);


          let label = clone.querySelector("div.museum-label");
          label.querySelector("div span.artist").innerHTML = artist;
          label.querySelector("div span.title").innerHTML = title;
          label.querySelector("div span.date").innerHTML = date;
          label.querySelector("div span.frame-description").innerHTML = buildDescription(element.printSize, element.frameWidth, element.frameStyle, element.matWidth, element.matColor);


          let elemPrice = label.querySelector("div.cart-price span");
          elemPrice.innerHTML = Frame.calculatePrice(element.printSize, element.frameStyle, element.frameWidth, element.matWidth);
          elemPrice.id = `price-${nextId}`;
        }
      }

      function initCart() {
        let cartItems = localStorage.getItem("cart");
        cartItems = JSON.parse(cartItems);
        if (cartItems === null)  else {
          calculateTotalPrice(cartItems);
          document.getElementById("cart-item-template").style.display = "none"; // hide template
          let counter = 0;
          cartItems.forEach(element => {
            let cachedArtWork = localStorage.getItem("met" + element.objectID);
            let nextId = counter++;
            if (cachedArtWork !== null) {
              let parts = cachedArtWork.split(";");
              let artwork = {};
              artwork.artistDisplayName = parts[0];
              artwork.title = parts[1];
              artwork.objectDate = parts[2];
              artwork.primaryImageSmall = parts[3];
              cloneAndSetup(element, artwork, nextId);
            }
          });
        }
      }
      function calculateTotalPrice(itemList) {
        let totalPrice = 0;
        for (const item of itemList) {
          totalPrice = totalPrice + Frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        }
        document.getElementById("price-total").innerHTML = totalPrice;
      }
      function buildDescription(size, frameWidth, frameStyle, matWidth, matColor) {
        let desc;
        switch (size) {
          case "S":
            desc = "Small";
            break;
          case "M":
            desc = "Medium";
            break;
          case "L":
            desc = "Large";
            break;
        }
        desc += " print in a " + (frameWidth / 10) + " cm " + frameStyle + " frame"
        if (matWidth > 0) {
          desc += " with a " + (matWidth / 10) + " cm " + matColor + " mat"
        }
        desc += ".";
        return desc;
      }
      function buildLink(element) {
        let link = `/config.html?objectID=${element.objectID}`;
        if (element.printSize) {
          link += `&printSize=${element.printSize}`
        }
        if (element.frameStyle) {
          link += `&frameStyle=${element.frameStyle}`
        }
        if (element.frameWidth) {
          link += `&frameWidth=${element.frameWidth}`
        }
        if (element.matColor) {
          link += `&matColor=${element.matColor}`
        }
        if (element.matWidth) {
          link += `&matWidth=${element.matWidth}`
        }
        return link;
      }


      initCart();
      Common.setCartItemNumber();
      window.removeItem = removeItem;

      
    export function setCartItemNumber() {
  let numberOfItems = 0;
  const storedCart = localStorage.getItem("cart");
  if (storedCart !== null) {
    numberOfItems = JSON.parse(storedCart).length;
  }

  const cartTag = document.getElementById("cart-link");
  cartTag.innerHTML = `Cart (${numberOfItems})`;
}
    import * as Frame from './frame.js';
    import * as Common from './common.js';

    function initializeArtwork() {
      let cachedArtwork = localStorage.getItem("met" + objectID);
      if(cachedArtwork  !== null) {
        let elements = cachedArtwork.split(";");
        let artist = elements[0];
        let title =  elements[1];
        let date =   elements[2];
        let imgUrl = elements[3];

        setArtwork(artist, title, date, imgUrl);
      }
    }

    

    

    function setArtwork(artist, title, date, imgUrl) {
      document.getElementById("preview-image").src = imgUrl;
      document.getElementById("image-label").innerHTML = `<span class="artist">${artist}</span><span class="title">${title}, </span>${date}`;
      updateConfigurator();
    }

    function updateConfigurator() {
      render();
      let sizes = Frame.getPrintSizes(document.getElementById("preview-image"));
      document.getElementById("print-size-s-label").innerHTML = `Small<br>${sizes.S[0]} × ${sizes.S[1]} cm`
      document.getElementById("print-size-m-label").innerHTML = `Medium<br>${sizes.M[0]} × ${sizes.M[1]} cm`
      document.getElementById("print-size-l-label").innerHTML = `Large<br>${sizes.L[0]} × ${sizes.L[1]} cm`
    }

    function render() {
      Frame.render(
        document.getElementById("preview-image"),
        document.getElementById("preview-container"),
        document.querySelector('input[name = "printSize"]:checked').value,
        document.querySelector('input[name = "frameStyle"]:checked').value,
        document.querySelector('input[name = "frameWidth"]').value,
        document.querySelector('input[name = "matColor"]:checked').value,
        document.querySelector('input[name = "matWidth"]').value
      );
    }

    function correctWidth(min, max, value) {  // in mm
      if (value || value === 0) 
      return value;
    }

    function correctFrame(value) {
      return correctWidth(20, 50, value);
    }

    function correctMat(value) {
      return correctWidth(0, 100, value);
    }

    function setRadio(name, value) {
      for (const element of document.getElementsByName(name)) {
        if (element.value === value) 
      }
    }

    function setValue(numberField, rangeSlider, value) {
      if (value) 
    }

    function setPrice() {
      const printSize = document.querySelector('input[name = "printSize"]:checked').value;
      const frameStyle = document.querySelector('input[name = "frameStyle"]:checked').value;
      const frameWidth = document.querySelector('input[name = "frameWidth"]').value * 10.0;
      const matWidth = document.querySelector('input[name = "matWidth"]').value * 10.0;

      const price = Frame.calculatePrice(printSize, frameStyle, frameWidth, matWidth);
      const priceTag = document.getElementById("price");
      priceTag.innerHTML = `€ ${price.toFixed(2)}`
    }

    

    function setConfigurationListeners() {
      for (const printSizeTag of document.getElementsByName("printSize")) {
        printSizeTag.addEventListener("change", );
      }
      for (const frameStyleTag of document.getElementsByName("frameStyle")) {
        frameStyleTag.addEventListener("change", );
      }
      for (const matColorTag of document.getElementsByName("matColor")) {
        matColorTag.addEventListener("change", updateConfigurator)
      }
      document.getElementsByName("frameWidth")[0].addEventListener("change", );
      document.getElementsByName("matWidth")[0].addEventListener("change", );
      document.getElementsByName("frameWidthR")[0].addEventListener("change", );
      document.getElementsByName("matWidthR")[0].addEventListener("change", );
    }

    

    function setWidthListener(original, copy, correctionFunction) {
      for (const originalElement of document.getElementsByName(original)) {
        for (const copyElement of document.getElementsByName(copy)) {
          originalElement.addEventListener("change", );
        }
      }
    }

    function setDoubleListeners(og, cp, corr) {
      setWidthListener(og, cp, corr);
      setWidthListener(cp, og, corr);
    }


    let url = new URL(window.location);
    let objectID = url.searchParams.get("objectID");
    let printSize = url.searchParams.get("printSize");
    let frameStyle = url.searchParams.get("frameStyle");
    let frameWidth = url.searchParams.get("frameWidth");
    let matColor = url.searchParams.get("matColor");
    let matWidth = url.searchParams.get("matWidth");

    Common.setCartItemNumber();
    setRadio("printSize", printSize);
    setRadio("frameStyle", frameStyle);
    setRadio("matColor", matColor);
    setValue("frameWidth", "frameWidthR", correctFrame(frameWidth));
    setValue("matWidth", "matWidthR", correctMat(matWidth));
    setPrice();

    setDoubleListeners("frameWidth", "frameWidthR", correctFrame);
    setDoubleListeners("matWidth", "matWidthR", correctMat);
    setConfigurationListeners();
    document.getElementById('config-form').addEventListener("submit", addToCart);

    let objectIDRegex = /^[0-9]+$/;

    if ((objectID === null) || (!objectIDRegex.test(objectID))) 

    initializeArtwork();

  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    switch (frameStyle) {
        
        case 'natural':
            price += (frameWidth / 10.0) * 0.8;
            break;
        case 'shabby':
            price += (frameWidth / 10.0) * 0.9;
            break;
        case 'elegant':
            price += (frameWidth / 10.0) * 0.85;
            break;
    }

    price += (matWidth / 10.0) * 0.05

    if (printSize === 'M') {
        price *= 2;
    } else if (printSize === 'L') {
        price *= 3.5;
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
