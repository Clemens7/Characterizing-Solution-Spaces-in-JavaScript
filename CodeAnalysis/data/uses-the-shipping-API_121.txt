import { frameConfigStore } from '../shared/frame-config-store.js';
export class AbstractRadioComponent extends HTMLDivElement {
    
    
    
    
    
}
var __awaiter = (this ) || ;
class ArtworkApi {
    
    
    
    
}
export const artworkApi = new ArtworkApi();
export 
import { cartStore } from '../shared/cart-store.js';
export class CartDisplayController extends HTMLAnchorElement {
    
    
}
import { calculatePrice } from '../frame.js';
export class CartStore {
    constructor() {
        this.state = [];
        this.listeners = [];
        this.state = this.readState();
    }
    get mayCheckout() {
        return this.state.length > 0;
    }
    get totalPrice() {
        return this.state.reduce((total, item) => {
            const price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
            return total + price;
        }, 0);
    }
    
    
    
    readState() {
        var _a;
        const cachedCart = (_a = localStorage.getItem('cart')) !== null && _a !== void 0 ? _a ;
        return JSON.parse(cachedCart);
    }
    
}
export const cartStore = new CartStore();
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { cartStore } from './shared/index.js';
class CheckoutClient {
    constructor() {
        this.dash = '&mdash;';
        this.country = document.getElementById('country');
        this.priceSubtotal = document.getElementById('price-subtotal');
        this.priceShipping = document.getElementById('price-shipping');
        this.priceTotal = document.getElementById('price-total');
        this.shippingFees = [];
        this.links = [
            'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
            'https://www.youtube.com/watch?v=Fexsxz8nLVw&feature=youtu.be&t=6',
            'https://www.youtube.com/watch?v=xzfG7zApLT0 ',
            'https://youtu.be/3lY6At7wTOU?t=734',
            'https://www.youtube.com/watch?v=3lY6At7wTOU&feature=youtu.be&t=643'
        ];
    }
    
    
    loadCountriesAndShippingCosts() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield fetch('https://web-engineering.big.tuwien.ac.at/s20/a2/shipping');
                if (response.status !== 200) 
                const dest = yield response.json();
                return dest.destinations;
            }
        });
    }
    showPrice(index) {
        const subtotal = cartStore.totalPrice;
        const shipping = this.shippingFees[index];
        if (shipping != null) {
            const total = subtotal + shipping;
            this.priceShipping.innerText = shipping.toFixed(2);
            this.priceTotal.innerText = total.toFixed(2);
        }
        else {
            this.priceShipping.innerHTML = this.dash;
            this.priceTotal.innerHTML = this.dash;
        }
        this.priceSubtotal.innerHTML = subtotal.toFixed(2);
    }
    checkoutLoad() {
        if (cartStore.mayCheckout) {
            const payButton = document.getElementById('pay-button');
            payButton.disabled = false;
            payButton.addEventListener('click', );
            this.loadCountriesAndShippingCosts().then(destination => {
                if (destination != null) {
                    const options = destination.map((dest, i) => {
                        const optionElement = document.createElement('option');
                        optionElement.value = dest.country;
                        optionElement.innerText = dest.displayName;
                        this.shippingFees[i] = Number.parseFloat((dest.cost / 100).toFixed(2));
                        return optionElement;
                    });
                    this.country.append(...options);
                    this.country.addEventListener('change', );
                }
                this.showPrice(0);
            });
            this.showPrice(0);
        }
    }
}
const checkoutClient = new CheckoutClient();
checkoutClient.checkoutLoad();
import { allMatColors } from '../shared/model.js';
import { frameConfigStore } from '../shared/frame-config-store.js';
import { getMaterialColorDescription } from '../shared/model-utils.js';
import { AbstractRadioComponent } from './abstract-radio-component.js';
export class ColorSelectorComponent extends AbstractRadioComponent {
    
    
    
    
    
}
import { calcPrintSizes } from './calc-print-sizes.js';
import { parseFrameStyle, parseMaterialColor, parseNumberWithDefault, parsePrintSize } from './model-utils.js';
export class FrameConfigStore {
    constructor() {
        this.watchers = [];
        const urlSearchParams = new URLSearchParams(location.href);
        const printSize = urlSearchParams.get('printSize');
        const frameWidth = urlSearchParams.get('frameWidth');
        const matWidth = urlSearchParams.get('matWidth');
        const frameStyle = urlSearchParams.get('frameStyle');
        const matColor = urlSearchParams.get('matColor');
        this.frameConfig = {
            printSize: parsePrintSize(printSize),
            frameWidth: parseNumberWithDefault(frameWidth, 20, 50, 2),
            matWidth: parseNumberWithDefault(matWidth, 0, 100, 0),
            frameStyle: parseFrameStyle(frameStyle),
            matColor: parseMaterialColor(matColor),
        };
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
export const frameConfigStore = new FrameConfigStore();
import { frameConfigStore } from '../shared/frame-config-store.js';
import { cmToMm, mmToCm } from '../shared/model-utils.js';
export class FrameSliderSelectorComponent extends HTMLDivElement {
    
    
    
    
    
    
    
}
import { calcPrintSizes } from './shared/calc-print-sizes.js';
import { mmToCm } from './shared/model-utils.js';
export 
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;
    let frameStyleMultiplier = 1.0;
    switch (frameStyle) {
        
        
        case 'shabby':
            frameStyleMultiplier = 0.9;
            break;
        
    }
    price += mmToCm(frameWidth) * frameStyleMultiplier + mmToCm(matWidth) * 0.05;
    if (printSize === 'M') 
    else if (printSize === 'L') {
        price *= 3.5;
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { CartDisplayController } from './cart-display-component.js';
import { SizeSelectorComponent } from './size-selector-component.js';
import { StyleSelectorComponent } from './style-selector-component.js';
import { ColorSelectorComponent } from './color-selector-component.js';
import { FrameSliderSelectorComponent } from './frame-slider-selector-component.js';
import { MatWidthSliderSelectorComponent } from './mat-width-slider-selector-component.js';
export * from './cart-display-component.js';
customElements.define('shopping-cart-display', CartDisplayController, { extends: 'a' });
customElements.define('size-selector', SizeSelectorComponent, { extends: 'div' });
customElements.define('style-selector', StyleSelectorComponent, { extends: 'div' });
customElements.define('color-selector', ColorSelectorComponent, { extends: 'div' });
customElements.define('frame-slider-selector', FrameSliderSelectorComponent, { extends: 'div' });
customElements.define('mat-width-slider-selector', MatWidthSliderSelectorComponent, { extends: 'div' });
import { frameConfigStore } from '../shared/frame-config-store.js';
import { cmToMm, mmToCm } from '../shared/model-utils.js';
export class MatWidthSliderSelectorComponent extends HTMLDivElement {
    
    
    
    
    
    
    
}
import { allFrameStyles, allMatColors, allPrintSizes, } from './model.js';
export 
export 
export 
export 
export 
function verifyType(value, allValues) {
    if (value == null) {
        return false;
    }}
export function parsePrintSize(value) {
    return verifyType(value, allPrintSizes)  : 'M';
}
export function parseFrameStyle(value) {
    return verifyType(value, allFrameStyles)  : 'natural';
}
export function parseMaterialColor(value) {
    return verifyType(value, allMatColors)  : 'mint';
}
export function parseNumberWithDefault(value, min, max, def) {
    if (value == null) {
        return def;
    }) }
export function mmToCm(mm) {
    return parseFloat((mm / 10).toFixed(1));
}
export 
export const allPrintSizes = ['S', 'M', 'L'];
export const allFrameStyles = ['classic', 'natural', 'shabby', 'elegant'];
export const allMatColors = ['ivory', 'mint', 'wine', 'indigo', 'coal'];
export 
var __awaiter = (this ) || ;
class SearchApi {
    
    
}
export const searchApi = new SearchApi();
import { allPrintSizes } from '../shared/model.js';
import { frameConfigStore } from '../shared/frame-config-store.js';
import { getPrintSizeDescription } from '../shared/model-utils.js';
import { AbstractRadioComponent } from './abstract-radio-component.js';
export class SizeSelectorComponent extends AbstractRadioComponent {
    
    
    
    
    
}
import { allFrameStyles } from '../shared/model.js';
import { frameConfigStore } from '../shared/frame-config-store.js';
import { getFrameStyleDescription } from '../shared/model-utils.js';
import { AbstractRadioComponent } from './abstract-radio-component.js';
export class StyleSelectorComponent extends AbstractRadioComponent {
    
    
    
    
    
}
