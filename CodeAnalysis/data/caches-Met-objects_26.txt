export async function retrieveArtworkInformation(artworkID) {
    var artwork = retrieve(artworkID)

    if (!artwork) 
    return artwork;
}

export 

export function retrieve(artworkID) {
    if (artworkID in localStorage) {
        console.log("Retrieving '" + artworkID + "' from local storage");
        return JSON.parse(localStorage[artworkID]);
    }
}

export class Artwork {
    
}
      import * as frame from "./frame.js";
      import * as cart from "./cart.js";
      import { retrieveArtworkInformation } from "./artwork.js"

      document.querySelector('#checkout-button').onclick = 
      
      const parent = document.querySelector('.cart');
      let shoppingCart;



      if (cart.cartExistsAndNotEmpty()) {
        shoppingCart = cart.getCart()
        document.querySelector('.cart-empty').style.display = 'none';

        let template = document.querySelector('#template_cart_item');
        for (let i = 0; i < shoppingCart.length; i++) {
          createCartItem(template, shoppingCart[i]);
        }

        template.parentNode.removeChild(template);
        setTotalPrice(calculateTotal());
      }

      

      function setTotalPrice(price){
        document.querySelector('#price-total').innerHTML = price.toFixed(2);
      }

      

      

      function calculateTotal(){
        const prices = document.querySelectorAll('.cart-price>span');
        let total = 0;
        for (let i = 0; i < prices.length; i++) {
          total+=parseFloat(prices[i].innerHTML);
        }
        return total;
      }

      function createCartItem(template, cartItem){
        let clone = template.cloneNode(true); //deep clone
        clone.id = ""+cartItem.objectID;
        clone.querySelector('.cart-preview').id = "preview-"+cartItem.objectID;
        clone.querySelector('.cart-thumb').id = "img-"+cartItem.objectID;
        clone.className = 'cart-item';
        clone.querySelector('.cart-remove').onclick = ;

        let img = clone.querySelector('.cart-thumb');
        img.onload = function() { frame.render(clone.querySelector('.cart-thumb'), clone.querySelector('.cart-preview'), cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth); }

        clone.querySelector('.frame-description').innerHTML = cart.buildFrameDescription(cartItem);        

        const params = new URLSearchParams({"objectID": cartItem.objectID, "printSize": cartItem.printSize, "frameStyle": cartItem.frameStyle, "frameWidth": cartItem.frameWidth, "matColor": cartItem.matColor, "matWidth": cartItem.matWidth});
        clone.querySelector('.cart-preview a').href = "config.html?"+params.toString();


        let price = frame.calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth)
        clone.querySelector('.cart-price>span').innerHTML = price;

        
        const artwork = retrieveArtworkInformation(cartItem.objectID).then(artwork => {
          img.alt = artwork.artist+" - "+artwork.title;
          img.src = artwork.img
          clone.querySelector('.frame-description').innerHTML = cart.buildFrameDescription(cartItem);
          clone.querySelector('.artist').innerHTML = artwork.artist;
          clone.querySelector('.title').innerHTML = artwork.title
          clone.querySelector('.date').innerHTML = artwork.date
        });

        parent.insertBefore(clone, parent.firstChild);
      }
    /*
run on import
if (!location.href.split('\/').includes("checkout.html")) {
    updateCartCount();
}

export 

export function cartExistsAndNotEmpty() {
    return window.localStorage.getItem('cart') && (JSON.parse(window.localStorage.getItem('cart'))).length != 0 && typeof (JSON.parse(window.localStorage.getItem('cart'))) === "object";
}

export 

export function getCart() {
    return JSON.parse(localStorage.getItem('cart'))
}

export function updateCartCount() {
    if (getCart() != null) {
        document.getElementById('cart-link').innerText = `Cart (${getCart().length})`;
    }
}

export function buildFrameDescription(cartItem) {
    var ret = "";
    switch (cartItem.printSize) {
        case "S":
            ret += "Small"
            break;
        case "M":
            ret += "Medium"
            break;
        
    }
    ret += " print in a "

    ret += "" + cartItem.frameWidth / 10 + " cm " + cartItem.frameStyle + " frame";
    if (cartItem.matWidth > 0) {
        ret += " with a ";
        if (cartItem.matWidth < 10) {
            ret += "0." + cartItem.matWidth + " mm ";
        } else {
            ret += "" + cartItem.matWidth / 10 + " cm ";
        }
        ret += cartItem.matColor + " mat"
    }
    ret += "."
    return ret;
}


    import { calculatePrice, render, getPrintSizes } from "./frame.js";
    import { addToCart } from "./cart.js";
    import { retrieveArtworkInformation } from "./artwork.js";

    const urlParams = new URLSearchParams(window.location.search);

    var objectID = urlParams.get('objectID');
    if (objectID === null)
      

    var printSizes;
    var printSize;
    var frameStyle;
    var frameWidth;
    var matColor;
    var matWidth;
    var basicHeight;
    var basicWidth;


    var frameWidthTxtInput = document.getElementById("frameWidth");
    var frameWidthRangeInput = document.getElementById("frameWidthR");
    frameWidthTxtInput.addEventListener("change", );
    frameWidthRangeInput.addEventListener("change", );

    var matWidthTxtInput = document.getElementById("matWidth");
    var matWidthRangeInput = document.getElementById("matWidthR");
    matWidthTxtInput.addEventListener("change", );
    matWidthRangeInput.addEventListener("change", );

    var previewImage = document.getElementById("preview-image");
    var previewContainer = document.getElementById("preview-container");
    var imageLabel = document.getElementById("image-label");

    var printSizeInputs = document.querySelectorAll("input[name=printSize]");
    for (let x of printSizeInputs) {
      x.addEventListener("change", , 0);
    }

    var frameStyleInputs = document.querySelectorAll("input[name=frameStyle]");
    for (let x of frameStyleInputs) {
      x.addEventListener("change", , 0);
    }

    var matColorInputs = document.querySelectorAll("input[name=matColor]");
    for (let x of matColorInputs) {
      x.addEventListener("change", , 0);
    }

    document.getElementById("addToCartBtn").addEventListener("click", );


    function setParameters() {

      if (urlParams.get('printSize') !== null)
        
      else
        printSize = 'M';

      if (urlParams.get('frameStyle') !== null)
        
      else
        frameStyle = "natural";

      if (urlParams.get('frameWidth') !== null)
        
      else
        frameWidth = 20;

      if (urlParams.get('matColor') !== null)
        
      else
        matColor = "mint";

      if (urlParams.get('matWidth') !== null)
        
      else
        matWidth = 55;

      frameWidthTxtInput.value = frameWidth / 10;
      frameWidthRangeInput.value = frameWidth / 10;
      matWidthTxtInput.value = matWidth / 10
      matWidthRangeInput.value = matWidth / 10

      for (let x of printSizeInputs) {
        if (x.value === printSize)
          x.checked = true
        else
          x.checked = false;
      }

      for (let x of frameStyleInputs) {
        if (x.value === frameStyle)
          x.checked = true
        else
          x.checked = false;
      }

      for (let x of matColorInputs) {
        if (x.value === matColor)
          x.checked = true
        else
          x.checked = false;
      }
    }

    

    function updateURL() {
      if (history.pushState) {
        var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname;

        if (objectID !== null)
          newurl += `?objectID=${objectID}`;
        if (printSize !== null)
          newurl += `&printSize=${printSize}`;
        if (frameStyle !== null)
          newurl += `&frameStyle=${frameStyle}`;
        if (frameWidth !== null) {
          newurl += `&frameWidth=${frameWidth}`;
        }
        if (matColor !== null)
          newurl += `&matColor=${matColor}`;
        if (matWidth !== null) {
          newurl += `&matWidth=${matWidth}`;
        }

        if (window.location.href !== newurl){ //don't update  if this is aleady the current location
          window.history.pushState({ path: newurl }, '', newurl);
        }
      }
    }

    function getFullDmensions() {
      let h = (printSizes[printSize][1] + frameWidth * 2 + matWidth * 2) / 100
      let w = (printSizes[printSize][0] + frameWidth * 2 + matWidth * 2) / 100
      h = Math.round(h * 100) / 100
      w = Math.round(w * 100) / 100
      return w + " x " + h + " cm";
    }

    

    function initiateArtworkPreview(artwork) {
      console.log(artwork.img);
      if (artwork.img == undefined)
        

      imageLabel.innerHTML = "<strong>" + artwork.artist + "</strong><br><i>" + artwork.title + "</i>, " + artwork.date;
      previewImage.src = artwork.img;
      printSizes = getPrintSizes(previewImage);

      document.getElementById("price").innerHTML = "€ " + calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2);

      previewImage.onload = function () {
        printSizes = getPrintSizes(previewImage);
        render(previewImage, previewContainer, printSize, frameStyle, frameWidth, matColor, matWidth);

        document.getElementById("print-size-s-label").innerHTML = "Small<br>" + printSizes["S"][0] / 10 + " x " + printSizes["S"][1] / 10 + " cm";
        document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + printSizes["M"][0] / 10 + " x " + printSizes["M"][1] / 10 + " cm";
        document.getElementById("print-size-l-label").innerHTML = "Large<br>" + printSizes["L"][0] / 10 + " x " + printSizes["L"][1] / 10 + " cm";
        document.getElementById('total-size').innerHTML = getFullDmensions();
      }
      updateURL();
    }

    setParameters();

    retrieveArtworkInformation(objectID).then(artwork => {
      initiateArtworkPreview(artwork);
    });

  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    const cost = {
        base: 30,
        S: 1,
        M: 2,
        L: 3.5,
        classic: 0.1,
        natural: 0.08,
        shabby: 0.09,
        elegant: 0.085,
        mat: 0.005
    }

    price = cost[printSize] * (cost.base + frameWidth * cost[frameStyle] + matWidth * cost.mat)

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
    import { retrieveArtworkInformation } from "./artwork.js"
    import "./cart.js"

    const form = document.getElementById('searchForm');
    form.addEventListener('submit', );
    document.addEventListener('DOMContentLoaded', event => searchViaURLQuery(event));

    

    function searchViaURLQuery() {
      const params = new URLSearchParams(location.search);
      if (!params.has('q')) 
      const query = params.get('q');

      artworkSearch(query);
    }

    function artworkSearch(searchTerm) {
      document.getElementById('search-info').innerText = `Searching for “${searchTerm}”...`;

      const results = document.getElementById('gallery');
      results.innerHTML = '';

      const artworks = retrieveArtworkIDs(searchTerm.split(','));

    }

    function retrieveArtworkIDs(searchTerm) {
      function serializeSearchTermForQuery(searchTerm) {
        return searchTerm.join('%20');
      }

      fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${serializeSearchTermForQuery(searchTerm)}`)
        .then(result => {
          return result.json()
        })
        .then(rawData => {
          document.getElementById('search-info').innerText = `Found ${rawData.total} artwork${rawData.total == 1  : "s"} for “${searchTerm}”`

          if (rawData.total > 0) {
            const artworkIDs = rawData.objectIDs.splice(0, 100); // only the first 100 entries
            for (let id of artworkIDs) {
              retrieveArtworkInformation(id).then(artwork => {
                createArtworkElement(artwork);
              });
            }
          }
        });

    }

    function createArtworkElement(artwork) {
      const outerContainer = document.createElement('div');
      outerContainer.className = 'thumb';

      const link = document.createElement('a');
      link.id = `object-${artwork.id}`
      link.href = `config.html?objectID=${artwork.id}`;

      const img = document.createElement('img');
      img.id = `object-image-${artwork.id}`
      img.src = artwork.img;

      const innerContainer = document.createElement('div');
      innerContainer.className = 'museum-label';

      const spanArtist = document.createElement('span');
      spanArtist.className = 'artist';
      spanArtist.innerText = artwork.artist;

      const spanTitle = document.createElement('span');
      spanTitle.className = 'title';
      spanTitle.innerText = artwork.title;

      const spanDate = document.createElement('span');
      spanDate.className = 'date';
      spanDate.innerText = ", " + artwork.date;

      outerContainer.appendChild(link);
      link.appendChild(img);
      link.appendChild(innerContainer);
      innerContainer.appendChild(spanArtist);
      innerContainer.appendChild(spanTitle);
      innerContainer.appendChild(spanDate);

      document.getElementById('gallery').appendChild(outerContainer);
    }

    

    

  