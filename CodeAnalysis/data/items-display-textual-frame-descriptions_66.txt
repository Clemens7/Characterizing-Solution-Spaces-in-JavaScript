

    import { render } from '/frame.js';
    import { calculatePrice } from '/frame.js';

    var totalPrice = 0;
    var container = document.getElementById("cart");

    if ( localStorage.getItem("cart") == null || localStorage.getItem("cart") == "[null]" )  else {

      var items = getLocalStorage('cart');
      document.getElementById("cart-count").innerText = " (" + items.length + ")";
      document.getElementById("checkout-button").setAttribute("disabled", "false");

      items.forEach(function(item, index) {
        var data;

        if (item.objectID in localStorage)  else {
          data = httpGetById("https://collectionapi.metmuseum.org/public/collection/v1/objects/", item.objectID);
          localStorage[item.objectID] = JSON.stringify(data);
        }

        let price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        totalPrice += price;

        var cart_item = document.createElement("div");
        cart_item.className = "cart-item";
        container.prepend(cart_item);

        var cart_preview = document.createElement("div");
        cart_preview.id = "preview-container-" + index;
        cart_preview.className = "cart-preview";

        var image_link = document.createElement("a");
        image_link.href = "config.html?objectID=" + item.objectID
                + "&printSize=" + item.printSize
                + "&frameStyle=" + item.frameStyle
                + "&frameWidth=" + item.frameWidth
                + "&matColor=" + item.matColor
                + "&matWidth=" + item.matWidth;

        var img = new Image();
        img.className = "cart-thumb";
        img.id = "preview-" + index;
        img.src = data["primaryImageSmall"];
        img.addEventListener('load', function () {
          render(img, cart_preview, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
        }, false);

        image_link.appendChild(img);
        cart_preview.appendChild(image_link);
        cart_item.appendChild(cart_preview);

        var museum_label = document.createElement("div");
        museum_label.className = "museum-label";

        var extra_div = document.createElement("div");
        var br = document.createElement("br");
        var span_artist = document.createElement("span");
        span_artist.className = "artist";
        span_artist.innerText = data["artistDisplayName"];
        var span_title = document.createElement("span");
        span_title.className = "title";
        span_title.innerText = data["title"];
        var span_date = document.createElement("span");
        span_date.className = "date";
        span_date.innerText = ", " + data["objectDate"];
        var span_description = document.createElement("span");
        span_description.className = "frame-description";
        span_description.innerText = setDescription(item.printSize, item.frameStyle, item.frameWidth / 10, item.matColor, item.matWidth / 10);
        extra_div.appendChild(span_artist);
        extra_div.appendChild(span_title);
        extra_div.appendChild(span_date);
        extra_div.appendChild(br);
        extra_div.appendChild(br);
        extra_div.appendChild(span_description);
        museum_label.appendChild(extra_div);

        var cart_price = document.createElement("div");
        cart_price.className = "cart-price";
        cart_price.innerHTML = "â‚¬ <span id='price-" + index + "'>" + price + "</span>";
        museum_label.appendChild(cart_price);

        var cart_remove = document.createElement("button");
        cart_remove.className = "cart-remove";
        cart_remove.setAttribute("onclick", "deleteCartItem('" + index + "')");
        museum_label.appendChild(cart_remove);

        cart_item.appendChild(museum_label);

        document.getElementById("price-total").innerHTML = totalPrice;
      });
    }



  

function getLocalStorage(key) {
    var items = JSON.parse(localStorage.getItem(key) );
    return items;
}


function httpGetById(url, id)
{
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("GET", url + id, false); // true for asynchronous
    xmlHttp.send(null);
    return JSON.parse(xmlHttp.response);
}



function setDescription(printSize, frameStyle, frameWidth, matColor, matWidth)  {
    var result = "";

    switch (printSize) {
        case 'S':
            result += "Small";
            break;
        
        case 'L':
            result += "Large";
            break;
    }

    result += " print in a ";
    result += frameWidth;
    result += " cm ";
    result += frameStyle;

    if ( matWidth === 0 ) {
        result += " frame.";
    }  else {
        result += " frame with a ";
        result += matWidth;
        result += " cm ";
        result += matColor;
        result += " mat.";

    }

    return result;
}

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    price = 30.0;

    switch (frameStyle){
        case 'classic':
            price += frameWidth * 1;
            break;
        
        case 'shabby':
            price += frameWidth * 0.9;
            break;
        
    }

    price += matWidth * 0.05;

    if( printSize == 'M' )else if( printSize == 'L' ){
        price *= 3.5
    }
    return ( Math.round((price + Number.EPSILON) * 100) / 100 );
}
