import * as models from './models.js';
import * as frame from './frame.js';
import * as util from './util.js';
import * as cache from './metmuseumAPI.js';

let cart;
let template;
let cartItems;
let cartTotalPrice = 0;

cart = document.getElementById('cart');
template = getTemplate(cart, '.cart-item');
cartItems = models.retrieveCart();
setCartItemSize();
addCartItems(cartItems);
cartEmpty();

document.addEventListener('DOMContentLoaded', event => {
});

document.getElementById('checkout-button').addEventListener('click', );

function addCartItems(itemsObject) {
    let index = 0;
    itemsObject.items.forEach(item => {
        addCartItem(item, index);
        index++;
        showTotalPrice(item);
    });
}

async function addCartItem(item, index) {
    let object = await cache.getObject(item["objectID"]);
    let newItem = template.cloneNode(true);
    newItem.querySelector('.artist').textContent = object["artistDisplayName"];
    newItem.querySelector('.title').textContent = object["title"];
    newItem.querySelector('.date').textContent = object["objectDate"];

    let price = frame.calculatePrice(item["printSize"], item["frameStyle"], item["frameWidth"], item["matWidth"]);
    newItem.querySelector('#price-0').textContent = price;

    newItem.querySelector(".cart-remove").setAttribute('id', index);
    newItem.setAttribute('id', 'cart-index-' + index);
    newItem.querySelector(".cart-remove").addEventListener('click', );
    newItem.querySelector(".cart-preview").setAttribute('id', 'preview-container-' + item["objectID"]);
    newItem.querySelector("#price-0").setAttribute('id', 'price-' + item["objectID"]);

    newItem.getElementsByTagName('A')[0].href = "./config.html?objectID=" + item["objectID"]
        + '&printSize=' + item["printSize"] + '&frameStyle=' + item["frameStyle"] + '&frameWidth=' + item["frameWidth"] + '&matColor=' + item["matColor"] + '&matWidth=' + item["matWidth"];
    newItem.querySelector("img").src = object["primaryImageSmall"];
    newItem.querySelector("img").id = 'preview-' + item["objectID"];
    newItem = setItemDescription(newItem, item);

    cart.prepend(newItem);

    let imageContainer = document.getElementById('preview-' + item["objectID"]);
    let previewContainer = document.getElementById('preview-container-' + item["objectID"]);
    frame.render(imageContainer, previewContainer, item["printSize"], item["frameStyle"], item["frameWidth"], item["matColor"], item["matWidth"]);
}





function setItemDescription(nItem, oItem) {
    let sizeOfFrame;
    switch (oItem["printSize"]) {
        case 'S':
            sizeOfFrame = 'Small';
            break;
        case 'M':
            sizeOfFrame = 'Medium';
            break;
        
    }

    if (oItem["matWidth"] == "0") else {
        nItem.querySelector('.frame-description').textContent = sizeOfFrame + ' print in a '
            + (oItem["frameWidth"] / 10) + ' cm ' + oItem["frameStyle"] + ' frame with a '
            + (oItem["matWidth"] / 10) + ' cm ' + oItem["matColor"] + ' mat.';
    }
    return nItem;
}

function getTemplate(cart, item) {
    let template = cart.querySelector(item);
    template.remove();

    return template;
}

function showTotalPrice(item) {
    let price = frame.calculatePrice(item["printSize"], item["frameStyle"], item["frameWidth"], item["matWidth"]);
    cartTotalPrice += price;
    document.querySelector('#price-total').textContent = cartTotalPrice.toFixed(2);
}

function cartEmpty() {
    let cartItems = models.retrieveCart();
    if (cartItems.items.length === 0) 
}

function setCartItemSize() {
    util.showCartNumber();
}


    import * as configUtil from './config.js';
    import * as util from './util.js';

    util.showCartNumber();
  
    document.addEventListener('DOMContentLoaded', event => {

      const queryParams = (new URL(document.location)).searchParams;
      const objectIDParam = queryParams.get("objectID");
      const printSize = util.getOrDefault(queryParams, "printSize", 'M');
      const frameStyle =  util.getOrDefault(queryParams, "frameStyle", 'natural');
      const frameWidth =  util.getOrDefault(queryParams, "frameWidth", 40) / 10;
      const matColor =  util.getOrDefault(queryParams, "matColor", 'mint');
      const matWidth =  util.getOrDefault(queryParams, "matWidth", 55) / 10;

      if (!objectIDParam) 

      console.log("Got Query Parameters: ",objectIDParam, printSize, frameStyle, frameWidth,matColor,matWidth);

      configUtil.setupConfigurator(objectIDParam, printSize, frameStyle, frameWidth, matColor, matWidth);
    });

    document.getElementById("print-size-s").addEventListener('click', );
    document.getElementById("print-size-m").addEventListener('click', );
    document.getElementById("print-size-l").addEventListener('click', );

    document.getElementById("frame-style-classic").addEventListener('click', );
    document.getElementById("frame-style-natural").addEventListener('click', );
    document.getElementById("frame-style-shabby").addEventListener('click', );
    document.getElementById("frame-style-elegant").addEventListener('click', );

    document.getElementById("mat-color-ivory").addEventListener('click', );
    document.getElementById("mat-color-mint").addEventListener('click', );
    document.getElementById("mat-color-wine").addEventListener('click', );
    document.getElementById("mat-color-indigo").addEventListener('click', );
    document.getElementById("mat-color-coal").addEventListener('click', );

    document.getElementsByName("matWidthR")[0].addEventListener('change', );
    document.getElementsByName("matWidth")[0].addEventListener('change', );

    document.getElementsByName("frameWidthR")[0].addEventListener('change', );
    document.getElementsByName("frameWidth")[0].addEventListener('change', );

    document.getElementById("config-form").addEventListener('submit', );
  import * as frameutil from './frame.js';
import * as util from './util.js';
import {getObject} from './metmuseumAPI.js';
import {Item, Cart, retrieveCart} from './models.js';


let metObjectGlob;

async function getObjectFromMETApi(objectID) {
    metObjectGlob = await getObject(objectID);
    console.log(metObjectGlob)
    return metObjectGlob;
}

function setupPictureLabel(labelElement, artistDisplayName, title, date) {
    const nameElement = document.createElement("b");
    nameElement.innerText = artistDisplayName;
    labelElement.appendChild(nameElement);

    labelElement.appendChild(document.createElement("br"));

    const titleElement = document.createElement("i");
    titleElement.innerText = title + ", ";
    labelElement.appendChild(titleElement);

    const dateElement = document.createElement("span");
    dateElement.innerText = date;
    labelElement.appendChild(dateElement)
}

function setupPicture(metObject, imgElement, imgContainer, printSize, frameStyle, frameWidth, matColor, matWidth) {
    imgElement.src = metObject.primaryImageSmall;
    frameutil.render(imgElement, imgContainer, printSize, frameStyle, frameWidth*10, matColor, matWidth*10);
}

function setupConfigForm(printSize, frameStyle, frameWidth, matColor, matWidth) {
    util.setRadioButtonByValue(document.getElementsByName("printSize"), printSize);
    util.setRadioButtonByValue(document.getElementsByName("frameStyle"), frameStyle);

    document.getElementsByName("frameWidth")[0].value = frameWidth;
    document.getElementsByName("frameWidthR")[0].value = frameWidth;

    util.setRadioButtonByValue(document.getElementsByName("matColor"), matColor);

    document.getElementsByName("matWidth")[0].value = matWidth;
    document.getElementsByName("matWidthR")[0].value = matWidth;
}

function setupSizes(imgElement) {
    const printSizes = frameutil.getPrintSizes(imgElement);

    const sPrintSizeLabel = document.getElementById("print-size-s-label");
    const mPrintSizeLabel = document.getElementById("print-size-m-label");
    const lPrintSizeLabel = document.getElementById("print-size-l-label");

    sPrintSizeLabel.innerHTML = `Small<br>${printSizes['S'][0]/10}  × ${printSizes['S'][1]/10} cm`;
    mPrintSizeLabel.innerHTML = `Medium<br>${printSizes['M'][0]/10}  × ${printSizes['M'][1]/10} cm`;
    lPrintSizeLabel.innerHTML = `Large<br>${printSizes['L'][0]/10}  × ${printSizes['L'][1]/10} cm`;
}

function setupPrice(printSize, frameStyle, frameWidth, matWidth) {
    updatePrice(printSize, frameStyle, frameWidth, matWidth);
}


export async function setupConfigurator(objectID, printSize = 'S', frameStyle = 'natural', frameWidth = 4, matColor = 'mint', matWidth = 5.5) {
    setupConfigForm(printSize, frameStyle, frameWidth, matColor, matWidth);

    let metObject;
    try {
        metObject =  await getObjectFromMETApi(objectID);
        if (!metObject || !metObject.primaryImageSmall) 
    } 


    const labelElement = document.getElementById("image-label");
    setupPictureLabel(labelElement, metObject.artistDisplayName, metObject.title, metObject.objectDate);

    const imgContainer = document.getElementById("preview-container");
    const imgElement = document.getElementById("preview-image");
    setupPicture(metObject, imgElement, imgContainer, printSize, frameStyle, frameWidth, matColor, matWidth);
    setupSizes(imgElement);
    setupPrice(printSize, frameStyle, frameWidth, matWidth);
}



function updatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const priceField = document.getElementById("price");
    const price = frameutil.calculatePrice(printSize, frameStyle, frameWidth*10, matWidth*10);
    priceField.innerText = `€ ${price.toFixed(2)}`;
    return price;
}

export 

export 

export  

export export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    /*

    Implement a function in frame.js to calculate the price of a particular frame configuration. 
    For small prints, each frame has a base cost of 30€, 
        plus the wood cost per centimeter of width: 1€ per centimeter for a classic frame, 
        80¢ for a natural frame, 
        90¢ for a shabby frame and 
        85¢ for an elegant frame. 
        One centimeter of mat costs 5¢. 
        Medium prints are twice the price of small prints and large prints are three-and-a-half times the price.
    frameWidth /= 10;
    matWidth /= 10;

    switch (frameStyle) {
        
        case 'natural':
            price += frameWidth * 0.8;
            break;
        
        case 'elegant':
            price += frameWidth * 0.85;
            break;;
    }

    price += matWidth * 0.05;


    switch (printSize) {
        case 'S':
            price *= 1;
            break;
        case 'M':
            price *= 2;
            break;
        
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export 

let baseUrl = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
let storage = window.localStorage;

export 

export  

export async function getObject(id) {
    let url = baseUrl + id;

    var cached = storage.getItem("objects/" + id);
    if (cached != null) {
        return JSON.parse(cached);
    }}


export class Cart {
    constructor(items) {
        this.items = items;
    }

    

    
}

export class Item {
    
}

export class Destination {
    
}

/* Only store the array to comply with tests */
export function retrieveCart(){
    const cachedItems = window.localStorage.getItem('cart');
    if (cachedItems != null) {
        return new Cart(JSON.parse(cachedItems));
    }

}

export 
import * as api from './metmuseumAPI.js';
import * as util from './util.js';

const urlParams = new URLSearchParams(window.location.search);
const queryParam = urlParams.get('q');

var gallery = document.getElementById("gallery");
var template = createTemplate(gallery, ".thumb");
var searchInfo = document.getElementById("search-info");

util.showCartNumber();

if (queryParam) {
    doSearch(queryParam);
}

function doSearch(query) {
    searchInfo.textContent = `Searching for “${query}”...`;

    api.searchObjects(query)
        .then(response => {
            addSearchItems(gallery, template, response);
            return response;
        })
        .then(response => searchInfo.textContent = `Found ${response.length} ${pluralize("artwork", response.length)} for “${query}”`);
}



function pluralize(text, count) {
    if (count == 1) 

    return text + "s";
}

function createTemplate(parent, query) {
    var template = parent.querySelector(query);
    template.remove();

    return template;
}



function addSearchItems(parent, template, dataObjects) {
    console.log(dataObjects);
    dataObjects.forEach(dataObject => {
        addSearchItem(parent, template, dataObject); 
    });
}

function addSearchItem(parent, template, dataObject) {
    let clone = template.cloneNode(true);
    clone.querySelector('.artist').textContent = dataObject["artistDisplayName"];
    clone.querySelector('.title').textContent = dataObject["title"];
    clone.querySelector('.date').textContent = dataObject["objectDate"];
    
    let image = clone.querySelector("img");
    image.src = dataObject["primaryImageSmall"];

    let anchor = clone.querySelector("a");
    anchor.href = "./config.html?objectID=" + dataObject["objectID"];

    gallery.appendChild(clone);
}
import * as Model from './models.js';

export 

export 

export 

export 

export function showCartNumber() {
    const cart = Model.retrieveCart();
    const cartNum = cart.items.length;
    const cartLink = document.getElementById("cart-link");
    if(cartNum <= 0) else {
        cartLink.innerText = `Cart (${cartNum})`;
    }
    console.log(cart.items.length);

    
}


export 