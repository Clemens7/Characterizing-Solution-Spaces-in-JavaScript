import {SearchItem} from "./search-item.js";

export async function retrieve(objectID) {
    const key = objectID;
    if(key in localStorage)  else {
        try {
            const url = api_object(objectID);
            const response = await fetch(url);
            const result = await response.json();
            const resultObject = new SearchItem(objectID, result.primaryImageSmall, result.artistDisplayName, result.title, result.objectDate);
            store(objectID, resultObject);
            return resultObject;
        }
    }}

function store(objectID, artworks) {
    const key = objectID;
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(artworks);
}

function api_object(objectID) {
    return `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
}
import {cart} from "./cart_objects.js";

function displayCartCount() {
    const count = cart.count();
    let text = "Cart";
    if (count > 0) 
    document.getElementById("cart-link").innerText = text;
    console.log("refreshed Cart Count");
}

displayCartCount();
cart.addOnChangeEvent(displayCartCount);export class Frame {
    
}

class Cart {

    constructor() {
        this._onChangeEvents = [];
        this._load();
        window.addEventListener('storage', );
    }

    addOnChangeEvent(event) {
        this._onChangeEvents.push(event);
    }

    

    _load() {
        let cart = window.localStorage.getItem("cart");
        if (cart !== null) 
        if (!Array.isArray(this._frames)) {
            this._frames = [];
        }
    }

    

    

    

    count() {
        return this._frames.length;
    }

    
}

export const cart = new Cart();import {render,calculatePrice} from "../frame.js";
import {cart} from "./cart_objects.js";

setEventListeners();

let urlParams2 = new URLSearchParams(window.location.search);
setOptionalParams(urlParams2.get('printSize'), urlParams2.get('frameStyle'), urlParams2.get('frameWidth'), urlParams2.get('matColor'), urlParams2.get('matWidth'));


function setOptionalParams(printSize, frameStyle, frameWidth, matColor, matWidth) {
    console.log(printSize);
    if (printSize != undefined) 
    if (frameStyle != undefined ) 
    if (frameWidth != undefined ) 
    if (matColor != undefined) 
    if (matWidth != undefined ) 
}



function setEventListeners() {

    let frameWidth = document.getElementsByName('frameWidth')[0];
    let frameWidthR = document.getElementsByName('frameWidthR')[0];
    let matWidth = document.getElementsByName('matWidth')[0];
    let matWidthR = document.getElementsByName('matWidthR')[0];
    let updateDomElements = document.querySelectorAll('[name="printSize"], [name="frameStyle"], [name="matColor"]');
    for (let element of updateDomElements) {
        element.addEventListener('click', function () {
            updateDom()
        });
    }

    let submit = document.getElementsByClassName('buy')[0];

    let changeFrameWidth = function () {
        changeBetweenObjects(frameWidth, frameWidthR, 2, 5);
    };
    let changeFrameWidthR = ;
    let changeMatWidth = function () {
        changeBetweenObjects(matWidth, matWidthR, 0, 10);
    };
    let changeMatWidthR = ;

    frameWidth.addEventListener("change", changeFrameWidth);
    frameWidthR.addEventListener("change", changeFrameWidthR);
    matWidth.addEventListener("change", changeMatWidth);
    matWidthR.addEventListener("change", changeMatWidthR);
    let form = document.getElementById('config-form');
    form.onsubmit = ;
    submit.addEventListener('click', );


}

function changeBetweenObjects(dom1, dom2, min, max) {
    if (!isNaN(dom1.value)) {
        if (dom1.value < min)  else if (dom1.value > max) 
        dom2.value = Math.round(dom1.value*10)/10;
        dom1.value = dom2.value;
    }
    updateDom();
}

export function updateDom() {
    let item = createConfigObject();
    let img = document.getElementById('preview-image');
    render(img,img.parentElement, item['printSize'], item['frameStyle'], item['frameWidth'], item['matColor'], item['matWidth']);
    let price = calculatePrice(item['printSize'], item['frameStyle'], item['frameWidth'], item['matWidth']);
    document.getElementById('price').innerText ="€ "+ price.toFixed(2);
}

function getSelected(name) {
    let elements = document.getElementsByName(name);
    let selected;
    for (let element of elements) {
        if (element.checked === true) selected = element;
    }
    return selected.value;
}

function createConfigObject(){
    let item = new Object();

    item['objectID'] = urlParams2.get('objectID');
    item['printSize'] = getSelected("printSize");
    item['frameStyle'] = getSelected("frameStyle");
    item['frameWidth'] = document.getElementsByName('frameWidth')[0].value;
    item['matColor'] = getSelected('matColor');
    item['matWidth'] = document.getElementsByName('matWidth')[0].value;

    return item;
}import {getPrintSizes} from "../frame.js";
import {updateDom} from "./config.js";
import {retrieve} from "./cache.js";

let imgTag = document.getElementById('preview-image');
let urlParams = new URLSearchParams(window.location.search);
setIMG(urlParams.get('objectID'));

let img = document.getElementById('preview-image');
img.addEventListener("load", function () {
    let imgSizes = getPrintSizes(imgTag);
    console.log(imgSizes);
    console.log("hello");
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${imgSizes['S'][0]} × ${imgSizes['S'][1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${imgSizes['M'][0]} × ${imgSizes['M'][1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${imgSizes['L'][0]} × ${imgSizes['L'][1]} cm`;
    updateDom();
});

async function setIMG(objectid) {
    console.log(objectid);
    if (objectid == undefined) 
    let museumResponse = await retrieve(objectid);
    console.log(museumResponse);
    console.log("image");
    console.log(imgTag);
    let picture = museumResponse.image;
    if (picture == undefined) 
    console.log("hello");
    imgTag.src = picture;
    let imgLabel = document.getElementById('image-label');
    let test = createLabel(museumResponse.artist,museumResponse.title,museumResponse.date);
    imgLabel.innerHTML = test;

}

function createLabel(artist, title, time) {
    return `<p><b>${artist}</b></p>
                 <div><em>${title}, </em><span>${time}</span></div>`;
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    let styleFactor = 0.0;
    if(frameStyle === 'classic')
    else if(frameStyle === 'natural'){styleFactor = 0.8;}
    else if(frameStyle === 'shabby'){styleFactor = 0.9;}
    else if(frameStyle === 'elegant'){styleFactor = 0.85;}

    price += frameWidth * styleFactor;
    price += 0.05 * matWidth;

    let priceFactor = 1.0;
    if(printSize === 'S') priceFactor = 1.0;
    if(printSize === 'M') priceFactor = 2.0;
    if(printSize === 'L') priceFactor = 3.5;

    price *= priceFactor;

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export class SearchItem {
    constructor(id, image, artist, title, date){
        this.id = id;
        this.image = image;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}

export var SearchParser = {
    serialize : ,
    parse : 
};
