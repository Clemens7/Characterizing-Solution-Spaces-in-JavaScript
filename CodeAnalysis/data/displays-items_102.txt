
                
            import {render} from "./frame.js";
import {calculatePrice} from "./frame.js";

let cart = JSON.parse(localStorage.getItem("cart"));
let itemJSON;
let totalP = 0;

document.getElementById("cart-item-0").remove();

if (cart != null) {
    displayCart(cart.length);
}

async function displayCart(cart_length) {

    if (localStorage.getItem("cart") !== null) {
        document.getElementById("cart-link").innerText = `Cart (${cart_length})`;
    }

    let cart_total = document.getElementById("cart-total");

    for (let i = 0; i < cart_length; i++) {

        let cart_item = document.createElement("div");
        cart_item.setAttribute("class", "cart-item");
        cart_item.setAttribute("id", `cart-item-${i}`);
        let cart_preview = document.createElement("div");
        cart_preview.setAttribute("class", "cart-preview");
        cart_preview.setAttribute("id", "cart-preview-container");
        let a = document.createElement("a");
        let c = JSON.parse(localStorage.getItem('cart'))
        let id = (c[i].objectID);
        a.setAttribute("href", "./config.html?objectID=" + id);
        a.addEventListener('click', );
        let img = document.createElement("img");
        img.setAttribute("class", "cart-thumb");
        img.setAttribute("id", `cart-preview-${i}`);
        let source = (localStorage.getItem('cart'));
        img.setAttribute("src", " ");

        let museum_label = document.createElement("div");
        museum_label.setAttribute("class", "museum-label");
        let label = document.createElement("div");
        let artist = document.createElement("span");
        artist.setAttribute("class", "artist");
        let title = document.createElement("span");
        title.setAttribute("class", "title");
        let date = document.createElement("span");
        date.setAttribute("class", "date");
        let br1 = document.createElement("br");
        let br2 = document.createElement("br");
        let frame_description = document.createElement("span");
        frame_description.setAttribute("class", "frame-description");
        let cart_price = document.createElement("div");
        cart_price.setAttribute("class", "cart-price");
        let price = document.createElement("span");
        let button = document.createElement("button");
        button.setAttribute("type", "button");
        button.setAttribute("class", "cart-remove");
        button.addEventListener("click", );

        cart_item.appendChild(cart_preview);
        cart_preview.appendChild(a);
        a.appendChild(img);
        cart_item.appendChild(museum_label);
        museum_label.appendChild(label);
        label.appendChild(artist);
        label.appendChild(title);
        label.append(", ");
        label.appendChild(date);
        label.appendChild(br1);
        label.appendChild(br2);
        label.appendChild(frame_description);
        museum_label.appendChild(cart_price);
        cart_price.append("â‚¬ ");
        cart_price.appendChild(price);
        museum_label.appendChild(button);

        let cartItem = cart[i];

        if (localStorage.getItem(cartItem.objectID))  else {
            let item = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${cartItem.objectID}`);
            itemJSON = await item.json();
            localStorage.setItem(cartItem.objectID, JSON.stringify(itemJSON));
        }


        let idJSON = JSON.parse(localStorage.getItem('cart'))[i];
        let idid = idJSON.objectID;
        let idJSONparsed = localStorage.getItem(idid);
        let idJSONdoubleparsed = JSON.parse(idJSONparsed)
        img.src = idJSONdoubleparsed.primaryImageSmall;
        img.alt = "Chosen Image with Frame and Mat";
        let cart_thumb = document.getElementsByClassName('cart-thumb');

        let artistText = itemJSON.artistDisplayName;
        let titleText = itemJSON.title;
        let dateText = itemJSON.objectDate;
        artist.innerText = artistText;
        title.innerText = titleText;
        date.innerText = dateText;

        let size = cartItem.printSize;
        if (size === 'S') {
            size = 'Small';
        } else if (size === 'M') {
            size = 'Medium';
        }

        if (cartItem.matWidth != 0) {
            frame_description.innerText =
                `${size} print in a ${cartItem.frameWidth / 10} cm ${cartItem.frameStyle} frame with a ${cartItem.matWidth / 10} cm ${cartItem.matColor} mat.`;
        }

        let p = calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth);
        totalP = totalP + p;
        price.innerText = `${p}`;

        document.getElementById("cart").insertBefore(cart_item, cart_total);

        cart_item.setAttribute("id", itemJSON.objectID)

    }
    for (let j = 0; j < cart_length; j++) {
        let img = document.getElementById('cart-preview-' + j);
        let cartItem = cart[j];
        let height = document.getElementById('cart-preview-container').offsetHeight;
        let width = document.getElementById('cart-preview-container').offsetWidth;
        document.getElementById('cart-preview-' + j).height = height;
        document.getElementById('cart-preview-' + j).width = width;
        render(img, img.parentElement, cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth);
    }


    document.getElementById("price-total").innerText = `${totalP}`;

}

export 








export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.00; //base price for small prints

    let frameBasePrice = 0.00;

    switch (frameStyle) {
        
        case "natural":
            frameBasePrice = 0.80;
            break;
        case "shabby":
            frameBasePrice = 0.90;
            break;
        case "elegant":
            frameBasePrice = 0.85;
            break;
    }

    price = price + (frameBasePrice * frameWidth/10.00) + (matWidth/10.00 * 0.05);
    price = printSize === "M" ? price * 2.00 : (printSize === "L"  : price);
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
