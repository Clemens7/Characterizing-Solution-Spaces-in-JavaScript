


        import {Cart, CartItem, CartContainer} from './cart.js';

        /*
            const mockData = [
              new CartItem(39799, 'M', 'natural', 33, 'mint', 17),
              new CartItem(459055, 'S', 'classic', 50, '', 0)
            ];

            Cart.clear();
            for(let data of mockData){
              Cart.save(data);
            }

        function generateCartElements() {
            const cartContainer = new CartContainer('cart');
            cartContainer.clear();
            let items = Cart.getItems();
            for (let i = 0; i < items.length; i++) {
                cartContainer.addItemToCart(items[i], i);
            }
        }

        document.addEventListener('DOMContentLoaded', event => {
            generateCartElements();
            Cart.updateCartItemCounter();
        });

    import * as DOM from './dom_helper.js';
import * as Frame from "./frame.js";
import * as API from './metropolitan_api.js';

export class Cart {
    static key = 'cart';

    static 

    static updateCartItemCounter() {
        document.getElementById("cart-link").innerText = `Cart ${Cart.numberOfItems() > 0
            ? `(${Cart.numberOfItems()})`
            }`;
    }

    static updateCartCurrentPrice() {
        console.log("clicked!");
        let items = Cart.getItems();
        let price = 0;
        for (let item of items) {
            price += Frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        }

        if (price === 0)  else {
            document.getElementById("checkout-button").disabled = false;
            let empty_cart = document.getElementById("cart-empty");
            if (empty_cart) {
                empty_cart.remove();
            }
            document.getElementById("price-total").innerText = price.toFixed(2);
        }
    }

    static 

    static 

    static getItems() {
        if (localStorage[this.key]) {
            return JSON.parse(localStorage[this.key]);
        }
    }

    static numberOfItems() {
        let cartString = localStorage[this.key];
        if (cartString) {
            return JSON.parse(cartString).length;
        }
    }
}

export class CartItem {
    
}

export class CartContainer {
    constructor(containerID = 'cart') {
        this.container = document.getElementById(containerID);
        if (!this.container) 
    }

    clear() {
        this.container.innerHTML = '<span id="cart-empty">There are no items in your shopping cart.</span>' +
            '<div class="cart-total">\n' +
            '        <div class="price">Total: € <span id="price-total">0</span></div>\n' +
            '        <button disabled type="button" id="checkout-button">Checkout</button>\n' +
            '      </div>';
    }

    async addItemToCart(item, id) {
        let cartElement = await this.createCartItemElements(item, id);
        this.container.prepend(cartElement);
        Cart.updateCartCurrentPrice();
        Cart.updateCartItemCounter();
    }

    async createCartItemElements(item, id) {

        const painting = await API.get_object_by_id(item.objectID);

        let imageContainer = DOM.imageElement(painting.image, "");

        imageContainer.alt = `${painting.artist}, ${painting.name}`;

        let img = imageContainer.getElementsByTagName("img");


        let linkContainer = DOM.container(
            [imageContainer] // <a href="">
            , "a");

        linkContainer.href = `config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameWidth=${item.frameWidth}&frameStyle=${item.frameStyle}&matWidth=${item.matWidth}&matColor=${item.matColor}`;

        let previewContainer = DOM.container( // <div class="cart-preview">
            [linkContainer]
            , "div", "cart-preview");


        imageContainer.addEventListener('load', _ => {
            Frame.render(imageContainer, previewContainer, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
        });
        imageContainer.setAttribute("class", "cart-thumb");
        var cart_remove_item = DOM.element("button", "cart-remove");
        cart_remove_item.id = id;

        cart_remove_item.onclick = ;

        return DOM.container([ // <div class="cart-item">
            previewContainer,
            DOM.container([ // <div class="museum-label">
                DOM.container([ // <div>
                    DOM.textElement("span", painting.artist, "artist"),
                    DOM.textElement("span", `${painting.name}, `, "title"),
                    DOM.textElement("span", painting.date, "date"),
                    document.createElement("br"), document.createElement("br"),
                    DOM.textElement("span",
                        `${this.generateFrameDescription(item)}`, "frame-description"),

                ], "div"),
                DOM.container([ // <div class="cart-price">
                    DOM.textElement("span", `€ ${Frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2)}`)
                ], "div", "cart-price"),
                cart_remove_item,
            ], "div", "museum-label")
        ], "div", "cart-item");
    }

    generateFrameDescription(item) {
        let sizeText;
        switch (item.printSize) {
            case 'S':
                sizeText = 'Small';
                break;
            case 'M':
                sizeText = 'Medium';
                break;
            
            
        }

        let matText = '';
        if (item.matWidth !== 0) {
            matText = ` with a ${Number((item.matWidth / 10).toFixed(1))} cm ${item.matColor} mat`
        }

        return `${sizeText} print in a ${Number((item.frameWidth / 10).toFixed(1))} cm ${item.frameStyle} frame${matText}.`;
    }

}


        import * as frame from "./frame.js";
        import * as frame_functions from "./frame_functions.js";
        import * as api from "./metropolitan_api.js";
        import {Cart, CartItem} from "./cart.js";
        import * as DOM from './dom_helper.js';


        var domData = {};
        let item = new CartItem(null, null, null, null, null, null);

        function updateDomData() {
            const printSizes = document.getElementsByName("printSize");
            for (var i = 0; i < printSizes.length; i++) {
                if (printSizes[i].checked) {
                    domData.printSize = printSizes[i].value;
                    item.printSize = printSizes[i].value;
                    updatePrice();
                }
            }

            domData.frameWidth = document.getElementById("frame-width-number").value * 10;

            const frameStyles = document.getElementsByName("frameStyle");
            for (var i = 0; i < frameStyles.length; i++) {
                if (frameStyles[i].checked) {
                    domData.frameStyle = frameStyles[i].value;
                    item.frameStyle = frameStyles[i].value;
                    updatePrice();
                }
            }

            domData.matWidth = document.getElementById("mat-width-number").value * 10;

            const matColors = document.getElementsByName("matColor");
            for (var i = 0; i < matColors.length; i++) {
                if (matColors[i].checked) {
                    domData.matColor = matColors[i].value;
                    item.matColor = matColors[i].value;
                }
            }
        }

        function setDefaultValues(params) {
            let printSize = params.printSize;
            let frameStyle = params.frameStyle;
            let frameWidth = params.frameWidth;
            let matColor = params.matColor;
            let matWidth = params.matWidth;

            if (printSize)  else {
                frame_functions.setPrintSize('S');
                item.printSize = 'S';
            }

            if (frameStyle)  else {
                frame_functions.setFrameStyle('classic');
                item.frameStyle = 'classic';
            }

            if (matColor)  else {
                frame_functions.setMatColor('ivory');
                item.matColor = 'ivory';
            }

            if (frameWidth)  else {
                frame_functions.setFrameWidth(4);
                item.frameWidth = 40;
            }

            if (matWidth)  else {
                frame_functions.setMatWidth(4);
                item.matWidth = 40;
            }

            updatePrice();
            updateSize();
        }

        let matWidthNumberInput = document.getElementById("mat-width-number");
        let matWidthRangeInput = document.getElementById("mat-width-range");

        matWidthNumberInput.onchange = ;

        matWidthRangeInput.onchange = ;

        let frameWidthNumberInput = document.getElementById("frame-width-number");
        let frameWidthRangeInput = document.getElementById("frame-width-range");

        frameWidthNumberInput.onchange = ;

        frameWidthRangeInput.onchange = ;

        function updatePrice() {
            document.getElementById("price").innerText = `€ ${frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2)}`
        }

        function updateSize() {
            let image = new Image();
            image.src = domData.image;
            let sizes = frame.getPrintSizes(image);

            let width, height;
            switch (item.printSize) {
                case 'S':
                    width = sizes.S[0];
                    height = sizes.S[1];
                    break;
                
                
            }

            document.getElementById("total-size").innerText = `${width + Number((item.matWidth/10).toFixed(1)) + Number((item.frameWidth/10).toFixed(1))} x ${height + Number((item.matWidth/10).toFixed(1)) + Number((item.frameWidth/10).toFixed(1))} cm`;
        }

        function refreshPage() {
            console.log("Refreshing page.");
            updateDomData();
            frame_functions.setImage(domData);
        }

        function setUpRefreshHandler() {
            var elements = document.getElementsByTagName("input");

            for (let i = 0; i < elements.length; i++) {
                elements[i].addEventListener('change', refreshPage);
            }
        }

        loadContent();

        async function loadContent() {
            const params = (new URL(document.location)).searchParams;
            const paramsJson = Object.fromEntries(params);
            setDefaultValues(paramsJson);

            let image_object = await api.get_object_by_id(paramsJson.objectID);
            if (!image_object.id) 

            let artist = DOM.textElement('span', image_object.artist, 'artist');
            let name = DOM.textElement('span', `${image_object.name}, `, 'title');
            let date = DOM.textElement('span', image_object.date, 'date');

            let label = document.getElementById("image-label");
            label.appendChild(artist);
            label.appendChild(name);
            label.appendChild(date);

            domData.image = image_object.image;
            let image = new Image();
            image.src = image_object.image;

            item.objectID = image_object.id;

            frame_functions.setPrintMeasurements(image);
            updateSize();
            refreshPage();
            setUpRefreshHandler();
        }

        document.getElementById("config-form").addEventListener('submit', );

        document.getElementById("cart-link").innerText = `Cart ${Cart.numberOfItems() > 0
            
            : ""}`;
    export function textElement(tag, text, className = null) {
    const element = document.createElement(tag);
    element.innerText = text;
    if (className) {
        element.className = className;
    }
    return element;
}

export 

export function imageElement(src, alt) {
    const element = document.createElement("img");
    element.src = src;
    element.alt = alt;
    return element;
}

export function element(tag, className) {
    const element = document.createElement(tag);
    if (className) {
        element.className = className;
    }
    return element;
}

export function container(elements, tag = 'div', className = null, attributes = null, href = null) {
    const container = document.createElement(tag);
    for (let element of elements) {
        container.appendChild(element);
    }
    if (className) {
        container.className = className;
    }
    if (attributes) 
    if (tag == 'a' && href) 
    return container;
}

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    switch (frameStyle) {
        
        case 'natural':
            price += frameWidth/10 * 0.8;
            break;
        
        case 'elegant':
            price += frameWidth/10 * 0.85;
            break;
        
    }
    price += matWidth/10 * 0.05;

    if (printSize === 'M') {
        price *= 2.0;
    } else if (printSize === 'L') 

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}



import * as Frame from "./frame.js";

export function setImage(parameters) {
    const printSize = parameters.printSize;
    const frameStyle = parameters.frameStyle;
    const frameWidth = parameters.frameWidth;
    const matColor = parameters.matColor;
    const matWidth = parameters.matWidth;
    const image_link = parameters.image;

    var paintingcontainer = document.getElementById("preview-container");
    try {
        var img = document.getElementById("preview-image");
        img.src = image_link;
        Frame.render(img, paintingcontainer, printSize, frameStyle, frameWidth, matColor, matWidth);
    } 

}

export function setPrintSize(printSize) {
    document.getElementById(`print-size-${printSize.toLowerCase()}`).checked = true;
}

export function setFrameStyle(frameStyle) {
    document.getElementById(`frame-style-${frameStyle.toLowerCase()}`).click();
}

export function setPrintMeasurements(img) {
    let sizes = Frame.getPrintSizes(img);
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${sizes.S[0]} × ${sizes.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${sizes.M[0]} × ${sizes.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${sizes.L[0]} × ${sizes.L[1]} cm`;
}

export function setFrameWidth(width) {
    width = Math.round((width*10))/10;
    width = Math.max(2, width);
    width = Math.min(5, width);
    document.getElementById('frame-width-number').value = width;
    document.getElementById('frame-width-range').value = width;
}

export function setMatColor(matColor) {
    document.getElementById(`mat-color-${matColor.toLowerCase()}`).checked = true;
}

export function setMatWidth(width) {
    width = Math.round((width*10))/10;
    width = Math.max(0, width);
    width = Math.min(10, width);
    document.getElementById('mat-width-number').value = width;
    document.getElementById('mat-width-range').value = width;
}

import {Painting} from "./painting.js";

export async function get_object_by_id(id) {
    let painting = Painting.retrieve(id);
    if(painting) {
        return painting;
    }}

export 

export 






export class Painting {
    

    static retrieve(id) {
        const key = id;
        if(key in localStorage) {
            return JSON.parse(localStorage[key]);
        }
    }

    static 
}

        import * as API from './metropolitan_api.js';
        import {ArtworkDocumentContainer} from "./search.js";
        import {Cart} from "./cart.js";

        

        /*
        async function artworkSearch(query) {
            const searchInfo = document.getElementById("search-info");
            searchInfo.innerText = `Searching for “${query}”...`;
            const artworkContainer = new ArtworkDocumentContainer('gallery');
            artworkContainer.clear();
            const artworks = await API.get_objects_by_query(query);
            if (!artworks) 
            searchInfo.innerText = `Found ${artworks.length} artwork${artworks.length === 1  : 's'} for “${query}”`
            for (let artwork of artworks) {
                artworkContainer.addArtworkToGallery(artwork);
            }
        }

        document.addEventListener('DOMContentLoaded', event => {
            const params = (new URL(document.location)).searchParams;
            const artworkQuery = params.get('q');
            if (!artworkQuery) 
            document.getElementById('search').value = artworkQuery;
            artworkSearch(artworkQuery);
        });

        const form = document.getElementsByClassName("search-form").item(0);
        form.addEventListener('submit', );

        document.getElementById("cart-link").innerText = `Cart ${Cart.numberOfItems() > 0
            
            : ""}`;

    import {Painting} from "./painting.js";
import * as DOM from './dom_helper.js';

export class ArtworkDocumentContainer {

    constructor(containerID = 'gallery') {
        this.container = document.getElementById(containerID);
        if (!this.container) 
    }

    clear() {
        this.container.innerHTML = '';
    }

    addArtworkToGallery(artwork) {
        this.container.appendChild(createArtworkElements(artwork));

        function createArtworkElements(artwork) {
            return DOM.container([
                DOM.container([
                    DOM.imageElement(artwork.image, artwork.title),
                    DOM.container([
                        DOM.textElement("span", artwork.artist, "artist"),
                        DOM.textElement("span", `${artwork.name}, `, "title"),
                        DOM.textElement("span", artwork.date, "date")
                    ], "div", "museum-label")
                ], "a",null,null,`config.html?objectID=${artwork.id}`)
            ], "div", "thumb");
        }
    }
}

