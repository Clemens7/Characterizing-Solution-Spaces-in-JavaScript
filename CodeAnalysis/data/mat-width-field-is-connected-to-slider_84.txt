
 
const baseUrl =  "https://collectionapi.metmuseum.org/public/collection/v1"
const countryUrl = "https://web-engineering.big.tuwien.ac.at/s20/a2"
const searchParams = "hasImages=true"

class APIRequests {

    async cachedFetch(query) {
        try {
            const cached = localStorage[query]
            if (cached) 
                
            const data = await fetch(query)
            if (data.status == 404)
                
            const json = await data.json()
            localStorage[query] = JSON.stringify(json)
            return json
        }}


    async getObject(id) {
        return this.cachedFetch(baseUrl + "/objects/" + id)
    }

    

    

    
}

const req = new APIRequests()
export default reqimport * as Frame from './frame.js';
import API from "./APIRequests.js"
import Cart from "./ShoppingCart.js"

const configElements = {
    frameWidthSlider: document.getElementsByName("frameWidthR")[0],
    frameWidhtInput: document.getElementsByName("frameWidth")[0],
    matWidthSlider: document.getElementsByName("matWidth")[0],
    matWidthInput: document.getElementsByName("matWidthR")[0],
    frameStyleInputs: document.querySelectorAll(".frame-style-item > input"),
    matStyleInputs: document.querySelectorAll(".mat-color-item > input"),
    frameSizeInputs: document.querySelectorAll(".segmented > input"),
    previewImage: document.getElementById("preview-image"),
    previewContainer: document.getElementById("preview-container"),
    artistText: document.getElementsByClassName("artist")[0],
    titleText: document.getElementsByClassName("title")[0],
    sLabel: document.getElementById("print-size-s-label"),
    mLabel: document.getElementById("print-size-m-label"),
    lLabel: document.getElementById("print-size-l-label"),
    totalSize: document.getElementById("total-size"),
    price: document.getElementById("price"),
    buyButton: document.getElementsByClassName("buy")[0]
}

const defaults = {
    objectID: null,
    frameStyle: "natural",
    printSize: "M",
    frameWidth: 40,
    matColor: "mint",
    matWidth: 55
}

class QueryBoundValue {

    get value() {
        return this.__value
    }

    set value(val) {
        if (this.__validator)
            this.__value = this.__validator.validate(val)
        else
            this.__value = val
        this.__changeListener.forEach(elem => elem())
    }


    constructor(name, validator) {
        this.name = name
        this.__value = undefined
        this.__validator = validator
        this.__changeListener = []
    }

    addListener(func) {
        this.__changeListener.push(func)
    }
}


class ValidRange {

    constructor(start, end, increment) {
        this.start = start
        this.end = end
        this.increment = increment
    }

    /*
    clamped(num) {
        if (num < this.start)
            return this.start
        else if (num > this.end)
            return this.end
        const floored = Math.floor(num)
        const significant = Math.fround(num - floored)
        const difference = significant / this.increment
        const closestInteger = Math.round(difference)
        console.log("floor", floored, "sign", significant, "diff", difference, "closest int", closestInteger)
        return floored + this.increment * closestInteger
    }

    clamped(num) {
        if (num < this.start)
            
        else if (num > this.end)
            

        var tempNumb = num * (1/this.increment)
        if (Number.isInteger(tempNumb)) {
            return num
        }
    }

    validate(value) {
        if (value === null || value === undefined)
            
        else
            return this.clamped(parseInt(value))
    }
}


class SetValidator {
    constructor(allowedValues) {
        this.__allowedValues = allowedValues
    }

    validate(value) {
        if (this.__allowedValues.indexOf(value) == -1)
            
        return value
    }
}


class Configurator {


    constructor() {

        this.objectID = new QueryBoundValue("objectID")
        this.printSize = new QueryBoundValue("printSize", new SetValidator(["M", "S", "L"]))
        this.frameStyle = new QueryBoundValue("frameStyle", new SetValidator(["natural", "classic", "shabby", "elegant"]))
        this.frameWidth = new QueryBoundValue("frameWidth", new ValidRange(20, 50, 1))
        this.matColor = new QueryBoundValue("matColor", new SetValidator(["mint", "ivory", "wine", "indigo", "coal"]))
        this.matWidth = new QueryBoundValue("matWidth", new ValidRange(0, 100, 1))

        this.__printSizes = null
        this.__cart = new Cart()

        this.__loader = new ImageLoader(configElements.previewImage)

        this.__params = new URLSearchParams(window.location.search)

        this.all = [this.objectID, this.printSize, this.frameStyle, this.frameWidth, this.matColor, this.matWidth].map(e => {
            const urlParam = this.__params.get(e.name)
            if (urlParam === undefined || urlParam === null) {
                e.value = defaults[e.name]
            } else {
                e.value = this.__params.get(e.name)
            }
            e.addListener(() => {
                this.__params.set(e.name, e.value)  // update the query param when value changes
                this.__updateParams()
                this.__rerender()
                this.__recalcSizeAndPrice()
            })
            return e    // return the element ie mapping onto itself
        })

        this.__handleImageLoad()
        this.__setup()
        this.__cart.updateHeader()
    }

    async __handleImageLoad() {
        try {
            const loader = await this.__loader.load(this.objectID.value)
            configElements.titleText.innerHTML = loader.title
            configElements.artistText.innerHTML = loader.artist
            const size = loader.sizes
            this.__printSizes = size
            const lab = (s) => (s[0] / 10) + " × " + (s[1] / 10) + " cm"
    
            configElements.sLabel.innerHTML = "Small <br> " + lab(size.S)
            configElements.mLabel.innerHTML = "Medium <br> " + lab(size.M)
            configElements.lLabel.innerHTML = "Large <br> " + lab(size.L)
            this.__rerender()
            this.__recalcSizeAndPrice()
        } 
    }

    __recalcSizeAndPrice() {
        const selectedSize = this.__printSizes[this.printSize.value]
        const sum = parseInt(this.frameWidth.value) + parseInt(this.matWidth.value)
        const width = parseInt(selectedSize[0]) + sum
        const height = parseInt(selectedSize[1]) + sum
        configElements.totalSize.innerHTML = `${width / 10} × ${height / 10} cm`
        configElements.price.innerHTML = "€ " + Frame.calculatePrice(this.printSize.value, this.frameStyle.value, this.frameWidth.value, this.matWidth.value).toFixed(2)
    }

    __setup() {
        this.__setupSlider(this.frameWidth, configElements.frameWidthSlider, configElements.frameWidhtInput, new ValidRange(2, 5, 0.1))
        this.__setupSlider(this.matWidth, configElements.matWidthSlider, configElements.matWidthInput, new ValidRange(0, 10, 0.1))
        this.__setupRadios(configElements.frameStyleInputs, this.frameStyle)
        this.__setupRadios(configElements.matStyleInputs, this.matColor)
        this.__setupRadios(configElements.frameSizeInputs, this.printSize)
        configElements.buyButton.onclick = 
    }

    __rerender() {
        Frame.render(
            configElements.previewImage,
            configElements.previewContainer,
            this.printSize.value,
            this.frameStyle.value,
            this.frameWidth.value,
            this.matColor.value,
            this.matWidth.value
        )
    }

    __updateParams() {
        window.history.replaceState({}, '', `${location.pathname}?${this.__params.toString()}`);
    }

    __setupSlider(param, sliderElem, inputElem, validRange) {
        const val = validRange.clamped(param.value / 10)
        sliderElem.value = val
        inputElem.value = val
        sliderElem.oninput = () => {
            inputElem.value = sliderElem.value
        }
        inputElem.oninput = 
        [inputElem, sliderElem].forEach(e => {
            e.onchange = () => {
                e.value = validRange.clamped(e.value)
                param.value = e.value * 10
            }
        })
    }
    __setupRadios(elements, prop) {
        elements.forEach(elem => {
            if (elem.value === prop.value) {
                elem.checked = true
            } else {
                elem.checked = false
            }
            elem.onchange = 
        })
    }
}

class ImageLoader {

    get artist() {
        return this.__currentJSON.artistDisplayName 
    }

    get title() {
        return (this.__currentJSON.title ) + (" ca " + this.__currentJSON.objectDate)
    }

    get sizes() {
        return Frame.getPrintSizes(this.__imgElement)
    }

    constructor(imgElem) {
        this.__imgElement = imgElem
        this.__currentJSON = null
    }

    loadImage(url) {
        return new Promise((resolve, reject) => {
          const img = new Image()
          img.addEventListener('load', _ => resolve(img))
          img.addEventListener('error', )
          img.src = url
        })
      }

    async load(objectID) {
        if (objectID === null) 
        const objJSON = await API.getObject(objectID)
        if (!objJSON)
            
        const imageURL = objJSON.primaryImageSmall
        this.__currentJSON = objJSON
        const image = await this.loadImage(imageURL)
        this.__imgElement.src = image.src
        return this
    }


}


const conf = new Configurator()
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const priceForStyle = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    }[frameStyle]

    let price = frameWidth / 10 * priceForStyle +  matWidth / 10 * 0.05;
    switch(printSize) {
        
        case "M":
            price = (price + 30) * 2
            break
        
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100)
}
import API from './APIRequests.js'
import * as Frame from './frame.js';


export default class ShoppingCart {

   constructor() {
   }

    


    
    
    

    

    

   
    updateHeader() {
        if (localStorage.getItem('cart')) 
            
    }

}

