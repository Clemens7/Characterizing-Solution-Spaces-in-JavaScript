import * as ArtworkCache from './artwork-cache.js'
import { Artwork, SearchValues } from "./Artwork.js";

export 

export 





export async function getObjectCached(id) {
    return ArtworkCache.retrieve('object-' + id) ?? await getObject(id)
}

async function getObject(id) {
    const objectUrl = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
    const response = await fetch(objectUrl+id)
    if(response.status != 200) 
    const object = await response.json()
    ArtworkCache.store('object-' + id, object)
    return object
}import { Artwork, SearchValues } from "./Artwork.js";

export function retrieve(key) {
    if(key in localStorage) 
}

export function store(key, artworks) {
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(artworks);
}import { Artwork } from './Artwork.js';
import * as DOM from './dom-helpers.js';
import {setAttributes} from "./dom-helpers.js";
import {setAttributeClass} from "./dom-helpers.js";
import {cartItemDescription} from "./cart.js";
import {calculatePrice, render} from "./frame.js";

export class ArtworkDocumentContainer {
    

    

}

export 

export function createArtworkImage(artwork) {
    const img = new Image()
    img.src = artwork.primaryImageSmall
    img.alt = artwork.title
    return img
}

export 

export function appendDescription(el, artist, title, date) {
    console.log(artist)

    const aritstNameEl = document.createElement('b')
    const titleEl = document.createElement('i')
    const objectDateEl = document.createElement('span')

    aritstNameEl.textContent = artist
    titleEl.textContent = title + ", "
    objectDateEl.textContent = date

    el.append(
        aritstNameEl, 
        document.createElement('br'), 
        titleEl, 
        objectDateEl
    )
    return el
}

export class SearchTextContainer {
    

    
    

    

    
}

export class CartItemContainer {
    

    

    
}export class Artwork {
    
}

export var SearchValues = {
    serialize : ,
    parse : 
}export class CartItem {
    
}import { CartItem } from "./CartItem.js";

export 

export 

export 

export function getAll() {
    return JSON.parse(localStorage.getItem("cart")) ?? []
}

export 

export 

export function diplayCartItems() {
    document.querySelector('#cart-link').textContent = `Cart (${getAll().length})`
}import { render, getPrintSizes, calculatePrice } from './frame.js'
import { addToCart, diplayCartItems } from './cart.js'
import { getObjectCached } from './artwork-api.js'
import { appendDescription, createArtworkImage } from './artwork-dom.js'

let printSizes, selectedPrintSize, frameStyle, frameWidth, matColor, matWidth, objectId

window.addEventListener('load', async () => {
    diplayCartItems()    

    const [url, params] = window.location.href.split('?')
    const urlParams = new URLSearchParams(params);
    objectId = urlParams.get('objectID');
    selectedPrintSize = urlParams.get('printSize')
    frameStyle = urlParams.get('frameStyle')
    frameWidth = urlParams.get('frameWidth')
    matColor = urlParams.get('matColor')
    matWidth = urlParams.get('matWidth')

    updateInputs()

    console.log(objectId)

    if(objectId == null) 
    await loadImage(objectId);
	
	const frameSlider = document.querySelector("#frameSlider")
	const frameInput = document.querySelector("#frameInput")
	
	frameSlider.addEventListener("change",  )
	
	frameInput.addEventListener("change",  )
	
	const matSlider = document.querySelector("#matSlider")
	const matInput = document.querySelector("#matInput")
	
	matSlider.addEventListener("change",  )
	
	matInput.addEventListener("change", () => {
        matInput.value = Math.round(Math.min(Math.max(matInput.value, 0), 10) * 10)/10
		matSlider.value = Math.round(Math.min(Math.max(matInput.value, 0), 10) * 10)/10
	} )
	
	document.querySelector('#config-form').addEventListener("change", () => {
		updatePreview()
    } )

    document.querySelector('#config-form').addEventListener("submit", onAddToCart, false)
	
	
})


function updatePreview(){
	
	const printSize = document.querySelector('#config-form').printSize.value 
	const frameWidth = document.querySelector('#config-form').frameWidth.value 
	const frameStyle = document.querySelector('#config-form').frameStyle.value 
	const matColor = document.querySelector('#config-form').matColor.value  
	const matWidth = document.querySelector('#config-form').matWidth.value 
	const img = document.querySelector('#preview-image')
	const container = document.querySelector('#preview-container')

    const price = document.querySelector('#price')
	
	render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth)
	
	const total = document.querySelector('#total-size')
	
	const totalWidth = printSizes[printSize][0]+frameWidth*2+matWidth*2
	const totalHeight = printSizes[printSize][1]+frameWidth*2+matWidth*2
	
	total.textContent = `${Math.round(totalWidth)} x ${Math.round(totalHeight)} cm`

    price.innerHTML = 'â‚¬ ' + calculatePrice(printSize, frameStyle, frameWidth, matWidth).toLocaleString(undefined, {minimumFractionDigits: 2})
}



function updateInputs() {
    if(selectedPrintSize != null) 
    if(frameWidth != null) 

    if(matColor != null) 

    if(matWidth != null) 
	
	if(frameStyle != null) 
    
}

async function loadImage(objectId) {
    let responseBody
    try {
        responseBody = await getObjectCached(objectId)
    } 
    const image = createArtworkImage(responseBody)

    const previewImageEl = document.querySelector('#preview-image')
    const previewLabelEl = document.querySelector('#image-label')

    previewImageEl.src = responseBody.primaryImageSmall
    previewImageEl.alt = responseBody.title

    appendDescription(previewLabelEl, responseBody.artistDisplayName, responseBody.title, responseBody.objectDate)

    image.addEventListener('load', () => {
        printSizes = getPrintSizes(image)

        const slabelEL = document.querySelector('#print-size-s-label')
        slabelEL.lastChild.textContent = printSizeToString(printSizes.S)
        const mlabelEl = document.querySelector('#print-size-m-label')
        mlabelEl.lastChild.textContent = printSizeToString(printSizes.M)
        const llabelEl = document.querySelector('#print-size-l-label')
        llabelEl.lastChild.textContent = printSizeToString(printSizes.L)
		
		updatePreview()
    })
}

function printSizeToString(printSize) {
    return `${printSize[0]} x ${printSize[1]} cm`
}

export 

export 

export 

export 

export 

export export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    let smallPrice = 30.0;
    switch(frameStyle) {
        
        case 'natural':
            smallPrice += frameWidth*0.8;
            break;
        
        
        
    }
    smallPrice += matWidth*0.05;
    switch(printSize) {
        
        case 'M':
            price = 2*smallPrice;
            break;
        
        
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
