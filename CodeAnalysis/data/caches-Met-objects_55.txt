import * as Frame from "./frame.js"

const objectsAPI = "https://collectionapi.metmuseum.org/public/collection/v1/objects/"
var totalPrice = 0;

async function createCartItem(cartItem){
    let data;
    let cache = window.sessionStorage.getItem(cartItem.objectID)
    try {
        if(cache == null) else {
            data = JSON.parse(cache);
        }
        if(true){
            let itemPrice = Frame.calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth);
            totalPrice += itemPrice;

            const cartContainer = document.getElementById("cart");

            let cartItemDiv = document.createElement("div");
            cartItemDiv.className = "cart-item";
            cartItemDiv.id = cartItem.objectID

            let cartPreviewDiv = document.createElement("div");
            cartPreviewDiv.className = "cart-preview";
            cartPreviewDiv.id = "preview-container-" + cartItem.objectID;

            let anchor = document.createElement("a");
            anchor.href = `./config.html?objectID=${cartItem.objectID}&printSize=${cartItem.printSize}&frameStyle=${cartItem.frameStyle}&frameWidth=${cartItem.frameWidth}&matColor=${cartItem.matColor}&matWidth=${cartItem.matWidth}`;
            let image = document.createElement("img");
            anchor.appendChild(image);
            cartPreviewDiv.appendChild(anchor);

            image.src = data.primaryImageSmall;
            image.className = "cart-thumb";
            image.id = "preview-" + cartItem.objectID;
            image.alt = data.title;



            let museumLabelDiv = document.createElement("div");
            museumLabelDiv.className = "museum-label";

            let paintingInfoDiv = document.createElement("div");

            let artistSpan = document.createElement("span");
            artistSpan.textContent = data.artistDisplayName;
            artistSpan.className = "artist"

            let titleSpan = document.createElement("span");
            titleSpan.textContent = data.title;
            titleSpan.className = "title"

            let dateSpan = document.createElement("span");
            dateSpan.className = "date"
            dateSpan.textContent = data.objectDate;

            let frameDescriptionSpan = document.createElement("span");
            frameDescriptionSpan.className = "frame-description"
            frameDescriptionSpan.textContent =
            frameDescriptionText(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth);

            paintingInfoDiv.appendChild(artistSpan)
            paintingInfoDiv.appendChild(titleSpan)
            paintingInfoDiv.appendChild(dateSpan)
            paintingInfoDiv.appendChild(document.createElement("br"))
            paintingInfoDiv.appendChild(document.createElement("br"))
            paintingInfoDiv.appendChild(frameDescriptionSpan)
            titleSpan.insertAdjacentText('afterend', ", ")

            let cartPriceDiv = document.createElement("div")
            cartPriceDiv.textContent = "€ "
            cartPriceDiv.className = "cart-price"
            let priceSpan = document.createElement("span")
            priceSpan.id = "price-"+ cartItem.objectID
            priceSpan.textContent = itemPrice
            cartPriceDiv.appendChild(priceSpan)
            paintingInfoDiv.appendChild(cartPriceDiv)

            let removeButton = document.createElement("button")
            removeButton.className = "cart-remove"

            cartItemDiv.appendChild(cartPreviewDiv)
            cartItemDiv.appendChild(museumLabelDiv)
            cartItemDiv.appendChild(cartPriceDiv)
            museumLabelDiv.appendChild(paintingInfoDiv)
            museumLabelDiv.appendChild(cartPriceDiv)
            museumLabelDiv.appendChild(removeButton)
            cartContainer.insertBefore(cartItemDiv, cartContainer.firstChild)

            image.onload = Frame.render(image, cartPreviewDiv, cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth)
            removeButton.addEventListener("click", )
        }
    } 
}

function frameDescriptionText(printSize, frameStyle, frameWidth, matColor, matWidth){
    let text = "";

    switch(printSize){
        
        
        case('L'):
            text += "Large print"
            break;
    }

    text += ` in a ${frameWidth/10} cm ${frameStyle} frame`;

    text += (matColor && matWidth) ? ` with a ${matWidth/10} cm ${matColor} mat.` ;

    return text;
}



async function createAllCartItems(){
    checkEmpty()

    let cart = JSON.parse(window.localStorage.getItem("cart"))

    for(let item in cart){
        await createCartItem(cart[item]);
    }

    document.getElementById("price-total").innerText = totalPrice;
    cartLinkCounter()
    document.getElementById("checkout-button").disabled = false;
}

function checkEmpty(){
    if(JSON.parse(window.localStorage.getItem("cart")).length == 0) else {
        document.getElementById("cart-empty").style.visibility = "hidden"
        document.getElementById("checkout-button").disabled = false;
    }
}

function cartLinkCounter(){
    let numberOfItems = JSON.parse(window.localStorage.getItem("cart")).length
    if(numberOfItems == 0) else {
        document.getElementById("cart-link").innerText = `Cart (${numberOfItems})`
    }

}

document.getElementById("checkout-button").disabled = true;
createAllCartItems()
import {calculatePrice} from "./frame.js";

document.addEventListener('DOMContentLoaded',init,false);
let previewImg;
let artObj;
async function init() {
    cartLinkCounter();
    const frameSlider = document.getElementById('frameWidthR');
    const frameWidth = document.getElementById('frameWidth');
    const matSlider = document.getElementById('matWidthR');
    const matWidth = document.getElementById('matWidth');
    frameWidth.addEventListener('change', synchronizeFrame);
    frameSlider.addEventListener('change', synchronizeFrame);
    matWidth.addEventListener('change',synchronizeMat);
    matSlider.addEventListener('change',synchronizeMat);
    const urlParams = new URLSearchParams(window.location.search);
    setValues(urlParams.get('printSize'),urlParams.get('frameStyle'),urlParams.get('frameWidth'),urlParams.get('matColor'),urlParams.get('matWidth'));
    const inputElems = document.getElementsByTagName('input');
    for (let i = 0;i<inputElems.length;i++) {
        inputElems[i].addEventListener('input',updateRendering);
    }
    if(urlParams.get('objectID') === undefined || urlParams.get('objectID') === null) 
    artObj = await getArtObj(urlParams.get('objectID'));
    if(!artObj) 
    document.getElementById('preview-image').src = artObj.primaryImage;
    const imgObj = document.getElementById('preview-image');
    imgObj.src = artObj.primaryImageSmall;
    document.getElementById('image-label').innerHTML = `<b>${artObj.artistDisplayName}</b></br><i>${artObj.title}</i>, ${artObj.objectDate}`
    previewImg = await loadImg(imgObj);
    setSizes(previewImg);
    updateRendering();

}
export async function getArtObj(objectID) {
    let artObj = null;
    let artCache = JSON.parse(window.localStorage.getItem("artCache"));
    if (artCache!=null) {
        console.log("Cache exists");
        artObj = artCache[objectID];
    }
    if (artObj != null) {
        console.log("From cache");
        return artObj;
    }}
export async function loadImg(artObj) {
    return new Promise(((resolve, reject) => {
        let img = artObj;
        img.onload = () => resolve(img)
        img.onerror = reject
    }))
}

function updateRendering(onlyPrice = false) {
    const frameWidth = document.getElementById('frameWidth').value * 10;
    const matWidth = document.getElementById('matWidth').value * 10;
    const price = calculatePrice(getRadioButtonValue('printSize'),
        getRadioButtonValue('frameStyle'), frameWidth, matWidth)
    document.getElementById('price').innerText = `€ ${Number.parseFloat(price).toFixed(2)}`;
    const dims = getPrintSizes(previewImg);
    let totalWidth = frameWidth + matWidth;
    let totalHeight = frameWidth + matWidth;
    switch (getRadioButtonValue('printSize')) {
        
        case 'M':
            totalWidth += dims.M[0];
            totalHeight += dims.M[1];
            break;
        
    }
    document.getElementById('total-size').innerText = `${totalWidth / 10} × ${totalHeight / 10}`;
    render(document.getElementById('preview-image'),
        document.getElementById('preview-container'),
        getRadioButtonValue('printSize'),
        getRadioButtonValue('frameStyle'),
        document.getElementById('frameWidth').value * 10,
        getRadioButtonValue('matColor'),
        document.getElementById('matWidth').value * 10);
}

function getRadioButtonValue(name) {
    var radios = document.getElementsByName(name);

    for (var i = 0, length = radios.length; i < length; i++) {
        if (radios[i].checked) {
            return radios[i].value;
        }
    }}

function setSizes(img) {
    const sizes = getPrintSizes(img);
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${sizes.S[0] / 10} × ${sizes.S[1] / 10}`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${sizes.M[0] / 10} × ${sizes.M[1] / 10}`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${sizes.L[0] / 10} × ${sizes.L[1] / 10}`;
}
function setValues(printSize = 'M', frameStyle = 'natural', frameWidth = 38, matColor = 'mint', matWidth = 89) {
    switch (printSize) {
        
        
        default: document.getElementById('print-size-m').checked = true;break;
    }
    switch (frameStyle) {
        
        
        
        default: document.getElementById('frame-style-natural').checked = true;break;
    }
    switch (matColor) {
        
        
        
        
        default: document.getElementById('mat-color-mint').checked = true;break;
    }
    if (isNaN(frameWidth)) 
    setFrameWidth(frameWidth / 10);
    if (isNaN(matWidth)) 
    setMatWidth(matWidth / 10);
}

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}


function setFrameWidth(value) {
    if (value>5)  else if (value < 2) {
        value = 2
    }
    value = Math.round(value * 10) / 10;
    document.getElementById('frameWidth').value=value;
    document.getElementById('frameWidthR').value=value;
}

function setMatWidth(value) {
    if (value>10)  else if (value < 0) 
    value = Math.round(value * 10) / 10;
    document.getElementById('matWidth').value=value;
    document.getElementById('matWidthR').value=value;
}
function cartLinkCounter(){
    let numberOfItems = JSON.parse(window.localStorage.getItem("cart")) != null  : 0
    if(numberOfItems == 0){
        document.getElementById("cart-link").innerText = `Cart`
    }

}
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    frameWidth /= 10;
    matWidth /= 10;

    let price = 30;
    let matPrice = 0.05;
    let framePrice;

    let printSizeFactor = printSize == 'S'  : printSize == 'M'  : printSize == 'L' ? 3.5 

    switch(frameStyle){
        
        
        case "shabby":
            framePrice = 0.9;
            break;
        case "elegant":
            framePrice = 0.85;
            break;
    }

    price = (price + ((framePrice * frameWidth) + (matPrice * matWidth))) * printSizeFactor;

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}
const inputValue = document.querySelector("#search");
const searchButton = document.querySelector("#search-button");
const searchInfo = document.querySelector("#search-info");
const galleryContainer = document.getElementById("gallery");

/*Add an artwork to the specified container in the document*/
async function addArtworkToDocument(artwork) {
  let data = artwork;
  try {
    let thumb = document.createElement("div");
    thumb.className = "thumb";

    let currentObj = document.createElement("a");
    currentObj.id = "object-" + artwork.objectID;
    currentObj.href = `./config.html?objectID=${artwork.objectID}`;

    let imgContainer = document.createElement("img");
    imgContainer.src = data.primaryImageSmall;
    imgContainer.alt = data.title;
    imgContainer.id = "object-image-" + artwork.objectID;

    let museumLabelContainer = document.createElement("div");
    museumLabelContainer.className = "museum-label";

    let artistContainer = document.createElement("span");
    artistContainer.textContent = data.artistDisplayName;
    artistContainer.className = "artist";

    let titleContainer = document.createElement("span");
    titleContainer.textContent = data.title;
    titleContainer.className = "title";

    let dateContainer = document.createElement("span");
    dateContainer.textContent = ", " + data.objectDate;
    dateContainer.className = "date";

    museumLabelContainer.appendChild(artistContainer);
    museumLabelContainer.appendChild(titleContainer);
    museumLabelContainer.appendChild(dateContainer);
    currentObj.appendChild(imgContainer);
    currentObj.appendChild(museumLabelContainer);
    thumb.appendChild(currentObj);
    galleryContainer.appendChild(thumb);
  } 
}
const urlParams = new URLSearchParams(window.location.search);
let searchTerm = urlParams.get('q');
console.log(searchTerm);
cartLinkCounter();
inputValue.addEventListener("input", );
fetchArtworks(searchTerm);

/*Get all artwork IDs that match the search parameters*/
async function fetchArtworks(searchTerm) {
  if (searchTerm == null||searchTerm == "") 
  searchTerm = searchTerm.replace('+',' ');
  searchInfo.innerText = "Searching for “" + searchTerm + "”...";
  let url = `https://collectionapi.metmuseum.org/public/collection/v1/search?q="${searchTerm}"`;
  const api_call = await fetch(url);
  if(!api_call) 
  const artworks = await api_call.json();
  let i = 0;
  if (artworks.total==0) 
   else {
  for(let artwork of artworks.objectIDs) {
    getArtObj(artwork).then(artObj => {
      if (artObj.primaryImageSmall != null) {
        addArtworkToDocument(artObj);
      }
    });
    if(i++ >= 99) 
  }
  if (i == 1)  else searchInfo.innerText = "Found " + i +" artworks for “" + searchTerm + "”";
}
}
export async function getArtObj(objectID) {
    let artObj = null;
    let artCache = JSON.parse(window.localStorage.getItem("artCache"));
    if (artCache!=null) {
        artObj = artCache[objectID];
    }
    if (artObj != null) 
    const imgResponse = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`);
    artObj = await imgResponse.json();
    if(imgResponse.status!==200) 
    if (artCache == null) 
    artCache[objectID] = artObj;
    window.localStorage.setItem("artCache",JSON.stringify(artCache));
    return artObj;
}
searchButton.addEventListener("click", );
function cartLinkCounter(){
  let numberOfItems = JSON.parse(window.localStorage.getItem("cart")) != null  : 0
    if(numberOfItems == 0){
        document.getElementById("cart-link").innerText = `Cart`
    }

}
