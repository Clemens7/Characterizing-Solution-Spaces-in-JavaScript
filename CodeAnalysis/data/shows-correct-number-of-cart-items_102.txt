
                
            import {render} from "./frame.js";
import {calculatePrice} from "./frame.js";

let cart = JSON.parse(localStorage.getItem("cart"));
let itemJSON;
let totalP = 0;

document.getElementById("cart-item-0").remove();

if (cart != null) {
    displayCart(cart.length);
}

async function displayCart(cart_length) {

    if (localStorage.getItem("cart") !== null) {
        document.getElementById("cart-link").innerText = `Cart (${cart_length})`;
    }

    let cart_total = document.getElementById("cart-total");

    for (let i = 0; i < cart_length; i++) 


    document.getElementById("price-total").innerText = `${totalP}`;

}

export 








import * as FrameHelper from "./frame.js"

let artworkProperties = {};
let objectID;

getArtwork();
updateSliderFrameWidth();
updateSliderMatWidth();
addToCart();


async function getArtwork() {

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    objectID = urlParams.get('objectID');

    if (objectID === null) 

    let artworkJSON;

    if (localStorage.getItem(objectID)) {
        artworkJSON = JSON.parse(localStorage.getItem(objectID));
    }

    if(artworkJSON.message === "ObjectID not found")

    const img = document.getElementById("preview-image");
    img.src = artworkJSON.primaryImageSmall;
    img.alt = "Artwork";

    artworkProperties.printSize =  urlParams.get("printSize")  : document.querySelector('input[name="printSize"]:checked').value;
    artworkProperties.frameWidth =  urlParams.get("frameWidth")  : document.getElementById("frameWidth").value*10;
    artworkProperties.frameStyle = urlParams.get("frameStyle")  : document.querySelector(`input[name="frameStyle"]:checked`).value;
    artworkProperties.matWidth =  urlParams.get("matWidth")  : document.getElementById("matWidth").value*10;
    artworkProperties.matColor =  urlParams.get("matColor")  : document.querySelector('input[name="matColor"]:checked').value;

    img.addEventListener("load", () => {
        setPrintSizes(img);
        changeFrameOnUpdate(artworkProperties);
        let itemsInCart = JSON.parse(localStorage.getItem('cart'));
        if(localStorage.getItem("cart") !== null && itemsInCart.length != 0)
    });

    const artist = artworkJSON.artistDisplayName;
    const description = artworkJSON.title;
    const date = artworkJSON.objectDate;
    const imgLabel = document.getElementById("image-label");
    const boldElementForArtist = document.createElement("b");
    const newLineElementForLabel = document.createElement("br");

    boldElementForArtist.innerText = artist;
    imgLabel.appendChild(boldElementForArtist);
    imgLabel.appendChild(newLineElementForLabel);
    imgLabel.append(description + ", " + date);

    addListenersToProperties(artworkProperties);
    changeFrameOnUpdate(artworkProperties);
}

function updateSliderFrameWidth() {
    const sliderFrameWidth = document.getElementById("frameWidthR");
    const frameWidthInput = document.getElementById("frameWidth");

    frameWidthInput.value = sliderFrameWidth.value;

    sliderFrameWidth.onchange = ;

    frameWidthInput.onchange = 
}

function updateSliderMatWidth() {
    const sliderMatWidth = document.getElementById("matWidthR");
    const matWidthInput = document.getElementById("matWidth");

    matWidthInput.value = sliderMatWidth.value;

    sliderMatWidth.onchange = ;

    matWidthInput.onchange = 
}

function setPrintSizes(img) {
    const calculatedPrintSizes = FrameHelper.getPrintSizes(img);
    document.getElementById("print-size-s-label").innerText = "Small\n" + calculatedPrintSizes.S[0] / 10 + " x " + calculatedPrintSizes.S[1] / 10 + " cm";
    document.getElementById("print-size-m-label").innerText = "Medium\n" + calculatedPrintSizes.M[0] / 10 + " x " + calculatedPrintSizes.M[1] / 10 + " cm";
    document.getElementById("print-size-l-label").innerText = "Large\n" + calculatedPrintSizes.L[0] / 10 + " x " + calculatedPrintSizes.L[1] / 10 + " cm";
}

function addListenersToProperties(artworkProperties) {

    for(let property in artworkProperties){
        if(artworkProperties.hasOwnProperty(property)){
            document.getElementsByName(property).forEach(item => {
                item.addEventListener("change", )
            });
        }
    }

    document.getElementById("frameWidthR").addEventListener(
        "change", );

    document.getElementById("matWidthR").addEventListener(
        "change",  );
}

function correctFrameWidth(value){
    return value > 5 ? 50 ;
}

function correctMatWidth(value){
    return value > 10 ? 100 ;
}

function changeFrameOnUpdate({printSize, frameStyle, frameWidth, matColor, matWidth}) {

    const img = document.getElementById("preview-image");

    document.querySelector(`input[name="printSize"][value=${printSize}]`).checked = true;
    document.querySelector(`input[name="frameStyle"][value=${frameStyle}]`).checked = true;
    document.querySelector(`input[name="matColor"][value=${matColor}]`).checked = true;

    frameWidth = correctFrameWidth(frameWidth);
    document.querySelector('input[name="frameWidth"]').value = frameWidth / 10;//frameWidth / 10;
    document.querySelector('input[name="frameWidthR"]').value = frameWidth / 10;

    matWidth = correctMatWidth(matWidth);
    document.querySelector('input[name="matWidth"]').value = matWidth/10;
    document.querySelector('input[name="matWidthR"]').value = matWidth/10;

    FrameHelper.render(img, img.parentElement, printSize, frameStyle, frameWidth, matColor, matWidth);

    document.getElementById("price").innerText = "â‚¬ " + FrameHelper.calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2);

    const sizes = FrameHelper.getPrintSizes(img);
    const size = sizes[printSize];
    const featureSize = Math.round((frameWidth + matWidth) / 10);
    document.getElementById("total-size").innerText = (size[0]/10 + featureSize) + " x " + (size[1]/10 + featureSize) + " cm";
}

function addToCart() {

     document.getElementById("addToCartButton").onclick = 
}
export 

export 

export 
const SPAN_CLASS = {
    ARTIST : 'artist',
    TITLE : 'title',
    DATE : 'date'
};
const DIV_CLASS = {
    MUSEUM_LABEL : 'museum-label',
    THUMB : 'thumb'
};
const ATTRIBUTE = {
    CLASS: 'class',
    ID: 'id',
    ALT: 'alt',
    SRC: 'src',
    HREF: 'href'
};
const TAG = {
    DIV : 'div',
    SPAN : 'span',
    IMG : 'img',
    A : 'a'
};

const MET_API_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/';
const OBJECT_EP = 'objects/';
const SEARCH_EP = 'search';

const GALLERY_ID = 'gallery';
const OBJ_IMG_ID = 'object-image-';
const LNK_ID = 'object-';
const CONF_LNK = './config.html';
const SEARCH_PARAM = '?q=';
const SEARCH_INFO = 'search-info';

function create_gallery_item_from_json(met_obj, item_nr){
    let artist_node = document.createElement(TAG.SPAN);
    artist_node.setAttribute(ATTRIBUTE.CLASS, SPAN_CLASS.ARTIST);
    let artist_txt = document.createTextNode(met_obj.artistDisplayName);
    artist_node.appendChild(artist_txt);
    let title_node = document.createElement(TAG.SPAN);
    title_node.setAttribute(ATTRIBUTE.CLASS, SPAN_CLASS.TITLE);
    let title_txt = document.createTextNode(met_obj.title);
    title_node.appendChild(title_txt);
    let date_node = document.createElement(TAG.SPAN);
    date_node.setAttribute(ATTRIBUTE.CLASS, SPAN_CLASS.DATE);
    let date_txt = document.createTextNode(met_obj.objectDate);
    date_node.appendChild(date_txt);

    let label_node = document.createElement(TAG.DIV);
    label_node.setAttribute(ATTRIBUTE.CLASS,DIV_CLASS.MUSEUM_LABEL);
    label_node.appendChild(artist_node);
    label_node.appendChild(title_node);
    label_node.appendChild(document.createTextNode(', '));
    label_node.appendChild(date_node);

    let img_node = document.createElement(TAG.IMG);
    img_node.setAttribute(ATTRIBUTE.SRC, met_obj.primaryImageSmall);
    img_node.setAttribute(ATTRIBUTE.ALT, met_obj.title);
    img_node.setAttribute(ATTRIBUTE.ID, OBJ_IMG_ID + item_nr);

    let a_node = document.createElement(TAG.A);
    a_node.setAttribute(ATTRIBUTE.HREF,CONF_LNK + '?objectID=' + met_obj.objectID);
    a_node.setAttribute(ATTRIBUTE.ID,LNK_ID + item_nr);
    a_node.appendChild(img_node);
    a_node.appendChild(label_node);

    let thumb_node = document.createElement(TAG.DIV);
    thumb_node.setAttribute(ATTRIBUTE.CLASS, DIV_CLASS.THUMB);
    thumb_node.appendChild(a_node);

    return thumb_node;
}

async function show_highlights() {
    fetch('highlights.json')
        .then((response) => {
            return response.json();
        }).then((highlights) => {
            return highlights.highlights;
        }).then((ids) => {
            let gallery = document.getElementById(GALLERY_ID);

            let item_nr = 0;
            for (const id of ids) {
              if (localStorage.getItem(id) == null)  else {
                gallery.appendChild(create_gallery_item_from_json(JSON.parse(localStorage.getItem(id), item_nr)));
                item_nr++;
              }
            }
        });
}





async function init(){
    let itemsInCart = JSON.parse(localStorage.getItem('cart'));
    if (localStorage.getItem('cart') !== null && itemsInCart.length != 0) 
    const href = unescape(window.location.href).replace('+', ' ');
    const query = href.split(SEARCH_PARAM);

    if(query.length === 1) {
        await show_highlights();
    }
}

window.addEventListener("load", init);
