import {updateCartNavigationItemCount} from "./common.js";

export 

export 

export function readCart() {
    let cart = localStorage.getItem('cart');
    if (!cart) 
    return JSON.parse(cart);
}

export 

export class CartObject {
    
}
    import {updateCartNavigationItemCount} from "./common.js";
    import {addCartObjectToCartView} from "./cart.js";

    updateCartNavigationItemCount();
    addCartObjectToCartView();
  import {calculatePrice, render} from "./frame.js";
import {getObject} from "./common.js";
import {readCart, removeFromCart} from "./cart-model.js";

export 

function checkAndSetNoItemsText() {
    let list = readCart();
    if (list.length === 0) 
}

export async function addCartObjectToCartView() {
    let list = readCart();
    let f = 0;

    checkAndSetNoItemsText();

    for (let i of list) {
        let item = await getObject(i.objectID);
        if (!item) 
        let cart = document.getElementById("cart");

        let clone = document.getElementById("cart-item-template").content.cloneNode(true);
        clone.querySelectorAll("div[class='cart-preview']")[0].id = "preview-container-" + f;
        clone.querySelectorAll("img[class='cart-thumb']")[0].id = "preview-" + f;
        clone.querySelectorAll("button[class='cart-remove']")[0].addEventListener("click", removeItemFromCartEventListener);
        clone.querySelectorAll("button[class='cart-remove']")[0].id = "" + f;
        clone.querySelectorAll("div[class='cart-item']")[0].id = "item_" + f;
        clone.querySelectorAll("span[class='artist']")[0].innerText = item.artistDisplayName;
        clone.querySelectorAll("span[class='title']")[0].innerText = item.title;
        clone.querySelectorAll("span[class='date']")[0].innerText = item.objectDate;

        let descriptionString = "";
        switch (i.printSize) {
            case "M":
                descriptionString += "Medium ";
                break;
            case "S":
                descriptionString += "Small ";
                break;
            
        }
        descriptionString += "print in a " + Math.round(Math.max(Math.min(i.frameWidth / 10, 10), 0) * 10) / 10 + " cm " + i.frameStyle + " frame";
        if (i.matWidth > 0) {
            descriptionString += " with a " + Math.round(Math.max(Math.min(i.matWidth / 10, 10), 0) * 10) / 10 + " cm " + i.matColor + " mat"
        }
        descriptionString += ".";

        clone.querySelectorAll("span[class='frame-description']")[0].innerText = descriptionString;
        clone.querySelectorAll("span[id='price-0']")[0].innerText = calculatePrice(i.printSize, i.frameStyle, i.frameWidth, i.matWidth);

        let renderImage = clone.querySelector("#preview-" + f);
        renderImage.src = item.primaryImageSmall;
        let clonePreviewContainer = clone.querySelector("#preview-container-" + f);
        cart.insertBefore(clone, cart.firstChild);
        let queryString = "?objectID=" + i.objectID;
        queryString += "&printSize=" + i.printSize;
        queryString += "&frameStyle=" + i.frameStyle;
        queryString += "&frameWidth=" + i.frameWidth;
        queryString += "&matColor=" + i.matColor;
        queryString += "&matWidth=" + i.matWidth;
        document.getElementById("preview-container-" + f).getElementsByTagName("a")[0].href = "config.html" + queryString;
        render(renderImage, clonePreviewContainer, i.printSize, i.frameStyle, i.frameWidth, i.matColor, i.matWidth);
        f += 1;
    }

    calculateTotal();
}

function calculateTotal() {
    let amount = 0;
    for (let item of document.getElementsByClassName("cart-price")) {
        amount += +item.lastChild.innerText;
    }
    let totalPrice = document.getElementById("price-total");
    if (totalPrice) {
        totalPrice.innerText = "" + amount.toFixed(2);
    }
}

import {readCart} from "./cart-model.js";

const BASE_URL = "https://collectionapi.metmuseum.org/public/collection/v1/";

export async function getObject(objectID) {
    let object = JSON.parse(localStorage.getItem(objectID));

    if (!object) 
    return object;
}

export 

export function updateCartNavigationItemCount(items = null) {
    let elem = document.getElementById("cart-link");
    if (elem) {
        let count = getCartItemCount(items);
        let str = "Cart";
        if (count > 0) {
            str += ` (${count})`;
        }
        elem.innerText = str;
    }
}

function getCartItemCount(items = null) {
    if (items) 
    return readCart().length
}
    import {updateCartNavigationItemCount} from "./common.js";

    updateCartNavigationItemCount();
  import * as FrameHelper from "./frame.js";
import {getObject} from "./common.js";
import {addToCart} from "./cart-model.js";

const params = new URLSearchParams(window.location.search);
const form = document.getElementById("config-form");
document.getElementById("print-size-row").addEventListener("change", updatePage);
document.getElementById("frame-style-row").addEventListener("change", updatePage);
document.getElementById("mat-color-row").addEventListener("change", updatePage);

getObject(params.get("objectID")).then(object => {
    if (object === null) 

    document.getElementById("object-id").value = object.objectID;
    document.getElementById("preview-image").src = object.primaryImageSmall;
    document.getElementById("image-label").innerText = `${object.title}, ${object.artistDisplayName} (${object.objectDate})`
    document.getElementById("preview-image").onload = function () {
        updatePage();
    }
});

if (params.get("printSize")) 
if (params.get("frameStyle")) 
if (params.get("frameWidth")) 
if (params.get("matColor")) 
if (params.get("matWidth")) 



document.getElementById("mat-width-text").addEventListener("change", );
document.getElementById("mat-width-slider").addEventListener("change", );
document.getElementById("mat-width-slider").addEventListener("input", );
document.getElementById("frame-width-text").addEventListener("change", );
document.getElementById("frame-width-slider").addEventListener("change", );
document.getElementById("frame-width-slider").addEventListener("input", );
document.getElementById("mat-width-text").addEventListener("blur", );
document.getElementById("frame-width-text").addEventListener("blur", );

function updatePage() {
    const image = document.getElementById("preview-image");

    const printSizes = FrameHelper.getPrintSizes(image);
    document.getElementById("small-size").innerText = `${printSizes["S"][0] / 10} × ${printSizes["S"][1] / 10} cm`;
    document.getElementById("medium-size").innerText = `${printSizes["M"][0] / 10} × ${printSizes["M"][1] / 10} cm`;
    document.getElementById("large-size").innerText = `${printSizes["L"][0] / 10} × ${printSizes["L"][1] / 10} cm`;

    const printSize = form["printSize"].value;
    const frameWidth = form["frameWidth"].value * 10;
    const matWidth = form["matWidth"].value * 10;
    const frameStyle = form["frameStyle"].value;
    const matColor = form["matColor"].value;

    const borderWidth = 2 * matWidth + 2 * frameWidth;
    const totalWidth = printSizes[printSize][0] + borderWidth;
    const totalHeight = printSizes[printSize][1] + borderWidth;
    document.getElementById("total-size").innerText = `${totalWidth} × ${totalHeight} cm`;

    const previewContainer = document.getElementById("preview-container");
    FrameHelper.render(image, previewContainer, printSize, frameStyle, frameWidth, matColor, matWidth);

    const price = FrameHelper.calculatePrice(printSize, frameStyle, frameWidth, matWidth);
    document.getElementById("price").innerText = `€ ${price.toFixed(2)}`
}

form.addEventListener("submit", )
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const frameCosts = {
        "classic": 1,
        "shabby": 0.9,
        "elegant": 0.85,
        "natural": 0.8,
    };
    const sizeMult = {
        "S": 1,
        "M": 2,
        "L": 3.5,
    }

    const price = (30 + frameWidth / 10 * frameCosts[frameStyle] + 0.05 * matWidth / 10) * sizeMult[printSize];
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

        import {updateCartNavigationItemCount} from "./common.js";
        import {init} from './search.js';

        updateCartNavigationItemCount();
        init();
    import {search, getObject} from './common.js'

export async function init() {
    let searchParams = new URLSearchParams(window.location.search);
    try {
        await performSearch(searchParams.get('q'));
    } 
}

function setSearchQuery(q) {
    document.getElementById('search').setAttribute('value', q);
}

function addSearchResult(o) {
    let divThumb = document.createElement('div');
    divThumb.className = 'thumb';
    let a = document.createElement('a');
    a.id = `object-${o.objectID}`;
    a.href = `config.html?objectID=${encodeURIComponent(o.objectID)}`;
    divThumb.appendChild(a);

    let img = document.createElement('img');
    img.src = o.primaryImageSmall;
    img.alt = o.objectName;
    img.id = `object-image-${o.objectID}`;
    a.appendChild(img);

    let divLabel = document.createElement('div');
    divLabel.className = 'museum-label';
    divThumb.appendChild(divLabel);

    function addSpan(c, t) {
        let span = document.createElement('span');
        span.className = c;
        span.innerText = t;
        divLabel.appendChild(span)
    }

    addSpan('artist', o.artistDisplayName);
    addSpan('title', o.title);
    addSpan('date', `, ${o.objectDate}`);

    document.getElementById('gallery').appendChild(divThumb)
}

function updateSearchStatusMessage(t) {
    document.getElementById('search-info').innerText = t
}

async function performSearch(q) {
    let searchResult;
    if (q) {
        setSearchQuery(q);
        updateSearchStatusMessage(`Searching for “${q}”...`);
        try {
            searchResult = await search(q);
        } 
    }
    try {
        await Promise.all(searchResult.objectIDs.map(id => {
            return getObject(id).then(addSearchResult);
        }));
    } 
    if (q) {
        updateSearchStatusMessage(`Found ${searchResult.total} artwork${searchResult.total === 1  : 's'} for “${q}”`);
    }
}
