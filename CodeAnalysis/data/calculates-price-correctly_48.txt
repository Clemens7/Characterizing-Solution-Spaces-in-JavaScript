const baseURI = "https://collectionapi.metmuseum.org/public/collection/v1/";
export const API = {
    SEARCH: baseURI + "search?q=",
    OBJECTS: baseURI + 'objects/',
    HIGHLIGHTS: 'highlights.json'
}
import StorageHandler from './storage-handler.js';
import {getPrintSizes, calculatePrice, render} from "./frame.js";
import {} from "./config.js";
import {API} from "./api.js";
let IDs = [];

window.onload = ;







export function showItemsDynamically() {
    const cart = document.getElementById("cart-link");

    cart.innerText = "Cart (" + StorageHandler.getCartSize() + ")";

    return cart;
}













import StorageHandler from './storage-handler.js';
import {render, getPrintSizes, calculatePrice} from "./frame.js";
import {searchByObjectIDs} from "./search.js";
import {showItemsDynamically} from "./cart.js";

window.onload = function () {
    init();
    document.getElementById('config-form').onsubmit = ;
    showItemsDynamically();
};

function init() {
    const objectID = readURLParam('objectID');
    if (objectID === null) 
    searchByObjectIDs([+objectID]).then(items => {
        const item = items[0];
        if (item.message) 
        setupListeners(item);
        const img = document.getElementById('preview-image');
        img.src = item.primaryImageSmall;
        renderPreview(item);
        addLabelText(item.artistDisplayName, item.title, item.objectDate);
    });

    const printSize = validatePrintSize(readURLParam('printSize'));
    const frameStyle = validateFrameStyle(readURLParam('frameStyle'));
    const frameWidth = validateFrameWidth(readURLParam('frameWidth'));
    const matColor = validateMatColor(readURLParam('matColor'));
    const matWidth = validateMatWidth(readURLParam('matWidth'));

    document.getElementById('frame-style-' + frameStyle).click();
    document.getElementById('mat-color-' + matColor).click();
    document.getElementsByName('matWidth')[0].value = matWidth / 10;
    document.getElementsByName('matWidthR')[0].value = matWidth / 10;
    document.getElementsByName('frameWidthR')[0].value = frameWidth / 10;
    document.getElementsByName('frameWidth')[0].value = frameWidth /10;
    document.getElementById('print-size-' + printSize.toLowerCase()).click();

    writeURLParam('printSize', printSize);
    writeURLParam('frameStyle', frameStyle);
    writeURLParam('frameWidth', frameWidth);
    writeURLParam('matColor', matColor);
    writeURLParam('matWidth', matWidth);

}

function renderPreview(item) {
    let printSize = readURLParam('printSize');
    let frameStyle = readURLParam('frameStyle');
    let frameWidth = readURLParam('frameWidth');
    let matColor = readURLParam('matColor');
    let matWidth = readURLParam('matWidth');
    const previewContainer = document.getElementById('preview-container');
    const img = document.getElementById('preview-image');
    const printSizeValue = validatePrintSize(printSize);
    const frameWidthValue = validateFrameWidth(frameWidth);
    const matWidthValue =  validateMatWidth(matWidth);

    render(img, previewContainer, printSizeValue, validateFrameStyle(frameStyle), frameWidthValue,
        validateMatColor(matColor), matWidthValue);
    document.getElementById('price').innerText = 'â‚¬ ' + calculatePrice(printSizeValue, validateFrameStyle(frameStyle), frameWidthValue, matWidthValue).toFixed(2);
    const printSizes = getPrintSizes(img);

    document.getElementById('print-size-s-label').innerHTML = `Small <br>${printSizes['S'][0]/10} x ${printSizes['S'][1]/10} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium <br>${printSizes['M'][0]/10} x ${printSizes['M'][1]/10} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large <br>${printSizes['L'][0]/10} x ${printSizes['L'][1]/10} cm`;
    document.getElementById('total-size').innerHTML = `${(printSizes[printSizeValue][0] + frameWidthValue + matWidthValue)/10} x ${(printSizes[printSizeValue][1] + frameWidthValue + matWidthValue)/10} cm`;
}

function updateURLParam(param, value, item) {
    writeURLParam(param, value);
    renderPreview(item);
}

function setupListeners(item) {
    const frameWidthR = document.getElementsByName('frameWidthR')[0];
    const frameWidth = document.getElementsByName('frameWidth')[0];
    const matWidthR = document.getElementsByName('matWidthR')[0];
    const matWidth = document.getElementsByName('matWidth')[0];
    const frameClassic = document.getElementById('frame-style-classic');
    const frameNatural = document.getElementById('frame-style-natural');
    const frameShabby = document.getElementById('frame-style-shabby');
    const frameElegant = document.getElementById('frame-style-elegant');
    const frames = [frameClassic, frameElegant, frameNatural, frameShabby];
    const colorIvory = document.getElementById('mat-color-ivory');
    const colorWine = document.getElementById('mat-color-wine');
    const colorMint = document.getElementById('mat-color-mint');
    const colorIndigo = document.getElementById('mat-color-indigo');
    const colorCoal = document.getElementById('mat-color-coal');
    const color = [colorIvory, colorWine, colorMint, colorIndigo, colorCoal];
    const printSizeS = document.getElementById('print-size-s');
    const printSizeM = document.getElementById('print-size-m');
    const printSizeL = document.getElementById('print-size-l');
    const prints = [printSizeS, printSizeM, printSizeL];

    prints.forEach(print => {
        print.onchange = function () {
            updateURLParam('printSize', this.value, item);
        }
    });
    color.forEach(color => {
        color.onchange = function () {
            updateURLParam('matColor', this.value, item);
        }
    });

    frames.forEach(frame => {
        frame.onchange = function () {
            updateURLParam('frameStyle', this.value, item);
        }
    });

    frameWidthR.onchange   = 
    frameWidth.onchange  = function () {
        if (this.value !== '') {
            this.value = validateFrameWidth(this.value * 10) / 10;
        }
        updateURLParam('frameWidth', this.value * 10, item);
        frameWidthR.value = this.value;
    }

    matWidthR.onchange  = 

    matWidth.onchange  = function () {
        if (this.value !== '') {
            this.value = validateMatWidth(this.value * 10) / 10;
        }
        updateURLParam('matWidth', this.value * 10, item);
        matWidthR.value = this.value;
    }
}

function addLabelText(artist, title, date) {
    const spanArtist = document.createElement('span');
    spanArtist.setAttribute('class', 'artist');
    spanArtist.textContent = artist;
    const spanTitle = document.createElement('span');
    spanTitle.setAttribute('class', 'title');
    spanTitle.textContent = title + ', ';
    const spanDate = document.createElement('span');
    spanDate.setAttribute('class', 'date');
    spanDate.textContent = date;
    const labelText = document.getElementById('image-label');
    labelText.appendChild(spanArtist);
    labelText.appendChild(spanTitle);
    labelText.appendChild(spanDate);
}

function validateFrameWidth(value) {
    if (value === null || isNaN(value)) {
        return 40;
    }
    if (value > 50)  else if (value < 20) 
    return Math.round(value);
}

function validateMatWidth(value) {
    if (value === null || isNaN(value)) {
        return 55;
    }
    if (value > 100)  else if (value < 0) 
    return Math.round(value);
}

function validatePrintSize(value) {
    if (value === 'S' || value === 'M' || value === 'L') {
        return value;
    } else {
        return 'M';
    }
}

function validateMatColor(value) {
    if (value === 'ivory' || value === 'mint' || value === 'wine' || value === 'indigo' || value === 'coal') {
        return value;
    } else {
        return 'mint';
    }
}

function validateFrameStyle(value) {
    if (value === 'classic' || value === 'natural' || value === 'shabby' || value === 'elegant') {
        return value;
    } else {
        return 'natural';
    }
}

function readURLParam(param) {
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    return urlParams.get(param);
}

function writeURLParam(param, value) {
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set(param,value);
    const newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();
    history.pushState(null, '', newRelativePathQuery);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }
    console.log('x', x);

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let printCost = 30;
    let printCostMultiplier;
    let frameCost = frameWidth / 10;
    let matCost = 0.05 * (matWidth / 10);
    switch (printSize) {
        case 'S':
            printCostMultiplier = 1.00;
            break;
        case 'M':
            printCostMultiplier = 2.00;
            break;
        case 'L':
            printCostMultiplier = 3.50;
            break;
    }
    switch (frameStyle) {
        case 'classic':
            frameCost *= 1.00;
            break;
        case 'natural':
            frameCost *= 0.80;
            break;
        case 'shabby':
            frameCost *= 0.90;
            break;
        case 'elegant':
            frameCost *= 0.85;
            break;
    }
    const price = (printCost + frameCost + matCost) *printCostMultiplier;
    return parseFloat((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2));
}

import StorageHandler from './storage-handler.js';
import {API} from './api.js';
import {showItemsDynamically} from "./cart.js";

window.onload = ;







export function searchByObjectIDs(objectIDs) {
    let urls = [];
    const cachedItems = [];
    objectIDs.forEach(objectID => {
        const cachedObject = StorageHandler.getItemFromCache(objectID);
        if (cachedObject !== undefined)  else {
            urls.push(API.OBJECTS + objectID);
        }
    });

    if (urls.length === 0) 
    return Promise.all(urls.map(u=>fetch(u))).then(responses =>
        Promise.all(responses.map(res => {
            return res.json();
        })).then(items => {
            StorageHandler.addToCache(items);
            return items;
        })
    );
}



function addToStorage(key, newItems) {
    if(!Array.isArray(newItems)) 
    let items = JSON.parse(localStorage.getItem(key));
    if (items !== null)  else {
        items = newItems;
    }
    localStorage.setItem(key, JSON.stringify(items));
}






export default class StorageHandler {
    static STORAGE_KEYS = {
        cart: 'cart',
        cache: 'cache'

    }

    static 


    static 

    static 


    static 

    static addToCache(items) {
        addToStorage(this.STORAGE_KEYS.cache, items);
    }

    static 

    static getItemFromCache(objectID) {
        const cache = JSON.parse(localStorage.getItem(this.STORAGE_KEYS.cache));
        if (cache) 
        return undefined;
    }



    static 

    static 

    static 

    static 

    static 

    static getCartSize() {
        const items = localStorage.getItem(this.STORAGE_KEYS.cart);
        if (items === null) {
            return 0;
        }
    }
    static 
}
