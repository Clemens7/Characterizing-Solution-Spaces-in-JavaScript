

    import * as Frame from './frame.js';

    function reset_shopping_cart(){
      document.getElementById("checkout-button").onclick = ;
      document.getElementById("checkout-button").disabled = false;
      document.getElementById("price-total").innerText = "0";
      document.querySelectorAll(".cart-item").forEach();
      document.getElementById('cart-link').innerText = `Cart`;

      if (!('cart' in localStorage) || localStorage.cart === "" || localStorage.cart === "[]") else {
        document.getElementById('cart-link').innerText = `Cart (${JSON.parse(localStorage.cart).length})`;
      }
    }

    

    async function fill_shopping_cart(){

      const cart_container = document.getElementById("cart");

      if ("cart" in localStorage && localStorage.cart !== "") {
        const my_cart = JSON.parse(localStorage.cart);
        for (let c of my_cart) {
          let cart_preview = build_cart_preview(c.objectID);
          let museum_label = build_museum_label(c.objectID);
          let cart_item = build_cart_item(cart_preview, museum_label);

          let price_value = Frame.calculatePrice(c.printSize, c.frameStyle, c.frameWidth, c.matWidth);
          let description = calculate_description(c.printSize, c.frameStyle, c.frameWidth / 10, c.matWidth / 10, c.matColor);
          let href = `config.html?objectID=${c.objectID}&printSize=${c.printSize}&frameStyle=${c.frameStyle}&frameWidth=${c.frameWidth}&matWidth=${c.matWidth}&matColor=${c.matColor}`;
          await fill_cart_item_with_content(cart_item, c.objectID, price_value, description, href, c);
          cart_container.insertBefore(cart_item, cart_container.firstChild);
        }
      }

    }

    function calculate_description(print, frame, frame_width, mat_width, color){
      let description = "";
      if (print === "M"){
        description = "Medium";
      } else if (print === "S"){
        description = "Small";
      }

      description = description+" print in a " + frame_width + " cm " + frame + " frame";
      console.log(mat_width);
      if (mat_width !== 0){
        description = description + " with a " + mat_width + " cm " + color + " mat.";
      }

      return description;
    }

    async function fill_cart_item_with_content(cart_item, objectID, price_value, description, href, c) {

      if (!('cachedMeta' in localStorage) || localStorage.cachedMeta == "")
      
      let cachedMeta = JSON.parse(localStorage.cachedMeta);

      console.log(cachedMeta);
      if (!(''+objectID in cachedMeta))
      

      let response = cachedMeta[''+objectID];


      console.log(cart_item);
      cart_item.querySelector("#preview-" + objectID).src = response.primaryImageSmall;
      cart_item.querySelector("#preview-" + objectID).alt = "Image of " + response.title;

      let artist_span = cart_item.lastChild.firstChild.firstChild;
      artist_span.textContent = response.artistDisplayName;
      let title_span = artist_span.nextSibling;
      title_span.textContent = response.title;
      let date_span = title_span.nextSibling.nextSibling;
      date_span.textContent = response.objectDate;

      let description_span = date_span.nextSibling.nextSibling;
      description_span.textContent = description;

      cart_item.querySelector("#price-" + objectID).textContent = price_value;

      document.getElementById("price-total").innerText = ''+((parseFloat(document.getElementById("price-total").innerText) + price_value).toFixed(2));
      cart_item.querySelector(".cart-remove").onclick = ;
      cart_item.firstChild.firstChild.href = href;

      let img_obj = cart_item.querySelector("#preview-" + c.objectID);
      img_obj.onload = function() { Frame.render(img_obj,
              cart_item.querySelector("#preview-container-" + c.objectID),
              c.printSize,
              c.frameStyle,
              c.frameWidth,
              c.matColor,
              c.matWidth) }


    }




    function build_cart_item(cart_preview, museum_label){
      let cart_item = document.createElement("div");
      cart_item.setAttribute("class", "cart-item");
      cart_item.appendChild(cart_preview);
      cart_item.appendChild(museum_label);

      return cart_item;
    }
    function build_museum_label(id){
      let div_outer = document.createElement("div");
      div_outer.setAttribute("class", "museum-label");

      let div_inner_spans = document.createElement("div");
      let span_artist = document.createElement("span");
      span_artist.setAttribute("class", "artist");
      let span_title = document.createElement("span");
      span_title.setAttribute("class", "title");
      let span_date = document.createElement("span");
      span_date.setAttribute("class", "date");

      let br = document.createElement("br");

      let frame_description = document.createElement("span");
      frame_description.setAttribute("class", "frame-description");

      let div_inner_price = document.createElement("div");
      div_inner_price.setAttribute("class", "cart-price");
      div_inner_price.innerText = "€ ";

      let span_price = document.createElement("span");
      span_price.setAttribute("id", "price-"+id);
      span_price.innerText = "0";

      let button = document.createElement("button");
      button.setAttribute("class", "cart-remove");

      div_outer.appendChild(div_inner_spans);
      div_outer.appendChild(div_inner_price);
      div_outer.appendChild(button);

      div_inner_spans.appendChild(span_artist);
      div_inner_spans.appendChild(span_title);
      div_inner_spans.appendChild(span_date);
      div_inner_spans.appendChild(br);
      div_inner_spans.appendChild(frame_description);

      div_inner_price.appendChild(span_price);

      span_title.insertAdjacentText('afterend', ', ');

      return div_outer;
    }
    function build_cart_preview(id){
      let div = document.createElement("div");
      div.setAttribute("class", "cart-preview");
      div.setAttribute("id", "preview-container-"+id);

      let a = document.createElement("a");
      a.setAttribute("href", "config.html?objectID="+id);

      let img = document.createElement("img");
      img.setAttribute("class", "cart-thumb");
      img.setAttribute("src", "");
      img.setAttribute("id", "preview-"+id);
      img.setAttribute("alt", "");

      div.appendChild(a);
      a.appendChild(img);

      return div;
    }

    window.onload = function(){
      reset_shopping_cart();
      fill_shopping_cart();
    };

  
  import * as Frame from './frame.js';

  function updateFrame(){
    Frame.render( img, img_container, printSize, frameStyle, frameWidth*10, matColor, matWidth*10 );

    const price = document.getElementById('price');
    const price_value =  Frame.calculatePrice(printSize, frameStyle, frameWidth*10, matWidth*10);
    price.innerHTML = "€ " + price_value.toFixed(2);

    const totalSize = document.getElementById('total-size');
    let x = Frame.getPrintSizes(img);
    totalSize.innerHTML = (x[printSize][0] + frameWidth*10 + matWidth*10)/10 + " x " + (x[printSize][1] + frameWidth*10 + matWidth*10)/10 + " cm";
  }

  function readDefault( key, def ) {
    let urlParams = new URLSearchParams(window.location.search);
    let res = urlParams.get(key);
    if( res ) return res;
    else      return def;
  }

  var objectID   = readDefault('objectID', 0);
  var printSize  = readDefault('printSize','M');
  var frameStyle = readDefault('frameStyle','natural');
  var frameWidth = readDefault('frameWidth',40)/10;
  var matColor   = readDefault('matColor','mint');
  var matWidth   = readDefault('matWidth',55)/10;

  document.addEventListener("DOMContentLoaded", function() {
    let width;

    if( frameWidth )
    {
      width = document.querySelector('#frameWidthR');
      width.value = minMaxRound(2,5,frameWidth);
      width = document.querySelector('#frameWidthN');
      width.value = minMaxRound(2,5,frameWidth);
    }

    if( matWidth )
    {
      width = document.querySelector('#matWidthR');
      width.value = minMaxRound(0,10,matWidth);
      width = document.querySelector('#matWidthN');
      width.value = minMaxRound(0,10,matWidth);
    }

    for( let sizes of document.getElementsByName("printSize") ) {
      if( sizes.value === printSize ) {
        sizes.checked = true;
      }
    }

    for( let frames of document.getElementsByName("frameStyle") ) {
      if( frames.value === frameStyle ) {
        frames.checked = true;
      }
    }
    for( let mats of document.getElementsByName("matColor") ) {
      if( mats.value === matColor ) {
        mats.checked = true;
      }
    }

    let cart_items = JSON.parse(localStorage.getItem("cart"));
    if( cart_items ) 
  });

  var img = document.getElementById('preview-image');
  var img_container = document.getElementById("preview-container");
  img.onload = function() {
    writeCorrectSize( Frame.getPrintSizes(img) );
    updateFrame();
  };

  async function retrievePainting(objectID) {
    if( !localStorage.getItem('ObjectID') || localStorage.getItem('ObjectID') !== objectID ) 

    console.log(JSON.parse(localStorage.getItem('rawData')));
    return JSON.parse(localStorage.getItem('rawData'));
  }

  function writePaintingLable( painting ) {
    let img_label = document.getElementById('image-label');
    img_label.innerHTML = "<b>" + painting.artistDisplayName + "</b><br>" + painting.title + " " + painting.objectDate;
  }

  async function loadPainting() {
    if( !objectID ) 
    const painting = await retrievePainting(objectID);
    if( painting.message === "ObjectID not found" ) 

    img.src = painting.primaryImageSmall;
    writePaintingLable( painting );
  }

  loadPainting();

  function writeCorrectSize( correctSize ) {
    var sizeElementS = document.getElementById("print-size-s-label");
    sizeElementS.innerHTML = "Small<br>" + correctSize.S[0]/10 + " x " + correctSize.S[1]/10 + " cm";
    var sizeElementM = document.getElementById("print-size-m-label");
    sizeElementM.innerHTML = "Medium<br>" + correctSize.M[0]/10 + " x " + correctSize.M[1]/10 + " cm";
    var sizeElementL = document.getElementById("print-size-l-label");
    sizeElementL.innerHTML = "Large<br>" + correctSize.L[0]/10 + " x " + correctSize.L[1]/10 + " cm";
  }

  function minMaxRound(min,max,val){
    if( val < min ) else if ( val > max ) else if ( (val*100)%10 )
    return val;
  }

  const frameWidthR = document.querySelector('#frameWidthR');
  const frameWidthN = document.querySelector('#frameWidthN');
  frameWidthR.addEventListener("change",);
  frameWidthN.addEventListener("change",);

  const matWidthR = document.querySelector('#matWidthR');
  const matWidthN = document.querySelector('#matWidthN');
  matWidthR.addEventListener("change",);
  matWidthN.addEventListener("change",);

  const allPrintSizes = document.getElementsByName("printSize");
  allPrintSizes[0].addEventListener('change', );
  allPrintSizes[1].addEventListener('change', );
  allPrintSizes[2].addEventListener('change', );

  const allFrameStyles = document.getElementsByName("frameStyle");
  allFrameStyles[0].addEventListener('change', );
  allFrameStyles[1].addEventListener('change', );
  allFrameStyles[2].addEventListener('change', );
  allFrameStyles[3].addEventListener('change', );

  const allMatColors = document.getElementsByName("matColor");
  allMatColors[0].addEventListener('change', );
  allMatColors[1].addEventListener('change', );
  allMatColors[2].addEventListener('change', );
  allMatColors[3].addEventListener('change', );
  allMatColors[4].addEventListener('change', );

  

  document.getElementById("buy").addEventListener("click", );

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0; //small printSize

    switch( frameStyle ) {
        
        case "natural":
            price += ( 0.8 * (frameWidth/10) );
            break;
        
        case "elegant":
            price += ( 0.85 * (frameWidth/10) );
            break;
        
    }

    price += ( 0.05 * (matWidth/10) );

    switch( printSize ) {
        case "M":
            price *= 2;
            break;
        
        default:
            break;
    }

    console.log(parseFloat((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2)));
    return parseFloat((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2));
}
        class Artwork {
            
        }

        const gallery = document.getElementById('gallery');
        const heading = document.getElementById('search-info');
        if (searchValue()) {
            console.log('header gets resetted');
            heading.innerText = '';
        }


        document.addEventListener('DOMContentLoaded', event => {
            console.log('Dom content fully loaded');
            const q = searchValue();
            gallery.innerHTML = '';
            let cart = getCart();
            if(cart) 
            if (!q)  else {
                const heading = document.getElementById('search-info');
                heading.innerText = `Searching for “${q}”...`;
            }
            console.log(q);
            searchByParam(q);
        });

        const form = document.getElementById('search-form');
        form.addEventListener('submit', );

        async function searchByParam(q) {
            gallery.innerHTML = '';
            const url = `https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${q}`;
            try {
                const response = await fetch(url);
                const rawData = await response.json();
                console.log(rawData);
                const heading = document.getElementById('search-info');
                if (rawData.objectIDs == null) 
                const arr = rawData.objectIDs;
                let limit = arr.length;
                if (limit > 100) 
                for (let index = 0; index < limit; index++) {
                    retrieveById(arr[index]).then(
                        result => {
                            gallery.appendChild(buildArtworkEntity(result));
                            console.log(gallery.childElementCount);

                        }
                    );
                }
                let word = 'artworks';
                if (arr.length === 1) 
                heading.innerText = `Found ${arr.length} ${word} for “${q}”`;
            } 
        }

        function searchValue() {
            const params = (new URL(document.location)).searchParams;
            console.log('q' + params.get('q'));
            return params.get('q');
        }


        

        async function retrieveById(id) {
            let artworkStored = retrieveFromLocalStorage(id);
            if (artworkStored) {
                console.log(`Retrieve artwork with id ${id} from local storage`);
                return artworkStored;
            }}

        function retrieveFromLocalStorage(id) {
            if (id in localStorage) {
                return JSON.parse(localStorage[id]);
            }
        }

        

        function getCart() {
            console.log('Load artworks in card');
            return JSON.parse(localStorage.getItem('cart'));
        }


        function buildArtworkEntity(artwork) {
            const outerContainer = document.createElement('div');
            outerContainer.className = "thumb";

            const aTag = document.createElement('a');
            aTag.id = artwork.id;
            aTag.href = `./config.html?objectID=${artwork.id}`;

            const image = document.createElement('img');
            image.src = artwork.image;
            image.id = 'object-image-' + artwork.id;

            const innerContainer = document.createElement('div');
            innerContainer.className = 'museum-label';
            innerContainer.appendChild(buildElement('span', artwork.artist, 'artist'));
            innerContainer.appendChild(buildElement('span', artwork.title + ", ", 'title'));
            innerContainer.appendChild(buildElement('span', artwork.date, 'date'));


            aTag.appendChild(image);
            aTag.appendChild(innerContainer);

            outerContainer.appendChild(aTag);

            return outerContainer;
        }

        function buildElement(tag, value, tagClass = "") {
            const element = document.createElement(tag);
            element.innerText = value;
            element.className = tagClass;
            return element;
        }


    