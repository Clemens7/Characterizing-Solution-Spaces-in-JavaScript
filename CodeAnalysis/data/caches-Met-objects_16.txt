import { cache } from "./cache.js";

class ArtService {

    constructor() {
        this.museumUrl = "https://collectionapi.metmuseum.org/public/collection/v1";
        this.shippingUrl = "https://web-engineering.big.tuwien.ac.at/s20/a2";
    }

    getShipping = 

    getArtObject = async function (objectID) {
        const endpoint = "/objects/" + objectID;

        const cached = cache.load(objectID);
        if (cached) return cached;}

    getArtObjectPromises = 
    
    getArtObjects = 

    search = 

    getHighlightObjectPromises = 

    getQueryParams = 

}

export class ShippingInfo {
    
}

export class ArtObject {
    
}

export const artService = new ArtService();class Cache {

    load = function (key) {
        if (key in localStorage) {
            return JSON.parse(localStorage[key]);
        }
    }

    store = 

    addToCart = 

    removeFromCart = 

    clearCart = 

    getCartItems = function () {
        const cart = this.load("cart");

        return cart ? cart ;
    }

    cartLength = 
}

export const cache = new Cache();import { artService } from "./artService.js";
import { cache } from "./cache.js";
import * as domHelper from "./dom-helper.js"
import * as frame from "./frame.js"
import * as header from "./header.js"

function loadItems() {
    const cartItems = cache.getCartItems();
    if(cartItems.length > 0){
        createCartItems(cartItems);
    }
}





async function createCartItems(cartItems) {
    let totalPrice = 0;
    const cart = document.getElementById("cart");
    for (let item of cartItems) {
        const artObject = await artService.getArtObject(item.objectID);
        let img = document.createElement("img");
        let a = document.createElement("a");
        const previewDiv = document.createElement("div");
        img.addEventListener("load", () => frame.render(img, previewDiv, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth), false);
        img.classList.add("cart-thumb");
        domHelper.setAttributes(img, { "src": artObject.imgUrl, "id": "preview-" + artObject.objectID, "alt": artObject.title });
        domHelper.setAttributes(a, { "href": `./config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameStyle=${item.frameStyle}&frameWidth=${item.frameWidth}&matColor=${item.matColor}&matWidth=${item.matWidth}` });
        a.appendChild(img);
        a.classList.add("cart-preview");
        domHelper.setAttributes(previewDiv, { id: `preview-container-${artObject.objectID}` });
        previewDiv.appendChild(a);

        const artistSpan = domHelper.textElement("span", artObject.artist);
        artistSpan.classList.add("artist");
        const titleSpan = domHelper.textElement("span", artObject.title);
        titleSpan.classList.add("title");
        let textNode = document.createTextNode(", ");
        const dateSpan = domHelper.textElement("span", artObject.date);
        dateSpan.classList.add("date");
        const br1 = document.createElement("br");
        const br2 = document.createElement("br");
        let description = "";

        if (item.printSize === "S") {
            description += "Small ";
        }
        else if (item.printSize === "M") {
            description += "Medium ";
        }

        description += `print in a ${item.frameWidth / 10} cm ${item.frameStyle} frame`;

        if (item.matWidth > 0) {
            description += ` with a ${item.matWidth / 10} cm ${item.matColor} mat.`;
        }

        const descriptionSpan = domHelper.textElement("span", description);
        descriptionSpan.classList.add("frame-description");
        const div = domHelper.container([artistSpan, titleSpan, textNode, dateSpan, br1, br2, descriptionSpan], "div");

        const price = frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        totalPrice += price;
        const priceSpan = domHelper.textElement("span", price);
        domHelper.setAttributes(priceSpan, { "id": "price-" + artObject.objectID });
        textNode = document.createTextNode("€ ");
        const priceDiv = domHelper.container([textNode, priceSpan], "div");
        priceDiv.classList.add("cart-price");

        const removeButton = document.createElement("button");
        removeButton.classList.add("cart-remove");

        const museumLabelDiv = domHelper.container([div, priceDiv, removeButton], "div");
        museumLabelDiv.classList.add("museum-label");

        const cartItemDiv = document.createElement("div");
        cartItemDiv.classList.add("cart-item");
        removeButton.addEventListener("click", ,false);
        cartItemDiv.appendChild(previewDiv);
        cartItemDiv.appendChild(museumLabelDiv);


        cart.prepend(cartItemDiv);
    }

    const totalPriceElement = document.getElementById("price-total");
    totalPrice = (Math.round((totalPrice + Number.EPSILON) * 100) / 100);
    totalPriceElement.innerText = totalPrice;
}



loadItems();import { artService } from "./artService.js";
import { cache } from "./cache.js";
import * as domHelper from "./dom-helper.js"
import * as frame from "./frame.js";


const frameWidth = document.getElementById("frameWidth");
const frameWidthR = document.getElementById("frameWidthR");
const matWidth = document.getElementById("matWidth");
const matWidthR = document.getElementById("matWidthR");
const frameStyleRadios = document.getElementsByName("frameStyle");
let selectedFrameStyle = "natural";
const matColorRadios = document.getElementsByName("matColor");
let selectedMatColor = "mint";
const printSizeRadios = document.getElementsByName("printSize");
let selectedPrintSize = "M";
const previewImage = document.getElementById("preview-image");
const previewContainer = document.getElementById("preview-container");
const previewImageLabel = document.getElementById("image-label");
 const price = document.getElementById("price");
 const totalSize = document.getElementById("total-size");
 const addToCartButton = document.getElementById("buy");


function addEventListeners(){
    frameWidth.addEventListener("change", , false)
    frameWidthR.addEventListener("input", , false)

    matWidth.addEventListener("change", , false)
    matWidthR.addEventListener("input", , false)


    frameStyleRadios.forEach(
        frameStyle => frameStyle.addEventListener("input", , false)
    );

    matColorRadios.forEach(
        matColor => matColor.addEventListener("input", , false)
    );

    printSizeRadios.forEach(
        printSize => printSize.addEventListener("input", , false)
    );

    previewImage.addEventListener("load", function(){
        setSizes(previewImage);
        renderImage();
    }, false);

    addToCartButton.addEventListener("click", )
} 






function renderImage(){
   frame.render(previewImage, previewContainer, selectedPrintSize, selectedFrameStyle, frameWidth.value*10, selectedMatColor, matWidth.value*10)
   price.innerText = "€ " + frame.calculatePrice(selectedPrintSize, selectedFrameStyle, frameWidth.value*10, matWidth.value*10).toFixed(2);
   calculateTotalSize();
}

function calculateTotalSize(){
    const sizes = frame.getPrintSizes(previewImage);

    let totalWidth = 2 * frameWidth.value + 2 * matWidth.value;
    let totalHeight = 2 * frameWidth.value + 2 * matWidth.value;
    
    totalWidth +=  sizes[selectedPrintSize][0]/10;
    totalHeight +=  sizes[selectedPrintSize][1]/10;

    totalWidth = (Math.round((totalWidth + Number.EPSILON) * 100) / 100);
    totalHeight = (Math.round((totalHeight + Number.EPSILON) * 100) / 100);

    totalSize.innerHTML = totalWidth + " × " + totalHeight + " cm";
}

function setSizes(){
    const sizes = frame.getPrintSizes(previewImage);

    document.getElementById("print-size-s-label").innerHTML = "Small<br>" + sizes.S[0]/10 +" × " + sizes.S[1]/10 + " cm";
    document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + sizes.M[0]/10 +" × " + sizes.M[1]/10 + " cm";
    document.getElementById("print-size-l-label").innerHTML = "Large<br>" + sizes.L[0]/10 +" × " + sizes.L[1]/10 + " cm";
}

async function loadImage(objectID){
    const image = await artService.getArtObject(objectID);
    
    if(!image.objectID)
    

    domHelper.setAttributes(previewImage, {
        "src": image.imgUrl, 
        "title": image.title,
        "alt": image.title});
    previewImage.dataset.objectid = image.objectID;

    
    createImageDescription(image);
};

function createImageDescription(artObject){

    const artist = document.createElement('span');
    artist.setAttribute('class', 'artist');
    artist.innerText = artObject.artist;

    const title = document.createElement('span');
    title.setAttribute('class', 'title');
    title.innerText = artObject.title;

    const date = document.createElement('span');
    date.setAttribute('class', 'date');
    date.innerText = artObject.date;

    previewImageLabel.appendChild(artist);
    previewImageLabel.appendChild(title);
    previewImageLabel.append(' , ');
    previewImageLabel.appendChild(date);

};



function setQueryParams(){
    const params = artService.getQueryParams("objectID", "printSize", "frameWidth", "frameStyle", "matWidth", "matColor");


    for(let param in params){
        if(params[param])
            params[param] = params[param].toLowerCase() 
    }

    if(params.printSize)

    if(params.frameWidth)

    if(params.matWidth)

    if(params.frameStyle)

    if(params.matColor)

    loadImage(params.objectID);
}

setQueryParams();

addEventListeners();



export 

export function setAttributes(element, attributes) {
    for(let key in attributes) {
        if(typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

export function textElement(tag, text) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}

export function container(elements, tag='div') {
    const container = document.createElement(tag);
    for(let element of elements) {
        container.appendChild(element);
    }
    return container;
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    
    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    
    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;

    const printSizeFactors = {
        S: 1,
        M: 2,
        L: 3.5
    }
    const frameStylePrices = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    }

    price += frameWidth/10 * frameStylePrices[frameStyle];

    price += matWidth/10 * 0.05;

    price *= printSizeFactors[printSize];

    return Number((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2));
}
import { cache } from "./cache.js";

export function displayCartNumber(){
    const items = cache.getCartItems();
    const cartLink = document.getElementById("cart-link");

    if(items.length > 0){
        cartLink.innerText = `Cart (${items.length})`
    }
}

displayCartNumber();import { artService } from "./artService.js";

async function createElementsArtObjects(artObjectPromises, term) {
    const gallery = document.getElementById('gallery');
    gallery.innerHTML = '';
    let i = 0;
    for (let artObjectPromise of artObjectPromises) {
        gallery.appendChild(createArtObjectElement(await artObjectPromise));

        if (term) {
            foundArtworksFor(term, ++i);
        }
    }
    if (term) foundArtworksFor(term, i);
}

function createArtObjectElement(artObject) {
    const thumbnailURLContainer = document.createElement('div');
    thumbnailURLContainer.setAttribute('class', 'thumb');

    const link = document.createElement('a');
    link.setAttribute('href', `./config.html?objectID=${artObject.objectID}`);
    link.setAttribute('id', 'object-' + artObject.objectID);

    const img = document.createElement('img');
    img.setAttribute('src', artObject.imgUrl);
    img.setAttribute('alt', artObject.title);
    img.setAttribute('id', 'object-image-' + artObject.objectID);

    const labelContainer = document.createElement('div');
    labelContainer.setAttribute('class', 'museum-label');

    const artist = document.createElement('span');
    artist.setAttribute('class', 'artist');
    artist.innerText = artObject.artist;

    const title = document.createElement('span');
    title.setAttribute('class', 'title');
    title.innerText = artObject.title;

    const date = document.createElement('span');
    date.setAttribute('class', 'date');
    date.innerText = artObject.date;

    labelContainer.appendChild(artist);
    labelContainer.appendChild(title);
    labelContainer.append(', ');
    labelContainer.appendChild(date);

    link.appendChild(img);
    link.appendChild(labelContainer);

    thumbnailURLContainer.appendChild(link);
    return thumbnailURLContainer;
}

function searchingFor(term) {
    const searchInfo = document.getElementById("search-info");
    searchInfo.innerText = `Searching for “${term}”...`;
}

function foundArtworksFor(term, number) {
    const searchInfo = document.getElementById("search-info");
    if (number == 1) searchInfo.innerText = `Found ${number} artwork for “${term}”`;
    else searchInfo.innerText = `Found ${number} artworks for “${term}”`;
}

async function searchAndDisplay(q) {
    if (q && q.length > 0) {
        searchingFor(q);
        const objectIDs = await artService.search(q);
        const objectIDPromises = artService.getArtObjectPromises(objectIDs);
        createElementsArtObjects(objectIDPromises, q);
    }
}

document.addEventListener('DOMContentLoaded', event => {
    const urlParams = artService.getQueryParams("q");
    const q = urlParams.q;

    const search = document.getElementById("search");
    search.value = q;

    searchAndDisplay(q);
});