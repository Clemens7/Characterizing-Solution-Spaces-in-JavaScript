import {calculatePrice, render} from './frame.js';

window.onload = async function() {
    await fillCart();
    addNumberToNav();
};

export function addNumberToNav() {
    const shoppingCart = getShoppingCartFromLocalStorage();
    if (shoppingCart.length) {
        const linkElement = document.getElementById('cart-link');
        linkElement.appendChild(document.createTextNode(` (${shoppingCart.length})`));
    }
}

export 

export function getShoppingCartFromLocalStorage() {
    const cartInLocalStorage = localStorage.getItem('cart');
    if (cartInLocalStorage) {
        const parsedCartInLocalStorage = JSON.parse(cartInLocalStorage);
        if (typeof parsedCartInLocalStorage === typeof []) {
            return parsedCartInLocalStorage;
        }
    }}

async function getObjectDetails(objectID) {
    if (localStorage.getItem(objectID)) {
        return JSON.parse(localStorage.getItem(objectID));
    }}

async function fillCart() {
    const shoppingCart = getShoppingCartFromLocalStorage();
    const cartElement = document.getElementById('cart');
    let totalPrice = 0;

    for (const item of shoppingCart) {
        const itemDetails = await getObjectDetails(item.objectID);

        const cartItemElement = document.createElement('div');

        const itemPrice = calculatePrice(item.printSize, item.frameStyle, item.frameWidth,
            item.matWidth);
        totalPrice += itemPrice;

        cartItemElement.setAttribute('class', 'cart-item');

        cartItemElement.appendChild(getCartPreviewDiv(item, itemDetails.title, itemDetails.primaryImageSmall));

        cartItemElement.appendChild(getMuseumLabelDiv(item, itemDetails, itemPrice));

        cartElement.appendChild(cartItemElement);
    }

    const cartTotalElement = document.createElement('div');
    cartTotalElement.setAttribute('class', 'cart-total');

    const totalPriceDiv = document.createElement('div');
    totalPriceDiv.setAttribute('class', 'price');
    totalPriceDiv.appendChild(document.createTextNode('Total: € '));

    const totalPriceSpan = document.createElement('span');
    totalPriceSpan.setAttribute('id', 'price-total');
    totalPriceSpan.appendChild(document.createTextNode(totalPrice.toString()));
    totalPriceDiv.appendChild(totalPriceSpan);

    const checkoutButton = document.createElement('button');
    checkoutButton.setAttribute('type', 'button');
    checkoutButton.setAttribute('id', 'checkout-button');
    checkoutButton.appendChild(document.createTextNode('Checkout'));

    checkoutButton.onclick = ;

    if (!shoppingCart.length) 

    cartTotalElement.append(totalPriceDiv);
    cartTotalElement.append(checkoutButton);

    cartElement.appendChild(cartTotalElement);
}


function getMuseumLabelDiv(cartItem, objectDetails, price) {
    const museumLabelElement = document.createElement('div');
    museumLabelElement.setAttribute('class', 'museum-label');

    const spanWrapper = document.createElement('div');

    const artistSpan = document.createElement('span');
    artistSpan.setAttribute('class', 'artist');
    artistSpan.appendChild(document.createTextNode(objectDetails.artistDisplayName));

    const titleSpan = document.createElement('span');
    titleSpan.setAttribute('class', 'title');
    titleSpan.appendChild(document.createTextNode(objectDetails.title));

    const dateSpan = document.createElement('span');
    dateSpan.setAttribute('class', 'date');
    dateSpan.appendChild(document.createTextNode(', '));
    dateSpan.appendChild(document.createTextNode(objectDetails.objectDate));

    const frameDescriptionSpan = document.createElement('span');
    frameDescriptionSpan.setAttribute('class', 'frame-description');
    frameDescriptionSpan.appendChild(document.createTextNode(getFrameDescription(cartItem)));

    spanWrapper.appendChild(artistSpan);
    spanWrapper.appendChild(titleSpan);
    spanWrapper.appendChild(dateSpan);
    spanWrapper.appendChild(document.createElement('br'));
    spanWrapper.appendChild(document.createElement('br'));
    spanWrapper.appendChild(frameDescriptionSpan);

    museumLabelElement.appendChild(spanWrapper);

    const cartPriceElement = document.createElement('div');
    cartPriceElement.setAttribute('class', 'cart-price');

    const cartPriceSpan = document.createElement('span');
    cartPriceSpan.setAttribute('id', `price-${0}`);
    cartPriceSpan.appendChild(document.createTextNode(price));

    cartPriceElement.appendChild(document.createTextNode("€ "));
    cartPriceElement.appendChild(cartPriceSpan);

    museumLabelElement.appendChild(cartPriceElement);

    const removeButtonElement = document.createElement('button');
    removeButtonElement.setAttribute('class', 'cart-remove');
    removeButtonElement.onclick = ;
    museumLabelElement.appendChild(removeButtonElement);

    return museumLabelElement;
}



function getFrameDescription(cartItem) {
    let size;
    switch(cartItem.printSize) {
        case 'S':
            size = 'Small';
            break;
        case 'M':
            size = 'Medium';
            break;
        
    }

    let basicDescription = `${size} print in a ${cartItem.frameWidth / 10} cm ${cartItem.frameStyle} frame`;

    if (cartItem.matColor && cartItem.matWidth) {
        return `${basicDescription} with a ${cartItem.matWidth / 10} cm ${cartItem.matColor} mat.`;
    }}

function getCartPreviewDiv(cartItem, title, imageURL) {
    const cartPreviewElement = document.createElement('div');
    cartPreviewElement.setAttribute('class', 'cart-preview');
    cartPreviewElement.setAttribute('id', `preview-container-${cartItem.objectID}`);

    const cartPreviewLink = document.createElement('a');
    let link = `config.html?objectID=${cartItem.objectID}&printSize=${cartItem.printSize}&frameStyle=${cartItem.frameStyle}&frameWidth=${cartItem.frameWidth}`;
    if (cartItem.matColor && cartItem.matWidth) {
        link = `${link}&matColor=${cartItem.matColor}&matWidth=${cartItem.matWidth}`;
    }
    cartPreviewLink.setAttribute('href', link);

    const previewImgElement = document.createElement('img');
    previewImgElement.setAttribute('class', 'cart-thumb');
    previewImgElement.setAttribute('id', `preview-${cartItem.objectID}`);
    previewImgElement.setAttribute('src', imageURL);
    previewImgElement.setAttribute('alt', title);
    previewImgElement.onload = () => render(previewImgElement, cartPreviewLink, cartItem.printSize,
        cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth);

    cartPreviewLink.appendChild(previewImgElement);
    cartPreviewElement.appendChild(cartPreviewLink);

    return cartPreviewElement;
}

export 
import { fetchObjectFromAPI } from './cart.js';
import { calculatePrice, render, getPrintSizes } from './frame.js';
import { addNumberToNav, addToShoppingCart } from './cart.js';

document.addEventListener('DOMContentLoaded', initValues);

window.onload = async function () {
  await validatePageLoad();
  updatePrice();
  addNumberToNav();

  this.document
    .getElementsByName('printSize')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('printSize')[1]
    .addEventListener('change', );

  this.document
    .getElementsByName('printSize')[2]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameStyle')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameStyle')[1]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameStyle')[2]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameStyle')[3]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameWidth')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('frameWidthR')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('matWidthR')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('matWidth')[0]
    .addEventListener('change', );

  this.document
    .getElementsByName('submitButton')[0]
    .addEventListener('click', );
};

async function validatePageLoad() {
  var urlParams = new URLSearchParams(window.location.search);
  const objectID = urlParams.get('objectID');

  if (!objectID) 

  const painting = await fetchObjectFromAPI(objectID);
  if (painting.message) 
  const imgElement = document.getElementById('preview-image');
  imgElement.src = painting.primaryImageSmall;
  const labelElement = document.getElementById('image-label');

  var artist = document.createElement('span');
  var artistStyleClass = document.createAttribute('class');
  artistStyleClass.value = 'artist';
  artist.setAttributeNode(artistStyleClass);
  artist.innerText = painting.artistDisplayName;

  var title = document.createElement('span');
  var titleStyleClass = document.createAttribute('class');
  titleStyleClass.value = 'title';
  title.setAttributeNode(titleStyleClass);
  title.innerText = painting.title;

  var date = document.createElement('span');
  var dateStyleClass = document.createAttribute('class');
  dateStyleClass.value = 'date';
  date.setAttributeNode(dateStyleClass);
  date.innerText = painting.objectDate;

  labelElement.appendChild(artist);
  labelElement.appendChild(title);
  labelElement.appendChild(document.createTextNode(', '));
  labelElement.appendChild(date);

  imgElement.onload = function () {
    const sizeS = document.getElementById('print-size-s-value');
    const sizeM = document.getElementById('print-size-m-value');
    const sizeL = document.getElementById('print-size-l-value');
    var sizes = getPrintSizes(imgElement);
    sizeS.innerText = `${sizes.S[0] / 10} x ${sizes.S[1] / 10}`;
    sizeM.innerText = `${sizes.M[0] / 10} x ${sizes.M[1] / 10}`;
    sizeL.innerText = `${sizes.L[0] / 10} x ${sizes.L[1] / 10}`;
    renderImg();
  };
}

function initValues() {
  var urlParams = new URLSearchParams(window.location.search);

  let printSize = urlParams.get('printSize');
  let frameStyle = urlParams.get('frameStyle');
  let frameWidth = urlParams.get('frameWidth');
  let matColor = urlParams.get('matColor');
  let matWidth = urlParams.get('matWidth');

  frameWidth = frameWidth / 10;
  matWidth = matWidth / 10;

  switch (printSize) {
    

    

    default:
      document.getElementById('print-size-m').checked = true;
      break;
  }

  switch (frameStyle) {
    

    

    

    default:
      document.getElementById('frame-style-natural').checked = true;
      break;
  }

  if (!frameWidth) frameWidth = 4;
  document.getElementsByName('frameWidth')[0].value = frameWidth;
  document.getElementsByName('frameWidthR')[0].value = frameWidth;

  switch (matColor) {
    

    

    

    

    default:
      document.getElementById('mat-color-mint').checked = true;
      break;
  }

  if (!matWidth) matWidth = 5.5;
  document.getElementsByName('matWidth')[0].value = matWidth;
  document.getElementsByName('matWidthR')[0].value = matWidth;
}

export function updatePrice() {
  let printSize = 'S';

  if (document.getElementsByName('printSize')[1].checked) printSize = 'M';
  if (document.getElementsByName('printSize')[2].checked) 

  let frameStyle = 'natural';

  if (document.getElementsByName('frameStyle')[0].checked)
    
  if (document.getElementsByName('frameStyle')[2].checked)
    
  if (document.getElementsByName('frameStyle')[3].checked)
    

  const frameWidth = document.getElementsByName('frameWidth')[0].value;
  const matWidth = document.getElementsByName('matWidth')[0].value;

  let price = calculatePrice(printSize, frameStyle, frameWidth, matWidth);
  document.getElementById('price').innerHTML = '€ ' + price.toFixed(2);
  renderImg();
}

function renderImg() {
  const imgElement = document.getElementById('preview-image');
  const containerElement = document.getElementById('preview-container');
  const printSize = document.getElementsByName('printSize')[0].value;
  const frameStyle = document.getElementsByName('frameStyle')[0].value;
  const frameWidth = document.getElementsByName('frameWidth')[0].value;
  const matColor = document.getElementsByName('matColor')[0].value;
  const matWidth = document.getElementsByName('matWidth')[0].value;
  render(
    imgElement,
    containerElement,
    printSize,
    frameStyle,
    frameWidth,
    matColor,
    matWidth
  );
}
export function getPrintSizes(img) {
  let S = [297, 297]; // A4
  let M = [420, 420]; // A3
  let L = [594, 594]; // A2

  const w = img.naturalWidth;
  const h = img.naturalHeight;

  if (h > w) {
    S[0] = Math.floor((w * S[1]) / h);
    M[0] = Math.floor((w * M[1]) / h);
    L[0] = Math.floor((w * L[1]) / h);
  } else {
    S[1] = Math.floor((h * S[0]) / w);
    M[1] = Math.floor((h * M[0]) / w);
    L[1] = Math.floor((h * L[0]) / w);
  }

  return { S: S, M: M, L: L };
}

export function render(
  img,
  container,
  printSize,
  frameStyle,
  frameWidth,
  matColor,
  matWidth
) {
  const printSizes = getPrintSizes(img);
  const w = printSizes[printSize][0];
  const h = printSizes[printSize][1];

  let x;
  if (w > h) {
    x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
  } else {
    x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
  }

  const frameImageSlices = {
    classic: 115,
    natural: 75,
    shabby: 120,
    elegant: 107,
  };

  const matColors = {
    ivory: '#fffff0',
    mint: '#e0e6d4',
    wine: '#50222d',
    indigo: '#29434c',
    coal: '#333a3d',
  };

  img.style.boxSizing = 'border-box';
  img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
  img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
  img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
  img.style.borderImageSlice = frameImageSlices[frameStyle];
  img.style.borderWidth = `${frameWidth * x}px`;
  img.style.backgroundColor = matColors[matColor];
  img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
  let price = 30.0;

  switch (frameStyle) {
    
    case 'natural':
      price += Number(frameWidth) * 0.8;
      break;
    
    case 'elegant':
      price += Number(frameWidth) * 0.85;
  }

  price += 0.05 * Number(matWidth);

  switch (printSize) {
    case 'S':
      break;
    case 'M':
      price += price;
      break;
    
  }

  return Math.round(price * 100) / 100;
}
import { addNumberToNav } from './cart.js';

document.addEventListener('DOMContentLoaded', function (event) {
  var urlParams = new URLSearchParams(window.location.search);
  document.getElementById('search').value = urlParams.get('q');
  if (document.getElementById('search').value) {
    document.getElementById('search').value.replace('+', ' ');
    document.getElementById('search-info').innerHTML =
      'Searching for “' + document.getElementById('search').value + '”...';
  }
  searchImages();
  addNumberToNav();
});

function searchImages() {
  var searchString = document.getElementById('search').value;
  if (searchString) {
    getJSON(
      'https://collectionapi.metmuseum.org/public/collection/v1/search?q=' +
        searchString +
        '&hasImages=true'
    ).then((data) => {
      if (data.total == 1)  else {
        document.getElementById('search-info').innerHTML =
          'Found ' + data.total + ' artworks for “' + searchString + '”';
      }
      showImages(data);
    });
  }
}

function showImages(foundObjects, highlights) {
  if (foundObjects) {
    var max = 100;
    if (!highlights && foundObjects.total && foundObjects.total < 100) {
      max = foundObjects.total;
    }
    for (var i = 0; i < max; i++) {
      if (highlights)  else {
        if (!window.localStorage.getItem(foundObjects.objectIDs[i]))  else {
          showImage(
            JSON.parse(window.localStorage.getItem(foundObjects.objectIDs[i])),
            i
          );
        }
      }
    }
  }
}

function showImage(foundObject, i) {
  var gallery = document.getElementById('gallery');
  if (foundObject) {
    var thumb = document.createElement('div');
    var thumbStyleClass = document.createAttribute('class');
    var href = document.createAttribute('href');
    var imgSrc = document.createAttribute('src');
    var imgAlt = document.createAttribute('alt');

    thumbStyleClass.value = 'thumb';
    thumb.setAttributeNode(thumbStyleClass);

    var link = document.createElement('a');
    href.value = './config.html?objectID=' + foundObject.objectID;
    var linkId = document.createAttribute('id');
    linkId.value = 'object-' + i;
    link.setAttributeNode(href);
    link.setAttributeNode(linkId);

    var img = document.createElement('img');
    var imgId = document.createAttribute('id');
    imgSrc.value = foundObject.primaryImageSmall;
    imgAlt.value = foundObject.title;
    imgId.value = 'object-image-' + i;
    img.setAttributeNode(imgSrc);
    img.setAttributeNode(imgAlt);
    img.setAttributeNode(imgId);

    var label = document.createElement('div');
    var labelStyleClass = document.createAttribute('class');
    labelStyleClass.value = 'museum-label';
    label.setAttributeNode(labelStyleClass);

    var artist = document.createElement('span');
    var artistStyleClass = document.createAttribute('class');
    artistStyleClass.value = 'artist';
    artist.setAttributeNode(artistStyleClass);
    artist.innerText = foundObject.artistDisplayName;

    var title = document.createElement('span');
    var titleStyleClass = document.createAttribute('class');
    titleStyleClass.value = 'title';
    title.setAttributeNode(titleStyleClass);
    title.innerText = foundObject.title;

    var date = document.createElement('span');
    var dateStyleClass = document.createAttribute('class');
    dateStyleClass.value = 'date';
    date.setAttributeNode(dateStyleClass);
    date.innerText = foundObject.objectDate;

    label.appendChild(artist);
    label.appendChild(title);
    label.appendChild(document.createTextNode(', '));
    label.appendChild(date);

    link.appendChild(img);
    link.appendChild(label);

    thumb.appendChild(link);

    gallery.appendChild(thumb);
  }
}

async function getJSON(url) {
  let response = await fetch(url);
  let json = await response.json();
  return json;
}
