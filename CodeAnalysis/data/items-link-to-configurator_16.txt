import { cache } from "./cache.js";

class ArtService {

    constructor() {
        this.museumUrl = "https://collectionapi.metmuseum.org/public/collection/v1";
        this.shippingUrl = "https://web-engineering.big.tuwien.ac.at/s20/a2";
    }

    getShipping = 

    getArtObject = async function (objectID) {
        const endpoint = "/objects/" + objectID;

        const cached = cache.load(objectID);
        if (cached) 

        try {
            const response = await fetch(this.museumUrl + endpoint);
            const jsonData = await response.json();
            const artObject = new ArtObject(jsonData.objectID, jsonData.primaryImageSmall, jsonData.artistDisplayName, jsonData.title, jsonData.objectDate);
            cache.store(jsonData.objectID, artObject);
            return artObject;
        }}

    getArtObjectPromises = 
    
    getArtObjects = 

    search = 

    getHighlightObjectPromises = 

    getQueryParams = 

}

export class ShippingInfo {
    
}

export class ArtObject {
    constructor(objectID, imgUrl, artist, title, date) {
        this.objectID = objectID;
        this.imgUrl = imgUrl;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}

export const artService = new ArtService();class Cache {

    load = function (key) {
        if (key in localStorage) {
            return JSON.parse(localStorage[key]);
        }
    }

    store = function (key, data) {
        localStorage[key] = JSON.stringify(data);
    }

    addToCart = 

    removeFromCart = 

    clearCart = 

    getCartItems = function () {
        const cart = this.load("cart");

        return cart ? cart ;
    }

    cartLength = 
}

export const cache = new Cache();import { artService } from "./artService.js";
import { cache } from "./cache.js";
import * as domHelper from "./dom-helper.js"
import * as frame from "./frame.js"
import * as header from "./header.js"

function loadItems() {
    const cartItems = cache.getCartItems();
    if(cartItems.length > 0){
        createCartItems(cartItems);
    }
}





async function createCartItems(cartItems) {
    let totalPrice = 0;
    const cart = document.getElementById("cart");
    for (let item of cartItems) {
        const artObject = await artService.getArtObject(item.objectID);
        let img = document.createElement("img");
        let a = document.createElement("a");
        const previewDiv = document.createElement("div");
        img.addEventListener("load", () => frame.render(img, previewDiv, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth), false);
        img.classList.add("cart-thumb");
        domHelper.setAttributes(img, { "src": artObject.imgUrl, "id": "preview-" + artObject.objectID, "alt": artObject.title });
        domHelper.setAttributes(a, { "href": `./config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameStyle=${item.frameStyle}&frameWidth=${item.frameWidth}&matColor=${item.matColor}&matWidth=${item.matWidth}` });
        a.appendChild(img);
        a.classList.add("cart-preview");
        domHelper.setAttributes(previewDiv, { id: `preview-container-${artObject.objectID}` });
        previewDiv.appendChild(a);

        const artistSpan = domHelper.textElement("span", artObject.artist);
        artistSpan.classList.add("artist");
        const titleSpan = domHelper.textElement("span", artObject.title);
        titleSpan.classList.add("title");
        let textNode = document.createTextNode(", ");
        const dateSpan = domHelper.textElement("span", artObject.date);
        dateSpan.classList.add("date");
        const br1 = document.createElement("br");
        const br2 = document.createElement("br");
        let description = "";

        if (item.printSize === "S") {
            description += "Small ";
        }
        else if (item.printSize === "M") {
            description += "Medium ";
        }
        else {
            description += "Large ";
        }

        description += `print in a ${item.frameWidth / 10} cm ${item.frameStyle} frame`;

        if (item.matWidth > 0) {
            description += ` with a ${item.matWidth / 10} cm ${item.matColor} mat.`;
        }

        const descriptionSpan = domHelper.textElement("span", description);
        descriptionSpan.classList.add("frame-description");
        const div = domHelper.container([artistSpan, titleSpan, textNode, dateSpan, br1, br2, descriptionSpan], "div");

        const price = frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        totalPrice += price;
        const priceSpan = domHelper.textElement("span", price);
        domHelper.setAttributes(priceSpan, { "id": "price-" + artObject.objectID });
        textNode = document.createTextNode("â‚¬ ");
        const priceDiv = domHelper.container([textNode, priceSpan], "div");
        priceDiv.classList.add("cart-price");

        const removeButton = document.createElement("button");
        removeButton.classList.add("cart-remove");

        const museumLabelDiv = domHelper.container([div, priceDiv, removeButton], "div");
        museumLabelDiv.classList.add("museum-label");

        const cartItemDiv = document.createElement("div");
        cartItemDiv.classList.add("cart-item");
        removeButton.addEventListener("click", ,false);
        cartItemDiv.appendChild(previewDiv);
        cartItemDiv.appendChild(museumLabelDiv);


        cart.prepend(cartItemDiv);
    }

    const totalPriceElement = document.getElementById("price-total");
    totalPrice = (Math.round((totalPrice + Number.EPSILON) * 100) / 100);
    totalPriceElement.innerText = totalPrice;
}



loadItems();


export 

export function setAttributes(element, attributes) {
    for(let key in attributes) {
        if(typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

export function textElement(tag, text) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}

export function container(elements, tag='div') {
    const container = document.createElement(tag);
    for(let element of elements) {
        container.appendChild(element);
    }
    return container;
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    
    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    
    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;

    const printSizeFactors = {
        S: 1,
        M: 2,
        L: 3.5
    }
    const frameStylePrices = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    }

    price += frameWidth/10 * frameStylePrices[frameStyle];

    price += matWidth/10 * 0.05;

    price *= printSizeFactors[printSize];

    return Number((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2));
}
import { cache } from "./cache.js";

export function displayCartNumber(){
    const items = cache.getCartItems();
    const cartLink = document.getElementById("cart-link");

    if(items.length > 0){
        cartLink.innerText = `Cart (${items.length})`
    }
}

displayCartNumber();