import * as Frame from './frame.js';
import * as Cache from './cache.js';

export 

export function generateArtLabel(object, container) {
    let artistsNode = document.createElement("span");
    artistsNode.className = "artist";
    artistsNode.innerHTML = object.artistDisplayName;
    container.appendChild(artistsNode);

    let titleNode = document.createElement("span");
    titleNode.className = "title"
    titleNode.innerHTML = object.title + ", ";
    container.appendChild(titleNode);

    let dateNode = document.createElement("span");
    dateNode.className = "date";
    dateNode.innerHTML = object.objectDate;
    container.appendChild(dateNode);
}


export function generateCartItem(index, cartObjectData, configParams, container) {
    const id = cartObjectData.objectID;
    let cartTotal = document.getElementsByClassName('cart-total')[0];

    let itemNode = document.createElement("div");
    itemNode.className = "cart-item";

    let previewNode = document.createElement("div");
    previewNode.className = "cart-preview";
    previewNode.setAttribute("id", `preview-container-${index}`);

    let linkNode = document.createElement("a");
    linkNode.setAttribute("href", `config.html?objectID=${id}&frameWidth=${configParams.frameWidth}&frameStyle=${configParams.frameStyle}&printSize=${configParams.printSize}&matColor=${configParams.matColor}&matWidth=${configParams.matWidth}`);

    previewNode.appendChild(linkNode);

    const img = cartObjectData.primaryImageSmall;

    let imgNode = document.createElement("img");
    imgNode.className = "cart-thumb";
    imgNode.onload = function () {
        Frame.render(this, previewNode, configParams.printSize, configParams.frameStyle, configParams.frameWidth, configParams.matColor, configParams.matWidth);
        linkNode.appendChild(this);
    };
    imgNode.setAttribute("src", img);
    imgNode.setAttribute("id", `preview-${index}`);
    imgNode.setAttribute("alt", cartObjectData.title);


    let labelNode = document.createElement("div");
    labelNode.className = "museum-label";
    generateArtLabel(cartObjectData, labelNode.appendChild(document.createElement('div')));

    let size = {
        S: 'Small',
        M: 'Medium',
        L: 'Large'
    };
    let matText = configParams.matWidth == 0 ? `` : ` with a ${configParams.matWidth/10} cm ${configParams.matColor} mat`
    let descriptionSpan = document.createElement("span");
    descriptionSpan.className = "frame-description";
    descriptionSpan.innerText = `${size[configParams.printSize]} print in a ${configParams.frameWidth/10} cm ${configParams.frameStyle} frame${matText}.`
    labelNode.firstChild.appendChild(document.createElement("br"));
    labelNode.firstChild.appendChild(document.createElement("br"));
    labelNode.firstChild.appendChild(descriptionSpan);

    let itemPriceNode = document.createElement("div");
    itemPriceNode.innerText = "â‚¬ ";

    let priceSpan = document.createElement("span");
    priceSpan.setAttribute("id", `price-${index}`);
    priceSpan.innerText = Frame.calculatePrice(configParams.printSize, configParams.frameStyle, configParams.frameWidth, configParams.matWidth).toFixed(2);

    itemPriceNode.appendChild(priceSpan);

    let removeButton = document.createElement("button");
    removeButton.className = "cart-remove";

    labelNode.appendChild(itemPriceNode);
    labelNode.appendChild(removeButton);

    itemNode.appendChild(previewNode);
    itemNode.appendChild(labelNode);

    container.appendChild(itemNode);

    return itemNode;

}



export 
import { calculatePrice } from './frame.js';

const searchLimit = 100;
const cartKey = 'cart';

export ;

export async function getObjectData(id) {
    let artObj = retrieve(id);

    if (artObj == 'undefined') {
        artObj = await apiObject(id);
        store(id, artObj);
    }
    return artObj;
}

;

async function apiObject(id) {
    console.log(`Retrieving object associated with ID: ${id} from external API`);
    const response = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${id}`);
    const responseData = await response.json();
    return responseData;
}


export function calculateTotalCartPrice() {
    let cart = getCart();
    let cart_price = 0;

    if (cart != null) {
        for (const it of cart) {

            cart_price += calculatePrice(it.printSize, it.frameStyle, it.frameWidth, it.matWidth);

        }
    }

    return (Math.round((cart_price + Number.EPSILON) * 100) / 100);
}

export function getCart() {

    let cart = JSON.parse(window.localStorage.getItem(cartKey));

    if (cart === null || cart.length == 0) 

    return cart;
}

export 


function store(key, object) {
    console.log(`Storing object with id ${key} in localStorage`);
    localStorage[key] = JSON.stringify(object);
}

function retrieve(objectID) {
    if (objectID in localStorage)  else {
        return 'undefined';
    }
}

export 


export function generateCartString(){
    let cart = getCart();

    if (cart == null || cart.length == 0) else{
        return `Cart (${cart.length})`;
    }
}import * as Cache from './cache.js';
import * as DOM from './artmart-dom.js';




const exampleCart = [{
    "objectID": 39799,
    "frameStyle": "natural",
    "printSize": 'M',
    "frameWidth": 45,
    "matColor": "mint",
    "matWidth": 50
    
}, {
    "objectID": 459055,
    "frameStyle": "shabby",
    "printSize": 'S',
    "frameWidth": 50,
    "matColor": "indigo",
    "matWidth": 0
    
}]


function updateView() {
    generatePreview(Cache.getCart());
    updateTotalPrice();
    document.getElementById("cart-link").innerHTML = Cache.generateCartString();
}




function generatePreview(cart) {
    let container = document.getElementById("cart");
    container.innerHTML = '';
    console.log(`Cart = ${JSON.stringify(cart)}`);

    if (!cart)  else {
        for (let index in cart) {
            const cartObject = cart[index];

            Cache.getObjectData(cartObject.objectID).then(res => {
                let itemNode = DOM.generateCartItem(index, res, cartObject, container);

                itemNode.getElementsByClassName('cart-remove')[0].addEventListener('click', );

            });
        }
    }
}



function updateTotalPrice() {
    document.getElementById('price-total').innerText = Cache.calculateTotalCartPrice().toFixed(2);
}

 
updateView();export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {

    let price = 0.0;

    let basePrice = 30;
    let framePrice = frameStyle == 'classic' ? 1 : frameStyle == 'natural'  : frameStyle == 'shabby' ? 0.90 ;
    let matPrice = 0.05;

    price = (frameWidth/10)*framePrice + (matWidth/10)*matPrice + basePrice;

    if(printSize == 'M') 
    if(printSize == 'L' ){
        price = price *3.5;
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
