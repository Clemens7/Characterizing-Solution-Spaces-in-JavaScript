import { Art,ObjectsList,SearchList } from './art.js';
import * as ArtCache from './art-cache.js'

const MET_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/';

export let art_collection = [];

export let IDList = [];

/*


export async function retrieve(objectID) {

    console.log("Calling the object endpoint:")
    console.log(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`)

    let art = ArtCache.retrieve(objectID);
    if (!art) {
        const response = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`);
        if (response.ok) {
            art = await response.json();
            console.log("response ok");
            ArtCache.store(art);
        }
    }
    return art;
}

export 

/*
    return fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${searchTerm}`)
        .then(response => {
            console.log("call to MOMA Api with search: "+searchTerm.value)
            return response.json()
        }).then(value => {
            console.log(" call successfull: IDList"+ IDList.length)
            return IDList = value.objectIDs;
        }).catch(reason => {
            console.log(reason);
            return [];
        });*/


export 

export 


export 









export function retrieve(objectID) {
    const art = localStorage.getItem(objectID);
    if (art) 
}

export function store(art) {
    const key = art.objectID;
    console.log(`Storing ${key} in local storage`);
    localStorage.setItem(key, JSON.stringify(art));
}

export class Art {
    
}

export class ObjectsList {
    
}

export class SearchList {
    
}
const LS_CART_KEY = 'cart';

/*

export class CartEntry {
    
}

/*

export function getCartContent() {
    const jsonCartContent = localStorage.getItem(LS_CART_KEY);
    const cartContent = jsonCartContent ? JSON.parse(jsonCartContent) ;
    let missingUUID = false;
    for (const item of cartContent) {
        if (missingUUID |= item.entryUUID == null) {
            item.entryUUID = uuidv4();
        }
    }
    if (missingUUID) {
        localStorage.setItem(LS_CART_KEY, JSON.stringify(cartContent));
    }
    return cartContent;
}

export 

export 

export 

/*

export function uuidv4() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
    );
}
import {getCartContent} from "./cart-cache.js";

document.addEventListener('DOMContentLoaded', () => updateHeaderCartItemCount());

export function updateHeaderCartItemCount() {
    const count = getCartContent().length;
    if (count > 0) {
        document.getElementById('cart-link').innerText = 'Cart (' + count + ')';
    }
}
import * as CartCache from "./cart-cache.js";
import {updateHeaderCartItemCount} from "./cart-dom.js";
import {calculatePrice, render} from "./frame.js";
import * as ArtCache from "./art-cache.js";
import * as ArtAPI from "./art-api.js"


document.getElementById('test-add').addEventListener('click', );
document.getElementById('test-clear').addEventListener('click', );
document.getElementById('test-update').addEventListener('click', );

/*

document.addEventListener('DOMContentLoaded', () => updatePage());

function updatePage() {
    updateHeaderCartItemCount();
    updateCart();
}

function updateCart() {
    const cart = document.getElementById('cart')
    if (cart) {
        const cartContent = CartCache.getCartContent();

        let cartItems = cart.getElementsByClassName('cart-item');
        let toRemove = [];
        for (const item of cartItems) 
        for (const item of toRemove) 

        cartItems = Array.from(cart.getElementsByClassName('cart-item'));
        let subTotal = 0;
        for (const item of cartContent) {
            const price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
            subTotal += price;
            if (!cartItems.find()) {
                ArtAPI.retrieve(item.objectID).then(art => addCartItem(cart, price, art, item));
            }
        }

        document.getElementById('cart-msg').hidden = cartContent.length > 0;
        document.getElementById('checkout-button').disabled = cartContent.length === 0;

        document.getElementById('price-total').innerText = subTotal;
    }
}

function addCartItem(cart, price, art, item) {
    const cartItemTemplate = `
        <div class="cart-item" id="${item.entryUUID}">
            <div class="cart-preview" id="preview-container-${item.entryUUID}">
                <a href="./config.html?${Object.keys(item).map(key => key + '=' + item[key]).join('&')}">
                    <img class="cart-thumb" src="" id="preview-${item.entryUUID}" alt="Artwork">
                </a>
            </div>
            <div class="museum-label">
                <div>
                    <span class="artist">${art.artistDisplayName}</span>
                    <span class="title">${art.title}</span>,
                    <span class="date">${art.objectDate}</span>
                    <br><br>
                    <span class="frame-description">${printSizeToString(item.printSize)} print in a ${item.frameWidth / 10} cm ${item.frameStyle} frame${item.matWidth > 0 ? ` with a ${item.matWidth / 10} cm ${item.matColor} mat` }.</span>
                </div>
                <div class="cart-price">â‚¬ <span id="price-${item.entryUUID}">${price}</span></div>
                <button class="cart-remove" id="remove-${item.entryUUID}"/>
            </div>
        </div>
    `;
    cart.insertAdjacentHTML('afterbegin', cartItemTemplate);

    document.getElementById(`remove-${item.entryUUID}`).addEventListener('click', );

    const img = document.getElementById(`preview-${item.entryUUID}`);
    img.addEventListener('load', ev => {
        render(ev.target, document.getElementById(`preview-container-${item.entryUUID}`), item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
    })

    img.src = art.primaryImageSmall;
}

document.getElementById('checkout-button').addEventListener('click', );

/*

function printSizeToString(printSize) {
    switch (printSize) {
        case 'S':
            return `Small`;
        case 'M':
            return `Medium`;
        
        
    }
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    switch (frameStyle) {
        
        case 'natural':
            price += frameWidth * 0.8;
            break;
        case 'shabby':
            price += frameWidth * 0.9;
            break;
        case 'elegant':
            price += frameWidth * 0.85;
            break;
    }

    price += matWidth * 0.05;

    if (printSize === 'M') {
        price *= 2;
    }
    if (printSize === 'L') 
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
