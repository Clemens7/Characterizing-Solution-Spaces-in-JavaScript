import {render, calculatePrice} from "./frame.js";

document.addEventListener("load", loadCartItems);
const MET_URL = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
const EMPTY_MESSAGE = "There are no items in your shopping cart.";
let checkEmptyCartTimer;

export 

export 

export 

export 

export function loadCartSize() {
    let items = JSON.parse(localStorage.getItem("cart"));
    if (!items) {
        document.getElementById("cart-link").innerText = "Cart";
    }
}

export 

export 

export class CartItem {
    
}


        import {calculatePrice} from "./frame.js";
        import {updateWidth} from "./config.js";
        import {render} from "./frame.js";
        import {addToCart} from "./cart.js";
        import {loadCartSize} from "./cart.js";
        import {Label} from "./label.js";

        const printSizes = document.getElementsByName('printSize');
        const frameOutput = document.getElementById("frameWidth");
        const frameSlider = document.getElementById("frameWidthR");
        const frameStyles = document.getElementsByName('frameStyle');
        const matOutput = document.getElementById("matWidth");
        const matSlider = document.getElementById("matWidthR");
        const matColors = document.getElementsByName('matColor');
        const priceField = document.getElementById('price');

        const configurator = document.getElementsByClassName("configurator")[0];
        const form = document.getElementById("config-form");
        const cart = document.getElementById('cart-link');

        const MET_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/objects/';

        let objectID;
        let printSize;
        let frameStyle;
        let frameWidth;
        let matColor;
        let matWidth;

        let image = document.getElementById('preview-image');
        let preview = document.getElementById('preview-container');

        document.addEventListener('DOMContentLoaded', event => {
            initialize();
            matOutput.value = matSlider.value;
            frameOutput.value = frameSlider.value;
        });

        function initialize() {
            const params = (new URL(document.location)).searchParams;
            objectID = params.get('objectID');
            if (objectID == null || objectID === 0 || objectID > 1000000) 
            printSize = params.get('printSize');
            frameStyle = params.get('frameStyle');
            frameWidth = params.get('frameWidth');
            matWidth = params.get('matWidth');
            matColor = params.get('matColor');

            updateSize();
            updateFrame(frameWidth);
            updateStyle();
            updateMat(matWidth);
            imageSearch(objectID);

            updatePriceField();

            updateColor();
            loadCartSize();
        }

        async function imageSearch(objectID) {
            let image = await getCachedData(MET_URL + objectID);
            if (image === false) {
                let cacheStorage = await caches.open("artmart-cart");
                try {
                    await cacheStorage.add(MET_URL + objectID)
                } 
                image = await getCachedData(MET_URL + objectID);
            }
            if (image !== false) {
                createImage(new Label(image.title, image.artistDisplayName, image.objectDate, image.primaryImageSmall, "ObjectID found"));
            }
        }

        async function getCachedData(itemID) {
            const cacheStorage = await caches.open("artmart-cart");
            const cashedResponse = await cacheStorage.match(itemID);

            if (!cashedResponse || !cashedResponse.ok) {
                return false;
            }
            return await cashedResponse.json();
        }

        function createImage(label) {
            image.src = label.src;
            console.log("Src: " + image.src);
            image.id = "preview-image";
            let labelElement = document.createElement('div');
            labelElement.className = "museum-label";
            labelElement.id = "image-label";
            labelElement.innerText = label.artist + " " + label.title + " (" + label.date + ") ";
            preview.className = "preview";
            preview.id = "preview-container";
            preview.appendChild(image);
            configurator.insertBefore(preview, configurator.childNodes[0]);

            setTimeout(function () {
                preview.appendChild(labelElement);
                render(image, preview, printSize, frameStyle, frameWidth, matColor, matWidth);
            }, 0);
        }


        matSlider.oninput = ;
        frameSlider.oninput = ;


        matOutput.addEventListener('change', );
        frameOutput.addEventListener('change', );


        /*
   workaround Race Condition
        for (let element of printSizes) {
            element.addEventListener('change', );
        }


        /*
   workaround Race Condition
        for (let element of frameStyles) {
            element.addEventListener('change', );
        }

        /*
   workaround Race Condition
        for (let element of matColors) {
            element.addEventListener('change', );
        }

        form.addEventListener('submit', );

        function updateSize() {
            let id = "";
            switch (printSize) {
                
                
                
                default:
                    id = "print-size-s";
                    printSize = "S";
            }
            document.getElementById(id).checked = true;
        }

        function updateFrame(inputWidth) {
            frameWidth = updateWidth(inputWidth, 20, 50);
            frameSlider.value = (frameWidth / 10);
            frameOutput.value = (frameWidth / 10);
        }

        function updateStyle() {
            let id = "";

            switch (frameStyle) {
                
                
                
                
                default:
                    id = "frame-style-classic";
                    frameStyle = "classic";
            }
            document.getElementById(id).checked = true;
        }

        function updateMat(inputWidth) {
            matWidth = updateWidth(inputWidth, 0, 100);
            matSlider.value = matWidth / 10;
            matOutput.value = matWidth / 10;
        }

        function updateColor() {
            let id = "";
            switch (matColor) {
                
                
                
                
                
                default:
                    id = "mat-color-mint";
                    matColor = "mint";
            }
            document.getElementById(id).checked = true;
        }

        function updatePriceField() {
            let x = calculatePrice(printSize, frameStyle, frameWidth, matWidth);
            priceField.innerText = "â‚¬ " + x.toFixed(2);
        }


    import {round} from "./frame.js";
import {Label} from "./label.js";

let rawData = null;
const MET_URL = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";


export function updateWidth(inputValue, min, max) {
    let width = 0;
    let value = round(inputValue, 0);
    if (value >= min) {
        if (value <= max) {
            width = value;
        }
    } else {
        width = min;
    }
    return width;
}

export 

export 
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const width = img.naturalWidth;
    const height = img.naturalHeight;

    if (height > width)  else {
        S[1] = Math.floor(height * S[0] / width);
        M[1] = Math.floor(height * M[0] / width);
        L[1] = Math.floor(height * L[0] / width);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }
    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const basePrice = 30.0;
    const matPrice = 0.005;

    let price = 0.0;
    let sizeFactor = 1.0;
    let framePrice = 0.0;

    switch (frameStyle){
        case "classic":
            framePrice = 0.10;
            break;
        
        
        
    }

    switch (printSize) {
        case "S":
            sizeFactor = 1.0;
            break;
        
        
    }

    price = (basePrice + framePrice*frameWidth + matPrice*matWidth) * sizeFactor;
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export function round(x, n)
{
    let a = Math.pow(10, n);
    return (Math.round(x * a) / a);
}
export class Label {
    constructor(title, artist, date, src, message) {
        this.title = title;
        this.artist = artist;
        this.date = date;
        this.src = src;
        this.message = message;
    }
}


