

import {initCart, createCartNode} from './cart.js';
  import {fetchObject} from './search.js';


  

  initCart();

  import { fetchObject } from "./search.js";
import { render, calculatePrice} from "./frame.js";
import { cartCount } from "./config.js";


async function initCart() {
    await cartCount();

    if (!localStorage.getItem("cart")) 

    let cart = JSON.parse(localStorage.cart);
    let itemIndex = 0;
    for (let cartItem of cart) {
        let object = await fetchObject(cartItem.objectID);
        let newNode = createCartNode(object, cartItem, itemIndex);

        let cartNode = document.getElementById("cart");
        cartNode.insertBefore(newNode, cartNode.firstChild);

        let imgNode = document.getElementById(`preview-${cartItem.objectID}`);
        imgNode.onload = function() {
            console.log(cartItem.objectID);
            render(imgNode, document.getElementById(`preview-container-${object.objectID}`), cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth);
        };


        document.getElementById(`${itemIndex}`).onclick = ;

        itemIndex++;
    }

    updatePrice(cart);

    document.getElementById("checkout-button").onclick = 
    

}

function updatePrice(cart) {
    if (cart.length == 0)  else {
        let totalPrice = cart.map((cartItem) => parseFloat(calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth))).reduce((a, b) => a + b, 0);
        let roundedPrice = (Math.round((totalPrice + Number.EPSILON) * 100) / 100)
        document.getElementById("price-total").innerText = roundedPrice.toString();
    }
}

function createCartNode(object, cartItem, itemIndex) {
    let domNode = document.createElement("div");
    domNode.id = `cart-item-${object.objectID}`;
    cartItem.classList = "cart-item";
    domNode.innerHTML =  `
        <div class="cart-item">
        <div class="cart-preview" id="preview-container-${object.objectID}">
        <a href="${getConfigUrl(object, cartItem)}">
            <img class="cart-thumb" src="${object.primaryImageSmall}" id="preview-${object.objectID}" alt="${object.title}">
        </a>
        </div>
        <div class="museum-label">
        <div>
            <span class="artist">${object.artistDisplayName}</span>
            <span class="title">${object.title}</span>,
            <span class="date">${object.objectDate}</span>
            <br><br>
            <span class="frame-description">${getDescription(object, cartItem)}</span>
        </div>
        <div class="cart-price"> â‚¬ <span id="price-${object.objectID}">${calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth)}</span></div>
        <button id="${itemIndex}" class="cart-remove" ></button>
        </div>
    </div>
    `;
    return domNode;
}

function getConfigUrl(object, cartItem) {
    return `./config.html?objectID=${cartItem.objectID}&printSize=${cartItem.printSize}&frameStyle=${cartItem.frameStyle}&frameWidth=${cartItem.frameWidth}&matColor=${cartItem.matColor}&matWidth=${cartItem.matWidth}`;
}

function getDescription(object, cartItem) {

    function formatPrintSize(ps) {
        switch (ps) {
            case "S":
                return "Small";
            case "M":
                return "Medium";
            
            
        }
    }

    function formatWidth(w) {
        return "" + (w/10) + " cm"
    }


    let firstPart = `${formatPrintSize(cartItem.printSize)} print in a ${formatWidth(cartItem.frameWidth)} ${cartItem.frameStyle} frame`;
    let secondPart = `with a ${formatWidth(cartItem.matWidth)} ${cartItem.matColor} mat.`


    if (cartItem.matWidth == 0)  else {
        return firstPart + " " + secondPart;
    }
}

export {initCart, createCartNode};
    import { Configurator, addToCart, cartCount } from './config.js';
    
    const configurator = new Configurator();

    document.getElementById("config-form").addEventListener("submit", );
    
    cartCount();
  import { getPrintSizes, render, calculatePrice } from "./frame.js";

import { fetchObject } from "./search.js";

class Configurator {
    ;

    

    

    

    

    

    

    

    

    

    

    

    

    

    
}







async function cartCount() {

    if (!localStorage.getItem("cart")) 

    /* show number of items in cart */
    const cart = JSON.parse(localStorage.getItem("cart"));
    let itemCount = cart.length;
	
	if (itemCount < 1)  else {
		document.getElementById("cart-link").innerText = `Cart (${itemCount})`;
	}
}

export { Configurator, addToCart, cartCount }export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    switch (frameStyle) {
        
        case "natural":
            price += 0.8 * frameWidth / 10;
            break;
        
        case "elegant":
            price += 0.85 * frameWidth / 10;
            break;
    }
    price += matWidth * 0.005;

    switch (printSize) {
        case "M":
            price *= 2;
            break;
        
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
    import {performSearch} from './search.js';

    if (!localStorage.cart) 

    performSearch();
  









async function fetchObject(objectId) {
    const cachedObject = await localStorage.getItem(objectId.toString());
    if (cachedObject) {
        return JSON.parse(cachedObject);
    }}








export { performSearch, getObjectURL, getArtistName, fetchObject}
