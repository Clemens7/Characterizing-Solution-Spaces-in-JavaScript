import { getPrintSizes, render, calculatePrice } from "./frame.js";

var configContent = localStorage.getItem("cart");
var configContentJSON = JSON.parse(configContent);
const image = document.getElementById("preview-0");
const container = document.getElementById("preview-container-0");
const label = document.getElementById("museum-label-0");
console.log(configContentJSON);
const btn = document.querySelector("button.cart-remove");
var priceSum = 0;
console.log(btn);



document.addEventListener('DOMContentLoaded', (event) => {
    /*
    console.log("TEST");
    console.log("ObjID: " + configContentJSON.objectID);
    console.log("PrintSize: " + configContentJSON.printSize);
    console.log("FrameStyle: " + configContentJSON.frameStyle);
    console.log("FrameWidth: " + configContentJSON.frameWidth);
    console.log("MatColor: " + configContentJSON.matColor);
    console.log("MatWidth: " + configContentJSON.matWidth);
    if(configContentJSON != null) {
        for(var i = 0; i < configContentJSON.length; i++) {
        retrieveArtfromId(configContentJSON[i].objectID);
        render(image, container, configContentJSON[i].printSize, configContentJSON[i].frameStyle, (configContentJSON[i].frameWidth * 10), configContentJSON[i].matColor, (configContentJSON[i].matWidth * 10));
        createDescription(configContentJSON[i].objectID,configContentJSON[i].printSize,configContentJSON[i].frameStyle,configContentJSON[i].frameWidth,configContentJSON[i].matColor,configContentJSON[i].matWidth)
        }
    }
    
    
});

function retrieveArtfromId(id) {
    const url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
    console.log(id);

    const fetchPromise = fetch(url + id, {
        method: 'GET'
    });

    fetchPromise.then(response => {
        return response.json();
    }).then(response => {
        console.log(response);
        if(response.message == "Not Found" || response.message == "ObjectID not found")
        

        var imageURL = response.primaryImageSmall;
      
        image.src = imageURL;

        var imgLink = document.querySelector("div.cart-preview > a");
        imgLink.href = `config.html?objectID=${id}`;

});
}

function createDescription(id, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
    console.log(id);

    const fetchPromise = fetch(url + id, {
        method: 'GET'
    });

    fetchPromise.then(response => {
        return response.json();
    }).then(response => {
        console.log(response);
        if(response.message == "Not Found" || response.message == "ObjectID not found")
        

        var artist = response.artistDisplayName;
        var title = response.title;
        var date = response.objectDate;


        console.log(artist);
        console.log(title);
        console.log(date);

        var size;

        switch(printSize) {
            case 'M':
                size = "Medium"
                break;
            case 'S':
                size = "Small"
                break;
            
        }

        var matInfo;

        if(matWidth != 0) {
            matInfo = `with a ${matWidth} cm ${matColor} mat.`
        }

        var price = calculatePrice(printSize,frameStyle,frameWidth,matWidth)

        label.innerHTML = 
        `<div>
            <span class="artist">${artist}</span>
            <span class="title">${title}</span>
            <span class="date">${date}</span>
            <br><br>
            <span class="frame-description">${size} print in a ${frameWidth} cm ${frameStyle} frame ${matInfo}</span>
        </div>
        <div class="cart-price">€ <span id="price-0">${price}</span></div>
        <button type="button" class="cart-remove"></button>
        `
        priceSum = priceSum - (-price);

        var totalDiv = document.getElementById('price-total')
    
        totalDiv.innerText = `${priceSum}`
    });

    btn.onclick = ;

}

            matColorRow = document.querySelector("div.mat-color-row");
            console.log(matColorRow);

            matColorRow.onchange = 
            
          import { getPrintSizes, render, calculatePrice } from "./frame.js";

var urlParams = new URLSearchParams(window.location.search);
const objectID = document.querySelector("input[id='object-id']");
const image = document.getElementById("preview-image");
const container = document.getElementById("preview-container");
var frameWidth, frameWidthR, matWidth, matWidthR, printSize, frameStyle, matColor;

if (urlParams.get("object-id") == null && urlParams.get("printSize") != null) 

document.addEventListener('DOMContentLoaded', (event) => {



    if (urlParams.get("objectID") != null) {
        InitWithObjectID();
        retrieveArtfromId(objectID.value)
    }

    totalPrice(printSize.value, frameStyle.value, frameWidth.value, matWidth.value);

    const configurator = document.querySelector("section.configurator");
    console.log(configurator);

    configurator.onchange = ;

    console.log("!!!!!!!!!" + printSize.value);

}
);

function InitWithObjectID() {

    objectID.value = urlParams.get("objectID");
    frameWidth = document.querySelector("input[name='frameWidth']");
    frameWidthR = document.querySelector("input[name='frameWidthR']");
    matWidth = document.querySelector("input[name='matWidth']");
    matWidthR = document.querySelector("input[name='matWidthR']");
    printSize = document.querySelector("input[name = 'printSize']:checked");
    frameStyle = document.querySelector("input[name = 'frameStyle']:checked");
    matColor = document.querySelector("input[name = 'matColor']:checked");

}





function retrieveArtfromId(id) {
    const url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
    console.log(id);

    var cachedResponse = localStorage.getItem(id);
    if (cachedResponse) {
        console.log("Cache Hit");
        cachedResponse = JSON.parse(cachedResponse);
        processResponseFromID(cachedResponse);
        return;
    }
}

function processResponseFromID(response) {

    var imageURL = response.primaryImageSmall;


    image.src = imageURL;


    render(image, container, 'M', 'natural', 40, "mint", 4);

    console.log(getPrintSizes(image));
    var dict = getPrintSizes(image);

    var sizeS = dict['S'];
    var sizeSW = sizeS[0];
    var sizeSH = sizeS[1];
    var sizeM = dict['M'];
    var sizeMW = sizeM[0];
    var sizeMH = sizeM[1];
    var sizeL = dict['L'];
    var sizeLW = sizeL[0];
    var sizeLH = sizeL[1];

    const divSizeS = document.getElementById("print-size-s-label");
    const divSizeM = document.getElementById("print-size-m-label");
    const divSizeL = document.getElementById("print-size-l-label");

    divSizeS.innerHTML =
        `Small<br>${sizeSW / 10} x ${sizeSH / 10} cm`
    divSizeM.innerHTML =
        `Medium<br>${sizeMW / 10} x ${sizeMH / 10} cm`
    divSizeL.innerHTML =
        `Large<br>${sizeLW / 10} x ${sizeLH / 10} cm`

    var totalSizeW = sizeMW;
    var totalSizeH = sizeMH;

    const totalSize = document.getElementById("total-size");

    totalSize.innerHTML =
        `
            ${(totalSizeW / 10) + 8 + 0.8} x ${(totalSizeH / 10) + 8 + 0.8} cm
            `

    var artist = response.artistDisplayName;
    var title = response.title;
    var date = response.objectDate;

    /*if (artist == null) {
        window.location.replace("search.html");
    };*/

    const div = document.getElementById("image-label")

    div.innerHTML =
        `
            <div><b>${artist}</b></div>
            <div><i>${title}</i>, ${date}</div>
            `

    totalPrice("M", "natural", 4, 0.4);

}






export 

function totalPrice(printSize, frameStyle, frameWidth, matWidth) {

    var price = calculatePrice(printSize, frameStyle, frameWidth, matWidth);

    const div = document.getElementById('price');

    div.innerHTML =
        `€ ${price}`

}

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    price += 30;

    switch (frameStyle) {
        
        case "natural":
            price += 0.8 * frameWidth;
            break;
        
        case "elegant":
            price += 0.85 * frameWidth;
            break;
    };

    price += 0.05 * matWidth;

    switch (printSize) {
        case "S":
            price *= 1;
            break;
        case "M":
            price *= 2;
            break;
        
    };

    price = (Math.round((price + Number.EPSILON) * 100) / 100);

    return price.toFixed(2);
}
class MetObject {
    constructor(objectID, artist, title, date, thumbnail) {
        this.objectID = objectID;
        this.artist = artist;
        this.title = title;
        this.date = date;
        this.thumbnail = thumbnail;
    }
}


urlParams = new URLSearchParams(window.location.search);
queryParam = urlParams.get("q");


var artCount;
var metObjectIds;
var metObjects


if (queryParam != null) {
    document.addEventListener('DOMContentLoaded', event => {
        const h2 = document.getElementById('search-info');
        h2.innerHTML = `Searching for “${queryParam}”...`;
    });
    searchArt();
}



async function searchArt() {

    const url = "https://collectionapi.metmuseum.org/public/collection/v1/search";

    var cachedResponse = localStorage.getItem(queryParam);
    if (cachedResponse) {
        console.log("Cache Hit");
        cachedResponse = JSON.parse(cachedResponse);
        console.log(cachedResponse.total);


        document.addEventListener('DOMContentLoaded', event => {
            updateSearchInfo(Math.min(cachedResponse.total, 100));
            retrieveArtfromIds(cachedResponse.objectIDs.slice(0, 100));
            
        });
        return;
    }}



function retrieveArtfromIds(ids) {
    const url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
    const gallery = document.getElementById('gallery');
    console.log(ids.length);

    ids.forEach(id => {


        var cachedResponse = localStorage.getItem(id);
        if (cachedResponse) {
            console.log("Cache Hit");
            cachedResponse = JSON.parse(cachedResponse);
            
            
                var metObject = new MetObject(
                    id,
                    cachedResponse.artistDisplayName,
                    cachedResponse.title,
                    cachedResponse.objectDate,
                    cachedResponse.primaryImageSmall);
    
                gallery.appendChild(createArtElement(metObject));
                return metObject;
            
            
        }
    });



}

function createArtElement(metObject) {
    const div = document.createElement('div');
    div.className = "thumb";
    div.id = "demo";
    div.innerHTML =
        `<a href="config.html?objectID=${metObject.objectID}" id="object-0">
        <img src="${metObject.thumbnail}" alt="" id="object-image-0">
        <div class="museum-label">
            <span class="artist">${metObject.artist}</span>
            <span class="title">${metObject.title}</span>,
            <span class="date">${metObject.date}</span>
        </div>
        </a>`;

    return div;
}

function updateSearchInfo(totalCount) {



    const h2 = document.getElementById('search-info');

    var artwork;
    if (totalCount == 1) 
    else {
        artwork = "artworks";
    }

    h2.innerHTML = `Found ${totalCount} ${artwork} for “${queryParam}”`;


}
