



export 

export 

export 
function updateHeader(){
    const cartLink = document.querySelector("a#cart-link");

    let items = localStorage.getItem("cart");
    if(items === null){
        items = [];
    }

    cartLink.textContent = "Cart (" + items.length +")";
}

updateHeader();
const SEARCH_RESULT_KEY = "searchResult/";
const SEARCH_OBJECT_KEY = "searchObject/";

export 

export function getObjectWithId(id) {
    const localStoreItem = localStorage.getItem(SEARCH_OBJECT_KEY + id);
    if (localStoreItem !== null)  else {
        return null;
    }
}

export 

export 
import * as DomHelper from "../domHelpers.js";

export 
export class SearchObject {
    

    
}

export 
const MAX_RESULTS = 100;
const API_URL = "https://collectionapi.metmuseum.org/";
const SEARCH_ENDPOINT = "public/collection/v1/search";
const OBJECT_ENDPOINT = "public/collection/v1/objects/";

export 

export async function getObject(objectId) {
    try {
        const objectRequestUrl = new URL(OBJECT_ENDPOINT + objectId, API_URL);
        const objectResponse = await fetch(objectRequestUrl.toString());
        return await objectResponse.json();
    }}
import * as Remote from "./searchRemote.js";
import * as Cache from "./seachCache.js"
import {parseSearchObject} from "./searchObject.js";

export 

export async function loadHighlights() {
    console.log("Loading highlight from cache and remote.");
    const highlightIds = await loadHighlightsFile();
    return await fillCacheAndRemoteIds(highlightIds);
}



async function fillCacheAndRemoteIds(objectIds) {
    return await Promise.all(
        objectIds
            .map(async (objectId) => {
                let finalObj;

                const localResult = Cache.getObjectWithId(objectId);
                if (localResult === null) {
                    const remoteObject = await Remote.getObject(objectId);})
    );
}

async function loadHighlightsFile() {
    return (await fetch('./highlights.json').then(response => response.json())).highlights;
}
import * as Dom from "./searchDom.js"
import * as Repo from "./searchRepo.js";

const container = document.getElementById("gallery");

document.addEventListener("DOMContentLoaded", evt => {
    const urlSearchParams = new URL(document.location).searchParams;
    let currentSearchQuery = "";
    if (urlSearchParams.has("q")) 

    const searchInput = document.getElementById("search");
    searchInput.value = currentSearchQuery;

    executeSearch(currentSearchQuery).then()
});

document.getElementById("search-form").addEventListener("submit", );

async function executeSearch(searchQuery) {
    if (searchQuery === "") {
        const highlights = await Repo.loadHighlights();)} for “${searchQuery}”`);
    Dom.loadElements(container, searchResult);
}


