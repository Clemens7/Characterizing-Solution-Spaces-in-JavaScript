import * as Storage from './picture-storage.js'

/*
export function getCartString() {
    let cart = Storage.get("cart");
    if (!cart ) {
        return "Cart";
    }}

  import * as DOM from './dom-helpers.js';
  import * as PictureDOM from './picture-dom.js';
  import * as PictureAPI from './picture-api.js';
  import { Picture } from './picture.js';
  import * as FrameConfig from './frame-config.js';
  import * as CartHelper from './cart.js';

  document.getElementById("cart-link").innerText = CartHelper.getCartString();
  document.addEventListener('DOMContentLoaded', event => {

    const params = (new URL(document.location)).searchParams;
    const objectQuery = params.get('objectID');
    const printSizeQuery = params.get('printSize');
    const frameStyleQuery = params.get('frameStyle');
    const frameWidthQuery = params.get('frameWidth');
    const matColorQuery = params.get('matColor');
    const matWidthQuery = params.get('matWidth');

    if(objectQuery) {
      PictureAPI.retrieve_picture(objectQuery).then((picture) => {
        if (picture) {
          let previewContainer = document.getElementById("preview-container");

          previewContainer.appendChild(
            DOM.setAttributes(document.createElement('img'), {
              src: picture.imageURLSmall, 
              alt: 'Picture of ' + picture.title + ' by ' + picture.artist,
              id: 'preview-image'
            })
          );
          previewContainer.appendChild(
            DOM.setAttributes(PictureDOM.createLabel(picture), {id: 'image-label'})
          );

          FrameConfig.calcPrintSizes();
          FrameConfig.setTotalSize();
          FrameConfig.setPrice();
          FrameConfig.renderPreview();
        }
      }).catch();
    }
    if(objectQuery) {
      FrameConfig.setObjectID(objectQuery);
    }
    if(printSizeQuery) 
    if(frameStyleQuery) 
    if(frameWidthQuery) 
    if(matColorQuery) 
    if(matWidthQuery) 
  });

  const form = document.getElementById('config-form');

  form.addEventListener('submit', );

export function setAttributes(element, attributes) {
    for (let key in attributes) {
        if (typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }

    return element;
}

export function setClassList(element, classes) {
    for (let className of classes) {
        if (!element.classList.contains(className)) {
            element.classList.add(className);
        }
    }
    return element;
}

export function container(children, tag='div') {
    const container = document.createElement(tag);
    for (let child of children) {
        container.appendChild(child);
    }
    return container;
}

export function innerTextElement(text, tag) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}import * as Frame from './frame.js';
import * as Cache from './picture-storage.js';
let objectQuery;
let printSizeQuery = "M";
let frameStyleQuery = "natural";
let frameWidthQuery = 40;
let matColorQuery = "mint";
let matWidthQuery = 55;

const printSizeRadios = document.querySelectorAll('input[type=radio][name="printSize"]');
const frameStyleRadios = document.querySelectorAll('input[type=radio][name="frameStyle"]');
const matColorRadios = document.querySelectorAll('input[type=radio][name="matColor"]');

export function setObjectID(objectID){
    objectQuery = parseInt(objectID);
}

export 

export 

export 

export 

export 

const frameWidthField = document.getElementById("frameWidth");
const frameWidthSlider = document.getElementById("frameWidthR");
const matWidthField = document.getElementById("matWidth");
const matWidthSlider = document.getElementById("matWidthR");

frameWidthField.addEventListener('change', function() {
    let frameWidth = frameWidthField.value;
    if(frameWidth < 2) 
    if(frameWidth > 5) 
    frameWidth = parseFloat(frameWidth);
    frameWidth = parseFloat(frameWidth.toFixed(1));
    document.getElementById("frameWidthR").value = frameWidth;
    document.getElementById("frameWidth").value = frameWidth;
    frameWidthQuery = frameWidth*10;
    frameWidthQuery = frameWidthField.value*10;
    setTotalSize();
    setPrice();
    renderPreview();
});

frameWidthSlider.addEventListener('input', );

matWidthField.addEventListener('change', );

matWidthSlider.addEventListener('input', );

printSizeRadios.forEach(radio => radio.addEventListener('change', ));


frameStyleRadios.forEach(radio => radio.addEventListener('change', ));



matColorRadios.forEach(radio => radio.addEventListener('change', ));



export function renderPreview(){
    if(document.getElementById('preview-image') != null) {
        Frame.render(document.getElementById('preview-image'), document.getElementById('preview-container'), printSizeQuery, frameStyleQuery, frameWidthQuery, matColorQuery, matWidthQuery);
    }
}


export function calcPrintSizes(){
    const printSizes = Frame.getPrintSizes(document.getElementById('preview-image'));
    document.getElementById('print-size-s-label').innerHTML = "Small <br>" + (printSizes['S'][0])/10 + " x " + (printSizes['S'][1])/10 + " cm";
    document.getElementById('print-size-m-label').innerHTML = "Medium <br>" + (printSizes['M'][0])/10 +" x " + (printSizes['M'][1])/10 + " cm";
    document.getElementById('print-size-l-label').innerHTML = "Large <br>" + (printSizes['L'][0])/10 +" x " + (printSizes['L'][1])/10+ "cm";
}

export function setTotalSize() {
    const printSizes = Frame.getPrintSizes(document.getElementById('preview-image'));
    document.getElementById('total-size').innerText = (Math.round(((printSizes[printSizeQuery][0]) / 10 + frameWidthQuery / 10 + matWidthQuery / 10) * 10) / 10) + " x " + (Math.round(((printSizes[printSizeQuery][1]) / 10 + frameWidthQuery / 10 + matWidthQuery / 10) * 10) / 10) + " cm";
}

export function setPrice() {
   document.getElementById('price').innerText = "â‚¬ " + Frame.calculatePrice(printSizeQuery, frameStyleQuery, frameWidthQuery, matWidthQuery).toFixed(2);
}


export 
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    switch(frameStyle) {
        
        case 'natural': price += (frameWidth / 10) * 0.8;
            break;
        
        
        
    }

    price += matWidth / 10.0 * 0.05;

    switch(printSize) {
        case 'M': price *= 2;
            break;
        
        
    }
    
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { Picture } from './picture.js';
import * as PictureCache from './picture-storage.js';

const SEARCH_RESULT_SIZE = 100;

export async function retrieve_picture(objectID) {
    let picture = PictureCache.get(objectID);
    if(picture)
    

    const url = object_url(objectID);

    try {
        const response = await fetch(url);
        if (response.status !== 200) 

        const pictureData = await response.json();
        picture = new Picture(
            objectID,
            pictureData.primaryImage,
            pictureData.primaryImageSmall,
            pictureData.artistDisplayName,
            pictureData.title,
            pictureData.objectDate
        );
        PictureCache.store(objectID, picture);
        return picture;
    }}

export 

export 

function object_url(objectID) {
    const API_URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
    return API_URL;
}



import { Picture } from './picture.js';
import * as DOM from './dom-helpers.js';

export 

export function createLabel(picture) {
    return DOM.setClassList(
        DOM.container([
            DOM.setClassList(DOM.innerTextElement(picture.artist, 'span'), ['artist']),
            DOM.setClassList(DOM.innerTextElement(picture.title + ', ', 'span'), ['title']),
            DOM.setClassList(DOM.innerTextElement(picture.date, 'span'), ['date']),
        ]), ['museum-label']
    );
}export function get(key) {
    if (key in window.localStorage) 
}

export function store(key, data) {
    localStorage[key] = JSON.stringify(data);
}export class Picture {
    constructor(objectID, imageURL, imageURLSmall, artist, title, date) {
        this.objectID = objectID;
        this.imageURL = imageURL;
        this.imageURLSmall = imageURLSmall;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}