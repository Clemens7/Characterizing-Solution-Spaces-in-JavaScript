export function retrieve(key) {
    if(key in localStorage) {
        return JSON.parse(localStorage[key]);
    }
}

export import {calculatePrice} from "../frame.js";

export function displayCartContent() {
    let cart;
    try {
        const cartString = localStorage.cart ;
        cart = JSON.parse(cartString);
    } 
    let cartLink = document.getElementById('cart-link');
    cartLink.innerText = 'Cart'
    if (cart.length !== 0) {
        cartLink.innerText += ` (${cart.length})`
    }
}

export function calculateTotal() {
    let cart;
    try {
        const cartString = localStorage.cart ;
        cart = JSON.parse(cartString);
    } 
    let total = 0.00;
    for (let item of cart) {
        let n = parseFloat(calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2));
        if (!Number.isNaN(n)) {
            total += n;
        }
    }
    return total.toFixed(2).toString();
}import * as ArtworkCache from './artwork-cache.js';
import {render, calculatePrice} from "../frame.js";
import {calculateTotal, displayCartContent} from "./cart-common.js";

document.addEventListener('DOMContentLoaded', initializeCart);

function initializeCart() {
    let cart;
    try {
        const cartString = localStorage.cart ;
        cart = JSON.parse(cartString);
    } 
    const cartContainer = document.getElementById('cart');
    const cartTotalNode = document.getElementsByClassName('cart-total')[0];
    const promises = cart.map(item => getObjectData(item)).reverse();

    if (cart.length === 0)  else {
        Promise.all(promises).then(responses => {
            responses.map((response, index) => {
                const item = response.item;
                const objectData = response.data;

                const cartItem = document.createElement('div');
                cartItem.classList.add('cart-item');
                cartContainer.insertBefore(cartItem, cartTotalNode);

                const cartPreview = document.createElement('div');
                cartPreview.classList.add('cart-preview');
                cartPreview.id = `preview-container-${index}`;
                cartItem.appendChild(cartPreview);

                const cartPreviewA = document.createElement('a');
                cartPreviewA.href = 'config.html?' +
                    `objectID=${item.objectID}&` +
                    `printSize=${item.printSize}&` +
                    `frameStyle=${item.frameStyle}&` +
                    `frameWidth=${item.frameWidth}&` +
                    `matColor=${item.matColor}&` +
                    `matWidth=${item.matWidth}`
                ;
                cartPreview.appendChild(cartPreviewA);

                const cartPreviewAImg = document.createElement('img');
                cartPreviewAImg.classList.add('cart-thumb');
                cartPreviewAImg.id = `preview-${index}`;
                cartPreviewAImg.src = objectData.primaryImageSmall;
                cartPreviewAImg.alt = `${objectData.title} by ${objectData.artistDisplayName}`;
                cartPreviewA.appendChild(cartPreviewAImg);

                const museumLabel = document.createElement('div');
                museumLabel.classList.add('museum-label');
                cartItem.appendChild(museumLabel);

                const museumLabelDiv = document.createElement('div');
                museumLabelDiv.textContent = ', ';
                museumLabel.appendChild(museumLabelDiv);

                const museumLabelDivArtistSpan = document.createElement('span');
                museumLabelDivArtistSpan.classList.add('artist');
                museumLabelDivArtistSpan.innerText = objectData.artistDisplayName;
                museumLabelDiv.insertBefore(museumLabelDivArtistSpan, museumLabelDiv.firstChild);

                const museumLabelDivTitleSpan = document.createElement('span');
                museumLabelDivTitleSpan.classList.add('title');
                museumLabelDivTitleSpan.innerText = objectData.title;
                museumLabelDiv.insertBefore(museumLabelDivTitleSpan, museumLabelDiv.childNodes[1]);

                const museumLabelDivDateSpan = document.createElement('span');
                museumLabelDivDateSpan.classList.add('date');
                museumLabelDivDateSpan.innerText = objectData.objectDate;
                museumLabelDiv.appendChild(museumLabelDivDateSpan);

                museumLabelDiv.appendChild(document.createElement('br'));
                museumLabelDiv.appendChild(document.createElement('br'));

                const museumLabelDivFrameDescription = document.createElement('span');
                museumLabelDivFrameDescription.classList.add('frame-description');
                museumLabelDivFrameDescription.innerText = buildFrameDescriptionText(item);
                museumLabelDiv.appendChild(museumLabelDivFrameDescription);

                const museumLabelCartPrice = document.createElement('div');
                museumLabelCartPrice.classList.add('cart-price');
                museumLabelCartPrice.innerText = '€ ';
                museumLabel.appendChild(museumLabelCartPrice);

                const museumLabelCartPriceSpan = document.createElement('span');
                museumLabelCartPriceSpan.id = `price-${index}`;
                museumLabelCartPriceSpan.innerText =
                    calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2);
                museumLabelCartPrice.appendChild(museumLabelCartPriceSpan);

                const cartRemoveButton = document.createElement('button');
                cartRemoveButton.classList.add('cart-remove');
                cartRemoveButton.id = `removeButton-${index}`;
                cartRemoveButton.type = 'button';
                museumLabel.appendChild(cartRemoveButton);
                render(cartPreviewAImg, cartPreview, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
            });
        }).then(finishCartInit);
    }
}


function buildFrameDescriptionText(item) {
    const titleMapping = {
        S: 'Small',
        M: 'Medium',
        L: 'Large'
    };
    const size = titleMapping[item.printSize] ;
    const sizeNumber = item.frameWidth / 10;
    const frame = item.frameStyle;

    let matText = "";
    if (item.matWidth > 0) {
        const matWidth = item.matWidth / 10;
        const matColor = item.matColor;

        matText = ` with a ${matWidth} cm ${matColor} mat`;
    }

    return `${size} print in a ${sizeNumber} cm ${frame} frame${matText}.`;
}

async function getObjectData(item) {
    try {
        let object = ArtworkCache.retrieve(item.objectID);
        if (!object) 
        return {
            item: item,
            data: object
        };
    }}



function finishCartInit() {
    displayCartContent();
    document.getElementById("price-total").innerText = calculateTotal();
    addRemoveListener();
    addCheckoutListener();
}

function addRemoveListener() {
    let removeCartButtons = document.querySelectorAll('.cart-remove');
    for (let button of removeCartButtons) {
        button.addEventListener('click', );
    }
}

function addCheckoutListener() {
    const checkoutButton = document.getElementById('checkout-button');
    checkoutButton.addEventListener('click', )
    checkoutButton.disabled = false;
}


import * as ArtworkCache from './artwork-cache.js';
import {render, getPrintSizes, calculatePrice} from "../frame.js";
import {displayCartContent} from "./cart-common.js";

const onLoaded = () => {
    const urlParams = new URLSearchParams(window.location.search);
    const objectID = urlParams.get('objectID');
    const printSize = urlParams.get('printSize');
    const frameStyle = urlParams.get('frameStyle');
    const frameWidth = urlParams.get('frameWidth');
    const matColor = urlParams.get('matColor');
    const matWidth = urlParams.get('matWidth');

    init(objectID, printSize, frameStyle, frameWidth, matColor, matWidth);
};

document.addEventListener('DOMContentLoaded', onLoaded);
window.addEventListener('resize', );

function init(objectID, printSize, frameStyle, frameWidth, matColor, matWidth) {
    loadObject(objectID);
    connectFrameWidthInputs();
    connectMatWidthInputs();
    setPrintSize(printSize);
    setFrameStyle(frameStyle);
    setFrameWidth(frameWidth);
    setMatColor(matColor);
    setMatWidth(matWidth);
    attachRangeListeners();
    attachAddToCartListener();
    displayCartContent();
}

function attachAddToCartListener() {
    const addToCartForm = document.getElementById('config-form');
    addToCartForm.addEventListener('submit', )
}

function setPrintSize(printSize) {
    const validValues = ["S", "M", "L"];
    if (!validValues.includes(printSize)) {
        return;
    }}

function setFrameStyle(frameStyle) {
    const validValues = ["classic", "natural", "shabby", "elegant"];
    if (!validValues.includes(frameStyle)) {
        return;
    }}

function setFrameWidth(frameWidth) {
    if (frameWidth === null) {
        return;
    }) }

function setMatColor(matColor) {
    const validValues = ["ivory", "mint", "wine", "indigo", "coal"];
    if (!validValues.includes(matColor)) {
        return;
    }}

function setMatWidth(matWidth) {
    if (matWidth === null) {
        return;
    }) }

function connectFrameWidthInputs() {
    const frameWidthInput = document.getElementsByName('frameWidth')[0];
    const frameWidthSlider = document.getElementsByName('frameWidthR')[0];
    const setValue = ;

    frameWidthInput.addEventListener('change', );
    frameWidthSlider.addEventListener('input', );
}

function connectMatWidthInputs() {
    const matWidthInput = document.getElementsByName('matWidth')[0];
    const matWidthSlider = document.getElementsByName('matWidthR')[0];
    const setValue = ;

    matWidthInput.addEventListener('change', );
    matWidthSlider.addEventListener('input', );
}

function attachRangeListeners() {
    const rangeElementNames = ["printSize", "frameStyle", "matColor"];
    rangeElementNames
        .flatMap(name => Array.from(document.getElementsByName(name)))
        .forEach(element => {
            element.addEventListener('input', );
        });
}

async function loadObject(objectID) {
    if (objectID === null) 

    document.getElementById("object-id").value = objectID;

    const setLabel = (artistDisplayName, title, objectDate) => {
        const labelElement = document.getElementById('image-label');
        const titleDiv = document.createElement("div");
        const titleStrong = document.createElement("strong");
        titleDiv.append(titleStrong);
        titleStrong.innerText = artistDisplayName;

        const titleEm = document.createElement("em");
        titleEm.innerText = `${title}, `;
        const objectDateSpan = document.createElement("span");
        objectDateSpan.innerText = objectDate;

        labelElement.append(titleDiv, titleEm, objectDateSpan);
    };
    let object = ArtworkCache.retrieve(objectID);
    if (!object) 
    const imageElement = document.getElementById('preview-image');
    imageElement.addEventListener('load', () => updateChangeableData());
    imageElement.src = object.primaryImageSmall;
    setLabel(object.artistDisplayName, object.title, object.objectDate);
}

function updateChangeableData() {
    const imageElement = document.getElementById('preview-image');
    const printSizes = getPrintSizes(imageElement);

    const printSize = document.querySelector('input[name="printSize"]:checked').value;
    const frameStyle = document.querySelector('input[name="frameStyle"]:checked').value;
    const frameWidth = document.getElementsByName("frameWidth")[0].value * 10;
    const matWidth = document.getElementsByName("matWidth")[0].value * 10;

    const imageSize = printSizes[printSize];

    renderImage(printSize, frameStyle, frameWidth, matWidth);
    updatePrintSizeLabel(printSizes);
    updatePriceSum(printSize, frameStyle, frameWidth, matWidth);
    updateTotalSize(imageSize, frameWidth, matWidth);
}

function renderImage(printSize, frameStyle, frameWidth, matWidth) {
    const imageElement = document.getElementById('preview-image');
    const imageContainer = document.getElementById('preview-container');
    const matColor = document.querySelector('input[name="matColor"]:checked').value;
    render(imageElement, imageContainer, printSize, frameStyle, frameWidth, matColor, matWidth);
}

function updatePrintSizeLabel(printSizes) {
    const smallLabel = document.getElementById("print-size-s-label");
    const mediumLabel = document.getElementById("print-size-m-label");
    const largeLabel = document.getElementById("print-size-l-label");

    const printSizeMapping = {
        S: smallLabel,
        M: mediumLabel,
        L: largeLabel
    };

    const titleMapping = {
        S: 'Small',
        M: 'Medium',
        L: 'Large'
    };

    const setContent = (element, title, width, height) => {
        element.innerHTML = '';

        const titleSpan = document.createElement("span");
        titleSpan.innerText = title;

        const sizeSpan = document.createElement("span");
        const widthCM = width / 10;
        const heightCM = height / 10;
        sizeSpan.innerText = `${widthCM} × ${heightCM} cm`;

        element.append(titleSpan, sizeSpan);
    };

    Object.keys(printSizeMapping).forEach(printSizeKey => {
        const [width, height] = printSizes[printSizeKey];
        const element = printSizeMapping[printSizeKey];

        setContent(element, titleMapping[printSizeKey], width, height);
    })
}

function updatePriceSum(printSize, frameStyle, frameWidth, matWidth) {
    const price = calculatePrice(printSize, frameStyle, frameWidth, matWidth);

    const totalPriceField = document.getElementById("price");
    totalPriceField.innerText = `€ ${price.toFixed(2)}`;
}

function updateTotalSize(imageSize, frameWidth, matWidth) {
    const imageWidth = imageSize[0];
    const imageHeight = imageSize[1];

    const printPadding = 2 * matWidth + 2 * frameWidth;
    const totalWidth = imageWidth + printPadding;
    const totalHeight = imageHeight + printPadding;

    const widthCM = totalWidth / 10;
    const heightCM = totalHeight / 10;
    const totalSizeField = document.getElementById("total-size");
    totalSizeField.innerText = `${widthCM} × ${heightCM} cm`;
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    const frameWidthCm = frameWidth / 10;
    switch (frameStyle) {
        
        case 'natural':
            price += 0.8 * frameWidthCm;
            break;
        
        case 'elegant':
            price += 0.85 * frameWidthCm;
            break;
    }

    const matWidthCm = matWidth / 10;
    price += 0.05 * matWidthCm;

    switch (printSize) {
        case 'M':
            price *= 2;
            break;
        
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import * as ArtworkCache from './artwork-cache.js';
import {displayCartContent} from "./cart-common.js";

const onLoaded = () => {
    const query = (new URL(document.location)).searchParams.get('q');
    displayCartContent();
    if (query) {
        document.querySelector('#search').value = query;
        submitSearch(query);
    }
};

document.addEventListener('DOMContentLoaded', onLoaded);

async function submitSearch(query) {
    const searchInfo = document.querySelector('#search-info');
    searchInfo.innerText = `Searching for “${query}”...`;
    let results = await queryArtworks(query);
    searchInfo.innerText = `Found ${results.length} artwork${results.length !== 1 ? 's' } for “${query}”`;
    insertResultsIntoDOM(results);
}



function insertResultsIntoDOM(results) {
    const resultsContainer = document.querySelector('#gallery');
    resultsContainer.innerHtml = '';
    results.map(r => createArtworkElement(r)).forEach(e => resultsContainer.appendChild(e));
}

async function queryArtworks(query) {
    const response = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?q=${query}&hasImages=true`);
    const responseJson = await response.json();
    if (responseJson.total > 0) {
        const objectIds = responseJson.objectIDs.slice(0, 100);
        const artworks = [];
        const batchRequestIds = [];
        objectIds.forEach(objectId => {
            const object = ArtworkCache.retrieve(objectId);
            if (object) {
                artworks.push(object);
            }
        });
        const requestedArtworks = await batchFetchArtworks(batchRequestIds);
        requestedArtworks.forEach();
        artworks.push(...requestedArtworks);
        return artworks;
    }}

async function batchFetchArtworks(objectIds) {
    return await Promise.all(objectIds.map());
}

function createArtworkElement(artwork) {
    const artistSpan = document.createElement('span');
    artistSpan.classList.add('artist');
    artistSpan.innerText = artwork.artistDisplayName;
    const titleSpan = document.createElement('span');
    titleSpan.classList.add('title');
    titleSpan.innerText = artwork.title;
    const dateSpan = document.createElement('span');
    dateSpan.classList.add('date');
    dateSpan.innerText = artwork.objectDate;
    const museumLabelContainer = document.createElement('div');
    museumLabelContainer.classList.add('museum-label');
    museumLabelContainer.append(artistSpan, titleSpan, ', ', dateSpan);
    const image = document.createElement('img');
    image.src = artwork.primaryImageSmall;
    const link = document.createElement('a');
    link.href = `config.html?objectID=${artwork.objectID}`;
    link.append(image, museumLabelContainer);
    const artworkElement = document.createElement('div');
    artworkElement.classList.add('thumb');
    artworkElement.appendChild(link);
    return artworkElement;
}