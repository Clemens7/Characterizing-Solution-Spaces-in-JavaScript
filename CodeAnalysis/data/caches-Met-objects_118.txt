export function retrieve(searchTerm) {
    if (searchTerm in localStorage){
        console.log(`Retrieving ${searchTerm} from local storage`);
        return JSON.parse(localStorage[searchTerm]);
    }
}

export 
export class Artwork {
    constructor(objectID, title, artist, imageURL, date) {
      this.objectID = objectID;
      this.title = title;
      this.artist = artist;
      this.imageURL = imageURL;
      this.date = date;
    }
  }export function updateCartItemsNumber() {
    let cart = [];
    if (localStorage.getItem("cart") !== null) {
        cart = localStorage.getItem("cart");
        cart = JSON.parse(cart);
    }
    if (cart.length > 0) {
        document.getElementById('cart-link').innerHTML = "Cart (" + cart.length + ")";
    }
}
import { Artwork } from "./artwork.js";
import { calculatePrice } from "./frame.js";
import { render } from "./frame.js";
import { updateCartItemsNumber } from "./cart-numbers.js";


window.addEventListener('storage', );

displayItems();

function parseToArtwork(artwork_json) {
    return new Artwork(artwork_json.objectID, artwork_json.title, artwork_json.artistDisplayName, artwork_json.primaryImageSmall, artwork_json.objectDate);
}

function displayItems() {
    let cart = [];
    if (localStorage.getItem("cart") !== null) {
        cart = localStorage.getItem("cart");
        cart = JSON.parse(cart);
    }

    if (cart.length !== 0) {
        let i;
        for (i = 0; i < cart.length; i++) {
            addCartItem(cart[i], i)
        }
        document.getElementById('checkout-button').disabled = false;
        getSum();
    }
}



function addCartItem(item, i) {
    let pictureElement;
    let k;
    for (k = 0; k < localStorage.length; k++) {
        let storage = localStorage.getItem(localStorage.key(k));

        storage = JSON.parse(storage);
        let j;
        for (j = 0; j < storage.length; j++) {
            let obj = storage[j];
            if (obj.objectID === item.objectID) {
                pictureElement = new Artwork(obj.objectID, obj.title, obj.artistDisplayName, obj.primaryImageSmall, obj.objectDate);
                break;
            }
        }
    }


    if (pictureElement.title === undefined ) {
        fetch(`https://collectionapi.metmuseum.org/public/collection/v1/objects/${item.objectID}`)
            .then((response) => {
                return response.json();
            }
        ).then(result => {
            pictureElement = parseToArtwork(result);
            createCartItemHtml(pictureElement, item, i);

            let cartCache = JSON.parse(localStorage.getItem("cartCache"));
            if (cartCache === null) 
            cartCache.push(new Artwork(result.objectID, result.artistDisplayName, result.title, result.primaryImageSmall, result.objectDate));
            localStorage.setItem("cartCache", JSON.stringify(cartCache));
        });
    }
}

function createCartItemHtml(pictureElement, item, i) {
    const outerContainer = document.createElement('div');
    outerContainer.className = `cart-item`;
    outerContainer.id = i;

    const firstContainer = document.createElement('div');
    firstContainer.className = `cart-preview`;

    const link = document.createElement('a');
    link.href = 'config.html' + "?objectID=" + item.objectID + "&printSize=" + item.printSize + "&frameStyle=" + item.frameStyle +
        "&frameWidth=" + item.frameWidth + "&matColor=" + item.matColor + "&matWidth=" + item.matWidth;
    link.id = `object-`+ item.objectID;

    const img = document.createElement('img');
    img.src = '' + pictureElement.imageURL;
    img.alt = ``;
    img.id = `preview-image-`+ item.objectID;
    img.className = `cart-thumb`;

    img.addEventListener('load', ()=> render(img, firstContainer, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth));

    const secondContainer = document.createElement('div');
    secondContainer.className = `museum-label`;

    const secondInnerContainer = document.createElement('div');

    const artist = document.createElement('span');
    artist.className = `artist`;
    artist.innerText = '' + pictureElement.artist;

    const title = document.createElement('span');
    title.className = 'title';
    title.innerText = '' + pictureElement.title;

    const date = document.createElement('span');
    date.innerText = ", " + pictureElement.date;

    const breakLine = document.createElement('p');

    const description = document.createElement('span');
    description.className = `frame-description`;
    let text = "";
    if (item.printSize === 'S') {
        text += "Small"
    } else if (item.printSize === 'M') {
        text += "Medium"
    }
    text += " print in a " + (item.frameWidth/10) + " cm " + item.frameStyle + " frame";
    if (item.matWidth > 0) {
        text += " with a " + (item.matWidth/10) + " cm " + item.matColor + " mat."
    }
    description.innerText = text;

    const secondPriceContainer = document.createElement('div');
    secondPriceContainer.className = `cart-price`;
    secondPriceContainer.innerText = "€ ";

    const price = document.createElement('span');
    price.id = `price-` + i;
    price.innerText = "" + calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);

    const button = document.createElement('button');
    button.className = 'cart-remove';
    button.onclick = ;

    outerContainer.appendChild(firstContainer);
    outerContainer.appendChild(secondContainer);
    firstContainer.appendChild(link);
    link.appendChild(img);
    secondContainer.appendChild(secondInnerContainer);
    secondInnerContainer.appendChild(artist);
    secondInnerContainer.appendChild(title);
    secondInnerContainer.appendChild(date);
    secondInnerContainer.appendChild(breakLine);
    secondInnerContainer.appendChild(breakLine);
    secondInnerContainer.appendChild(description);
    secondContainer.appendChild(secondPriceContainer);
    secondPriceContainer.appendChild(price);
    secondContainer.appendChild(button);

    document.getElementById('cart').insertAdjacentElement("afterbegin", outerContainer);
    updateCartItemsNumber();
}



function getSum() {
    let sum = 0;
    let i;
    let cart = JSON.parse(localStorage.getItem("cart"));
    for (i = 0; i < cart.length; i++) {
        let item = cart[i];
        sum += calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth)
    }
    document.getElementById('price-total').innerText = sum.toString();
}




import {calculatePrice, getPrintSizes, render} from "./frame.js";
import {updateCartItemsNumber} from "./cart-numbers.js";
import {Artwork} from "./artwork.js";

function load_img() {
    const urlParams = new URLSearchParams(window.location.search);
    const myParam = urlParams.get('objectID');
    if (myParam== null || myParam.length === 0)

    let input_params = getCurrentInputValues();

    let pictureElement;
    let k;
    for (k = 0;  k < localStorage.length; k++) {
        let storage = localStorage.getItem(localStorage.key(k));
        storage = JSON.parse(storage);
        let j;
        for (j = 0; j < storage.length; j++) {
            let obj = storage[j];
            if (obj.objectID ===  Number(myParam)) {
                pictureElement = new Artwork(obj.objectID, obj.title, obj.artistDisplayName, obj.primaryImageSmall, obj.objectDate);
                break;
            }
        }
    }

    let image = document.getElementById("preview-image");
    let imageContainer = document.getElementById("preview-container");

    if (pictureElement == null)  else {
        image.src = pictureElement.imageURL;
        render(image, imageContainer, input_params.printSize, input_params.frameStyle, input_params.frameWidth, input_params.matColor, input_params.matWidth);
        let labelContainer = document.getElementById("image-label");
        labelContainer.innerHTML += `
            <span class="artist">${pictureElement.artist}</span>
            <span class="title">${pictureElement.title}</span></br>
            <span class="date">${pictureElement.date}</span>`;

    }

    update();
    setupSizes();
}


function getCurrentInputValues(){
    const objIdField = document.getElementsByName("object-id");
    let objectId = Number(objIdField.value);

    let printSize = "M";
    let frameStyle = "natural";
    let frameWidth = 40;
    let matWidth = 50;


    let matColor = "mint";


    let sizes = document.getElementsByName("printSize");
    for (let size of sizes){
        if (size.checked) {
            printSize = size.value;
            break;
        }
    }

    let frameWithInput = document.getElementById(`frameWidth`);
    if (frameWithInput !== null) {
        frameWidth = Number(frameWithInput.value) * 10;
    }

    let frame_styles = document.getElementsByName("frameStyle");
    for (let style of frame_styles){
        if (style.checked) {
            frameStyle = style.value;
            break;
        }
    }

    let matWidthInput = document.getElementById(`matWidth`);
    if (matWidthInput !== null) {
        matWidth = Number(matWidthInput.value) * 10;
    }

    let mat_style = document.getElementsByName("matColor");
    for (let style of mat_style){
        if (style.checked) {
            matColor = style.value;
            break;
        }
    }

    let size_Object = {
        objectID: objectId,
        printSize: printSize,
        frameStyle: frameStyle,
        frameWidth: frameWidth,
        matWidth: matWidth,
        matColor: matColor
    }

    return size_Object;
}

function update(){

    let input_params = getCurrentInputValues();


    let image = document.getElementById("preview-image");
    let imageContainer = document.getElementById("preview-container");
    let arr = getPrintSizes(image);

    image.height = arr[input_params.printSize][0];
    image.width = arr[input_params.printSize][1];
    render(image, imageContainer, input_params.printSize, input_params.frameStyle, input_params.frameWidth, input_params.matColor, input_params.matWidth);

    let priceTag = document.getElementById("price");
    let price = calculatePrice(input_params.printSize, input_params.frameStyle, input_params.frameWidth, input_params.matWidth);
    priceTag.innerText = "€ "+(price.toFixed(2));


    let sizeTag = document.getElementById("total-size");
    let sizes = getPrintSizes(image);
    let height = sizes[input_params.printSize][0] + (input_params.frameWidth * 2) + (input_params.matWidth * 2);
    let width = sizes[input_params.printSize][1] + (input_params.frameWidth * 2) + (input_params.matWidth * 2);
    sizeTag.innerHTML =`${height / 10} &times; ${width / 10} cm`;

}

function addConfigEventListeners() {
    const inputElements = document.getElementsByTagName("input");
    for (let element of inputElements) {
        if (element.id === "frameWidth"){
            element.addEventListener("change", syncSliders_frame_slider);
            continue;
        }
        if (element.id === "frameWidthR"){
            element.addEventListener("change", syncSliders_frame_input);
            continue;
        }
        if (element.id === "matWidth"){
            element.addEventListener("change", syncSliders_mat_slider);
            continue;
        }
        if (element.id === "matWidthR"){
            element.addEventListener("change", syncSliders_mat_input);
            continue;
        }

        element.addEventListener("change", update);

    }
    let addToCartButton = document.getElementById('subButton');
    addToCartButton.addEventListener("click", addToCart);
}









function setupSizes() {

    let image = document.getElementById("preview-image");
    let imageContainer = document.getElementById("preview-container");

    let printSizes = getPrintSizes(image);
    let relevantLabel_S = document.getElementById(`print-size-s-label`);
    relevantLabel_S.innerHTML =
        `${"Small"}<br>${printSizes["S"][0] / 10} &times; ${printSizes["S"][1] / 10} cm`;

    let relevantLabel_M = document.getElementById(`print-size-m-label`);
    relevantLabel_M.innerHTML =
        `${"Medium"}<br>${printSizes["M"][0] / 10} &times; ${printSizes["M"][1] / 10} cm`;

    let relevantLabel_L = document.getElementById(`print-size-l-label`);
    relevantLabel_L.innerHTML =
        `${"Large"}<br>${printSizes["L"][0] / 10} &times; ${printSizes["L"][1] / 10} cm`;
}

function translateUrlParamsToFrom() {
    const urlParams = new URLSearchParams(window.location.search);
    let myParam = urlParams.get('objectID');

    const objIdField = document.getElementsByName("object-id");

    if (myParam !== null) {
        objIdField.value = Number(myParam);
    }

    let printSizes_values = ["S","M","L"];
    let mat_Colors= ["ivory", "mint", "wine", "indigo", "coal"];
    let frame_styles = ["classic", "natural", "shabby", "elegant"];

    let min_frame = 2;
    let max_frame = 5;

    let min_mat = 0;
    let max_mat = 10;

    myParam = urlParams.get('printSize');
    if (myParam != null)

    myParam = urlParams.get('frameStyle');
    if (myParam != null)

    myParam = urlParams.get('matColor');
    if (myParam != null)

    let myParam_X = urlParams.get('frameWidth');
    if (myParam_X !== null)

    myParam_X = urlParams.get('matWidth');
    if (myParam_X !== null)
    
}




translateUrlParamsToFrom();
load_img();
addConfigEventListeners();
updateCartItemsNumber();



export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    frameWidth = frameWidth / 10;
    matWidth = matWidth / 10;
    let baseCost = 30;
    let matCost = matWidth * 0.05;
    let size;

    let frameCost;

    switch (printSize) {

        case "M":
            size = 2;
            break;
        
        default:
            size = 1;
    }
    switch (frameStyle) {
        
        case 'natural':
            frameCost = frameWidth * 0.8;
            break;
        
        case 'elegant':
            frameCost = frameWidth * 0.85;
            break;
    }
    let price = (baseCost + matCost + frameCost) * size;
    return Math.round((price * 100)) / 100;
}



    import { Artwork } from './artwork.js';
    import * as ACache from './artwork-cache.js';
    import { updateCartItemsNumber } from "./cart-numbers.js";

    updateCartItemsNumber();

    const gallery = document.getElementById('gallery');

    const loadHighlights = 



    const search = async query => {
      const text = document.getElementById('search-info');
      text.innerText = `Searching for “${query}”...`;

      gallery.innerHTML = '';

      var artworks_json = ACache.retrieve(query);

      if (!artworks_json)  else {
        text.innerText = artworks_json.length === 1  : `Found ${artworks_json.length} artworks for “${query}”`;
        var artworks = [];
        console.log(artworks_json);

        artworks = artworks_json.map(artwork_json => parseToArtwork(artwork_json));
        artworks.map(artwork => renderElement(artwork));
      }

    }




    




    




    function parseToArtwork(artwork_json) {
      return new Artwork(artwork_json.objectID, artwork_json.title, artwork_json.artistDisplayName, artwork_json.primaryImageSmall, artwork_json.objectDate);
    }




    function renderElement(artwork) {
      const outerContainer = document.createElement('div');
      outerContainer.className = `thumb`;

      const link = document.createElement('a');
      link.href = `config.html?objectID=${artwork.objectID}`;
      link.id = `object-${artwork.objectID}`;

      const img = document.createElement('img');
      img.src = `${artwork.imageURL}`;
      img.alt = ``;
      img.id = `object-image-${artwork.objectID}`;

      const innerContainer = document.createElement('div');
      innerContainer.className = `museum-label`;

      const artist = document.createElement('span');
      artist.className = `artist`;
      artist.innerText = `${artwork.artist}`;

      const title = document.createElement('span');
      title.className = `title`;
      title.innerText = `${artwork.title}, `;

      const date = document.createElement('span');
      date.className = `date`;
      date.innerText = `${artwork.date}`;

      gallery.appendChild(outerContainer);
      outerContainer.appendChild(link);
      link.appendChild(img);
      link.appendChild(innerContainer);
      innerContainer.appendChild(artist);
      innerContainer.appendChild(title);
      innerContainer.appendChild(date);
    }

    const urlParams = new URLSearchParams(window.location.search);
    const q = urlParams.get('q');

    document.addEventListener('DOMContentLoaded', () => {

      if (q === null || q === '')  else {
        search(q);
      }
    });

    const form = document.querySelector('#search_input');
    form.addEventListener('submit', );

  