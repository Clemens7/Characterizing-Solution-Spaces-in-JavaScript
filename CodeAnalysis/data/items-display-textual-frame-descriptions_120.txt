
    import {Picture} from './picture.js';
    import * as FrameHelper from './frame.js';
    import * as DOMHelper from './dom-helpers.js';
    import * as PictureAPI from './picture-api.js';
    import * as Storage from './picture-storage.js';
    import * as CartHelper from './cart.js';
    const sizeDict = {
        S: "Small",
        M: "Medium",
        L: "Large"
    };

    document.getElementById("cart-link").innerText = CartHelper.getCartString();

    let checkout_button = document.getElementById("checkout-button");
      checkout_button.addEventListener("click", );

    let cart = null;
    if ("cart" in window.localStorage) {
      cart = Storage.get("cart");
    }

    if (!cart) 

    let total_price = 0.0;

    if(cart){
    for (let i=0; i<cart.length; i++) {
      let elem = cart[i];
      let frame_desc = sizeDict[elem.printSize] + " print in a " + (parseFloat(elem.frameWidth)/10.0) + " cm " + elem.frameStyle + " frame";
      if (parseFloat(elem.matWidth) > 0) {
        frame_desc += " with a " + (parseFloat(elem.matWidth)/10.0) + " cm " + elem.matColor + " mat";
      }
      frame_desc += ".";
      let objID = elem.objectID;
      let url = "config.html?objectID="+objID+"&printSize="+elem.printSize+"&frameWidth="+elem.frameWidth+"&frameStyle="+elem.frameStyle+"&matWidth="+elem.matWidth+"&matColor="+elem.matColor;
      
      

      let price_elem = DOMHelper.setClassList(DOMHelper.innerTextElement("â‚¬ ", "div"), ["cart-price"]);
      price_elem.appendChild(DOMHelper.setAttributes(DOMHelper.innerTextElement("0", "span"), {id: "price-"+i}));

      let artist = DOMHelper.innerTextElement("", "span");
      artist.id = "picture-artist-"+i;
      let title = DOMHelper.innerTextElement("" + ", ", "span");
      title.id = "picture-title-"+i;
      let date = DOMHelper.innerTextElement("", "span");
      date.id = "picture-date-"+i;
      let container1 = DOMHelper.container([
                           DOMHelper.setClassList(artist, ["artist"]),
                           DOMHelper.setClassList(title, ["title"]),
                           DOMHelper.setClassList(date, ["date"]),
                           document.createElement("br"),
                           document.createElement("br"),
                           DOMHelper.setClassList(DOMHelper.innerTextElement(frame_desc, "span"), ["frame-description"])
                       ], "div");
      let delete_button = document.createElement("button");
      delete_button.addEventListener("click", );
      let container2 = DOMHelper.setClassList(DOMHelper.container([
                                                  container1,
                                                  price_elem,
                                                  DOMHelper.setClassList(delete_button, ["cart-remove"])
                                              ], "div"),
                                              ["museum-label"]);
      let image = document.createElement("img");
      image.className = "cart-thumb";
      image.id = "preview-"+i;
      let link = DOMHelper.container([image], "a");
      link.href = url;
      let container3 = DOMHelper.container([link], "div");
      container3.className = "cart-preview";
      container3.id = "preview-container-"+i;
      let final = DOMHelper.container([container3, container2], "div");
      final.className = "cart-item";
      document.getElementById("cart").appendChild(final);

      let frame_price = FrameHelper.calculatePrice(elem.printSize, elem.frameStyle, elem.frameWidth, elem.matWidth);
      if (frame_price) {
        total_price += frame_price;
        document.getElementById("price-"+i).innerText = frame_price.toFixed(2);
      }

      let cart_elem = document.getElementById("cart");
      cart_elem.insertBefore(final, cart_elem.firstChild);

      if(PictureAPI.retrieve_picture(objID) !== null) {
        PictureAPI.retrieve_picture(objID).then((picture) => {
          document.getElementById("picture-artist-"+i).innerText = picture.artist;
          document.getElementById("picture-title-"+i).innerText = picture.title+", ";
          document.getElementById("picture-date-"+i).innerText = picture.date;
          document.getElementById("preview-"+i).src = picture.imageURLSmall;
          document.getElementById("preview-"+i).alt = picture.title;
          let current_image = document.getElementById("preview-"+i);
          let image_container = document.getElementById("preview-container-"+i);
          FrameHelper.render(current_image, image_container, elem.printSize, elem.frameStyle, elem.frameWidth, elem.matColor, elem.matWidth);
        });
      }
    }
    }

    document.getElementById("price-total").innerText = total_price.toFixed(2);
  import * as Storage from './picture-storage.js'

/*
export function getCartString() {
    let cart = Storage.get("cart");
    if (!cart || cart.length < 1) 
    let cart_string = "Cart ("+cart.length+")";
    return cart_string;
}
export function setAttributes(element, attributes) {
    for (let key in attributes) {
        if (typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }

    return element;
}

export function setClassList(element, classes) {
    for (let className of classes) {
        if (!element.classList.contains(className)) {
            element.classList.add(className);
        }
    }
    return element;
}

export function container(children, tag='div') {
    const container = document.createElement(tag);
    for (let child of children) {
        container.appendChild(child);
    }
    return container;
}

export function innerTextElement(text, tag) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    switch(frameStyle) {
        case 'classic': price += (frameWidth / 10);
            break;
        
        case 'shabby': price += (frameWidth / 10) * 0.9;
            break;
        
        
    }

    price += matWidth / 10.0 * 0.05;

    switch(printSize) {
        
        case 'L': price *= 3.5;
            break;
        default:
            break;
    }
    
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import { Picture } from './picture.js';
import * as PictureCache from './picture-storage.js';

const SEARCH_RESULT_SIZE = 100;

export async function retrieve_picture(objectID) {
    let picture = PictureCache.get(objectID);
    if(picture)
    

    const url = object_url(objectID);

    try {
        const response = await fetch(url);
        if (response.status !== 200) 

        const pictureData = await response.json();
        picture = new Picture(
            objectID,
            pictureData.primaryImage,
            pictureData.primaryImageSmall,
            pictureData.artistDisplayName,
            pictureData.title,
            pictureData.objectDate
        );
        PictureCache.store(objectID, picture);
        return picture;
    }}

export 

export 

function object_url(objectID) {
    const API_URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
    return API_URL;
}



export function get(key) {
    if (key in window.localStorage) {
        return JSON.parse(window.localStorage[key]);
    }
}

export function store(key, data) {
    localStorage[key] = JSON.stringify(data);
}export class Picture {
    constructor(objectID, imageURL, imageURLSmall, artist, title, date) {
        this.objectID = objectID;
        this.imageURL = imageURL;
        this.imageURLSmall = imageURLSmall;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}