import * as DOM from './dom-helpers.js';
import * as FRAME from '../frame.js';
import * as COMMONS from "./commons.js";

let cartItems = [];

window.onload = function WindowLoad() {
    cartItems = COMMONS.retrieveCartFromCache();
    if (cartItems.length > 0) {
        Promise.all(
            cartItems.map(async (e) => {
                let imgMeta = JSON.parse(localStorage.getItem(e.objectID));
                if (!imgMeta) 
                let itemPrice = FRAME.calculatePrice(e.printSize, e.frameStyle, e.frameWidth, e.matWidth);
                addCartItemToCart(imgMeta, e, itemPrice.toFixed(2));
                let img = document.getElementById(`preview-${imgMeta.objectID}`);
                let container = document.getElementById(`preview-container-${imgMeta.objectID}`);
                FRAME.render(img, container, e.printSize, e.frameStyle, e.frameWidth, e.matColor, e.matWidth);
                removeButtonAttachDeleteListener();
            })
        );
        COMMONS.storeCartInCache(cartItems);
    }
    attachTotalPrice();
    showHeaderNoItems();
    attachButtonCheckoutNavigation();
}

function addCartItemToCart(imgMeta, cartItem, price) {
    const cart = document.getElementById('cart');
    cart.insertBefore(createCartItem(imgMeta, cartItem, price), cart.firstChild);
}

function createCartItem(meta, item, price) {
    let configuration = rawDescriptionsToText(item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
    let hrefToConfig = `config.html?objectID=${meta.objectID}&printSize=${item.printSize}&frameStyle=${item.frameStyle}`;
    hrefToConfig = hrefToConfig.concat(`&frameWidth=${item.frameWidth}&matColor=${item.matColor}&matWidth=${item.matWidth}`);

    localStorage.setItem(meta.objectID, JSON.stringify(meta));
    return DOM.setAttributes(DOM.container([DOM.setAttributes(DOM.container([DOM.setAttributes(
        DOM.container([DOM.setAttributes(document.createElement('img'), {
            className: 'cart-thumb', src: meta.primaryImageSmall, id: `preview-${meta.objectID}`,
            alt: 'The picture ' + meta.title
        })], 'a'), {href: `${hrefToConfig}`})]), {
        className: 'cart-preview', id: `preview-container-${meta.objectID}`
    }),
        DOM.setAttributes(DOM.container([DOM.container([DOM.setAttributes(DOM.textElement('span', meta.artistDisplayName),
            {className: 'artist'}), DOM.setAttributes(DOM.textElement('span', meta.title + ', '),
            {className: 'title'}), DOM.setAttributes(DOM.textElement('span', meta.objectDate),
            {className: 'date'}), DOM.textElement('br', ''), DOM.textElement('br', ''),
                DOM.setAttributes(DOM.textElement('span', configuration), {className: 'frame-description'})]),
                DOM.setAttributes(DOM.container([DOM.setAttributes(DOM.textElement('span', '€ ' + price),
                    {id: `price-${meta.objectID}`})]), {className: 'cart-price'}), DOM.setAttributes(
                DOM.container([], 'button'), {className: 'cart-remove', id: `remove-${meta.objectID}`})]),
            {className: 'museum-label'}),]), {className: 'cart-item'});
}

function rawDescriptionsToText(printSize, frameStyle, frameWidth, matColor, matWidth) {
    let description = '';
    switch (printSize) {
        case "S": description = description.concat('Small'); break;
        case "M": description = description.concat('Medium'); break;
         }
    description = description.concat(' print in a');
    frameWidth > 0 ? description = description.concat(` ${frameWidth / 10} cm`) ;
    description = description.concat(` ${frameStyle} frame`);
    matWidth > 0 ? description = description.concat(` with a ${matWidth / 10} cm ${matColor} mat`) ;
    return description.concat('.');
}

function removeButtonAttachDeleteListener() {
    let removeButtons = document.getElementsByClassName('cart-remove');
    for (let button of removeButtons) {
        button.onclick = 
    }
}

function attachTotalPrice() {
    let priceTotal = 0;
    for (const item of cartItems) {
        priceTotal += FRAME.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth) * 100;
    }
    document.getElementById('price-total').innerText = (priceTotal / 100).toFixed(2);
}

function showHeaderNoItems() {
    if (COMMONS.showCartItemsNumber() === 0) 
}



function attachButtonCheckoutNavigation() {
    document.getElementById('checkout-button').onclick = 
}import * as DOM from "./dom-helpers.js";

const CACHE_KEY = 'cart';
const ENDPOINT = "https://collectionapi.metmuseum.org/public/collection/v1/";

export class CartItem {
    
}

export function storeCartInCache(cart) {
    console.log(`Storing ${CACHE_KEY} in local storage`);
    localStorage[CACHE_KEY] = JSON.stringify(cart);
}

export function retrieveCartFromCache() {
    const key = CACHE_KEY;
    if (key in localStorage) {
        return JSON.parse(localStorage[key]);
    }
}

export 

export function showCartItemsNumber() {
    let cartLink = document.getElementById('cart-link');
    let cart = retrieveCartFromCache()
    if (cart.length === 0)  else {
        DOM.setAttributes(cartLink, {innerText: `Cart (${cart.length})`})
    }
    return cart.length;
}

export import * as COMMONS from "./commons.js";
import * as frame from "../frame.js";

const ENDPOINT = "https://collectionapi.metmuseum.org/public/collection/v1/";

window.update = update;
window.addToCart = addToCart;

window.onload = async function WindowLoad() {
  COMMONS.showCartItemsNumber();
  const urlParams = new URLSearchParams(window.location.search);
  const objectID = urlParams.get("objectID");
  const printSize = urlParams.get("printSize");
  const frameWidth = urlParams.get("frameWidth");
  const frameStyle = urlParams.get("frameStyle");
  const matWidth = urlParams.get("matWidth");
  const matColor = urlParams.get("matColor");

  if (printSize) 
  if (frameWidth) 
  if (frameStyle) 
  if (matWidth) 
  if (matColor) 

  if (!objectID) 
  const cachedImage = localStorage.getItem(objectID);
  const imgData = cachedImage   : await getImageData(objectID);

  imgData.primaryImageSmall ? setThumbnail(imgData) ;
};

async function getImageData(objectID) {
  const res = await fetch(`${ENDPOINT}objects/${objectID}`);
  return res.json();
}

function setThumbnail(imgData) {
  const urlParams = new URLSearchParams(window.location.search);
  const img = document.getElementById("preview-image");
  img.setAttribute("src", imgData.primaryImageSmall);
  const container = document.getElementById("preview-container");
  const printSize = urlParams.get("printSize") || "M";
  const frameWidth = urlParams.get("frameWidth") || 40;
  const frameStyle = urlParams.get("frameStyle") || "natural";
  const matWidth = urlParams.get("matWidth") || 55;
  const matColor = urlParams.get("matColor") || "mint";

  const printSizes = frame.getPrintSizes(img);

  document.getElementById(
    "print-size-s-label"
  ).innerHTML = `Small<br />${printSizes.S[0]} × ${printSizes.S[1]} cm`;
  document.getElementById(
    "print-size-m-label"
  ).innerHTML = `Medium<br />${printSizes.M[0]} × ${printSizes.M[1]} cm`;
  document.getElementById(
    "print-size-l-label"
  ).innerHTML = `Large<br />${printSizes.L[0]} × ${printSizes.L[1]} cm`;

  frame.render(
    img,
    container,
    printSize,
    frameStyle,
    frameWidth,
    matColor,
    matWidth
  );

  const price = frame.calculatePrice(
    printSize,
    frameStyle,
    frameWidth,
    matWidth
  );

  document.getElementById("price").innerHTML = `€ ${price.toFixed(2)}`;
  document.getElementById("total-size").innerHTML = `${
    parseInt(printSizes[printSize][0]) + frameWidth / 10 + matWidth / 10
  } × ${
    parseInt(printSizes[printSize][1]) + frameWidth / 10 + matWidth / 10
  } cm`;

  const label = document.getElementById("image-label");
  label.set;

  const artist = document.createElement("span");
  artist.setAttribute("class", "artist");
  artist.innerHTML = imgData.artistDisplayName;

  const title = document.createElement("span");
  title.setAttribute("class", "title");
  title.innerHTML = `${imgData.title}, `;

  const date = document.createElement("span");
  date.setAttribute("class", "date");
  date.innerHTML = imgData.objectDate;

  label.appendChild(artist);
  label.appendChild(title);
  label.appendChild(date);
}






export 

export function setAttributes(element, attributes) {
    for(let key in attributes) {
        if(typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

export function textElement(tag, text) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}

export function container(elements, tag='div') {
    const container = document.createElement(tag);
    for(let element of elements) {
        container.appendChild(element);
    }
    return container;
}
export function getPrintSizes(img) {
  let S = [297, 297]; // A4
  let M = [420, 420]; // A3
  let L = [594, 594]; // A2

  const w = img.naturalWidth;
  const h = img.naturalHeight;

  if (h > w)  else {
    S[1] = Math.floor((h * S[0]) / w);
    M[1] = Math.floor((h * M[0]) / w);
    L[1] = Math.floor((h * L[0]) / w);
  }

  return { S: S, M: M, L: L };
}

export function render(
  img,
  container,
  printSize,
  frameStyle,
  frameWidth,
  matColor,
  matWidth
) {
  const printSizes = getPrintSizes(img);
  const w = printSizes[printSize][0];
  const h = printSizes[printSize][1];

  let x;
  if (w > h)  else {
    x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
  }

  const frameImageSlices = {
    classic: 115,
    natural: 75,
    shabby: 120,
    elegant: 107,
  };

  const matColors = {
    ivory: "#fffff0",
    mint: "#e0e6d4",
    wine: "#50222d",
    indigo: "#29434c",
    coal: "#333a3d",
  };

  img.style.boxSizing = "border-box";
  img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
  img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
  img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
  img.style.borderImageSlice = frameImageSlices[frameStyle];
  img.style.borderWidth = `${frameWidth * x}px`;
  img.style.backgroundColor = matColors[matColor];
  img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
  let price = 30.0;
  const widthCM = frameWidth / 10;
  if (frameStyle === "classic")  else if (frameStyle === "natural") {
    price += widthCM * 0.8;
  } else if (frameStyle === "shabby")  else if (frameStyle === "elegant") {
    price += widthCM * 0.85;
  }

  price += (matWidth / 10) * 0.05;

  if (printSize === "M") {
    price = price * 2;
  } else if (printSize === "L") 

  return Math.round((price + Number.EPSILON) * 100) / 100;
}
const ENDPOINT = 'https://collectionapi.metmuseum.org/public/collection/v1/';

window.onload = async function WindowLoad(event) {
	getCart();

	const searchInfo = this.document.getElementById('search-info');

	const urlParams = new URLSearchParams(window.location.search);
	var query = urlParams.get('q');

	var objectIDs = [];
	var nrOfResults = 0;
	if (query && query !== 'null') {
		searchInfo.innerHTML = `Searching for “${query}”...`;
		const res = await search(query);

		nrOfResults = res.objectIDs.length;
		objectIDs = res.objectIDs.slice(0, 100);

		searchInfo.innerHTML = `Found ${nrOfResults} artwork${
			nrOfResults === 1  : 's'
		} for “${query}”`;
	}

	Promise.all(
		objectIDs.map(async (e) => {
			var imgMeta = JSON.parse(localStorage.getItem(e));
			if (!imgMeta) 
			renderThumb(imgMeta);
		})
	);
};

function renderThumb(imgMeta) {
	localStorage.setItem(imgMeta.objectID, JSON.stringify(imgMeta));

	const thumb = document.createElement('div');
	thumb.setAttribute('class', 'thumb');

	const a = document.createElement('a');
	a.setAttribute('id', `object-${imgMeta.objectID}`);
	a.setAttribute('href', `config.html?objectID=${imgMeta.objectID}`);

	const img = document.createElement('img');
	img.setAttribute('id', imgMeta.primaryImageSmall.split('/').pop());
	img.setAttribute('src', imgMeta.primaryImageSmall);

	const label = document.createElement('div');
	label.setAttribute('class', 'museum-label');

	const artist = document.createElement('span');
	artist.setAttribute('class', 'artist');
	artist.innerHTML = imgMeta.artistDisplayName;

	const title = document.createElement('span');
	title.setAttribute('class', 'title');
	title.innerHTML = `${imgMeta.title}, `;

	const date = document.createElement('span');
	date.setAttribute('class', 'date');
	date.innerHTML = imgMeta.objectDate;

	label.appendChild(artist);
	label.appendChild(title);
	label.appendChild(date);

	a.appendChild(img);
	a.appendChild(label);

	thumb.appendChild(a);

	this.document.getElementById('gallery').appendChild(thumb);
}

async function search(query) {
	const res = await fetch(`${ENDPOINT}search?hasImages=true&q=${query}`);
	return res.json();
}



function getCart() {
	const cart = document.getElementById('cart-link');

	const key = 'cart';
	if (key in localStorage)  else {
		cart.innerHTML = 'Cart';
	}
}
