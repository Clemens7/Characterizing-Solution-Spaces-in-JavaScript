
    import * as Helper from './helper.js';
    import * as Frame from './frame.js';
    
    var items = Helper.getCartItems();
    
    var cartT = document.getElementById("cart");
    
    if(items.length < 1) {
      var divv = document.createElement("div");
      divv.classList.add("cart-item");
      divv.innerHTML = `There are no items in your shopping cart.`;
      cartT.insertBefore(divv, cartT.firstChild);

      document.getElementById("checkout-button").disabled = true;
    } 
    
    Helper.cartItemsSize();
    
    window.remove = 
    
    Helper.getDivsForCartView();
    
  import * as frame from "./frame.js";


var configurator = {
    dom: {
        previewImage: document.getElementById("preview-image"),
        previewContainer: document.getElementById("preview-container"),
        museumLabel: document.getElementById("image-label"),
        frameWidth: document.getElementsByName("frameWidth")[0],
        frameWidthR: document.getElementsByName("frameWidthR")[0],
        matWidth: document.getElementsByName("matWidth")[0],
        matWidthR: document.getElementsByName("matWidthR")[0],
        printSize: document.getElementsByName("printSize"),
        frameStyle: document.getElementsByName("frameStyle"),
        matColor: document.getElementsByName("matColor"),
    },

    standardParams: {
        printSize: "M",
        frameStyle: "classic",
        frameWidth: 4.0,
        matColor: "mint",
        matWidth: 5.5

    },

    init: () => {
        const objectID = configurator.getUrlVar("objectID");
        let cForm = document.getElementById('config-form');

        cForm["printSize"].value = configurator.getUrlVar("printSize") || configurator.standardParams.printSize;
        cForm["frameStyle"].value = configurator.getUrlVar("frameStyle") || configurator.standardParams.frameStyle;
        cForm["frameWidthR"].value = configurator.getUrlVar("frameWidth") / 10 || configurator.standardParams.frameWidth;
        cForm["frameWidth"].value = configurator.getUrlVar("frameWidth") / 10 || configurator.standardParams.frameWidth;

        cForm["matColor"].value = configurator.getUrlVar("matColor") || configurator.standardParams.matColor;

        cForm["matWidthR"].value = configurator.getUrlVar("matWidth") / 10 || configurator.standardParams.matWidth;
        cForm["matWidth"].value = configurator.getUrlVar("matWidth") / 10 || configurator.standardParams.matWidth;

        configurator.setCartCount();
        configurator.initEvents();

        configurator.getLsObject(objectID).then(object => {

            if (object === null) 

            configurator.setImageSrc(object.primaryImageSmall);

            const artistLabel = document.createElement("span");
            artistLabel.appendChild(document.createTextNode(object.artistDisplayName));
            artistLabel.className = "artist";
            configurator.dom.museumLabel.appendChild(artistLabel);

            const titleLabel = document.createElement("span");
            titleLabel.appendChild(document.createTextNode(object.title));
            titleLabel.className = "title";
            configurator.dom.museumLabel.appendChild(titleLabel);

            const dateLabel = document.createElement("span");
            dateLabel.appendChild(document.createTextNode(", " + object.objectDate));
            dateLabel.className = "date";
            configurator.dom.museumLabel.appendChild(dateLabel);

            configurator.render();
        });
    },

    initEvents: () => {
        let bindOnChange = 

        configurator.dom.frameWidth.onchange = ;
        configurator.dom.frameWidthR.oninput = ;

        configurator.dom.matWidth.onchange = ;
        configurator.dom.matWidthR.oninput = ;

        let setInputOnChangeRender = (inputs) => {
            inputs.forEach(element => {
                element.onchange = configurator.render;
            });
        }

        setInputOnChangeRender(configurator.dom.printSize);
        setInputOnChangeRender(configurator.dom.frameStyle);
        setInputOnChangeRender(configurator.dom.matColor);

        document.getElementById("config-form").onSubmit = ;

    },

    getUrlVar: (name) => {
        const getUrlVars = () => {
            let vars = {};
            window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
                vars[key] = value;
            });
            return vars;
        }

        return getUrlVars()[name] || null;
    },

    getLsObject: async function (objectID) {
        await null;
        let picture = JSON.parse(localStorage.getItem(objectID));
        if (!picture) 
        return picture;
    },

    setImageSrc: (imgUrl) => {
        configurator.dom.previewImage.src = imgUrl;
    },

    getRadioValue: (name) => {
        let cForm = document.getElementById('config-form');
        return cForm[name].value;
    },

    render: () => {
        const printSize = configurator.getRadioValue("printSize");
        const frameStyle = configurator.getRadioValue("frameStyle");
        const matColor = configurator.getRadioValue("matColor");
        frame.render(configurator.dom.previewImage, configurator.dom.previewContainer,
            printSize,
            frameStyle,
            configurator.dom.frameWidth.value * 10,
            matColor,
            configurator.dom.matWidth.value * 10);

        const price = frame.calculatePrice(printSize, frameStyle, configurator.dom.frameWidth.value * 10, configurator.dom.matWidth.value * 10);
        document.getElementById('price').innerHTML = "€ " + price.toFixed(2);

        let cForm = document.getElementById('config-form');

        const pSizes = frame.getPrintSizes(configurator.dom.previewImage);
        const totalWidth = pSizes[cForm["printSize"].value][0] + 20 * cForm["frameWidth"].value + 20 * cForm["matWidth"].value;
        const totalHeight = pSizes[cForm["printSize"].value][1] + 20 * cForm["frameWidth"].value + 20 * cForm["matWidth"].value;
        document.getElementById("print-size-s-label").innerHTML = "Small <br>" + pSizes['S'][0] / 10 + " × " + pSizes['S'][1] / 10 + " cm"
        document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + pSizes['M'][0] / 10 + " × " + pSizes['M'][1] / 10 + " cm"
        document.getElementById("print-size-l-label").innerHTML = "Large <br>" + pSizes['L'][0] / 10 + " × " + pSizes['L'][1] / 10 + "cm"
        document.getElementById('total-size').innerHTML = Math.round(totalWidth) / 10 + " × " + Math.round(totalHeight) / 10 + " cm";
    },

    setCartCount: () => {
        var cart = JSON.parse(localStorage.getItem('cart')) ;
        document.getElementById("cart-link").innerText = (cart.length > 0  : "Cart");
    },

    addToCard: 

}

configurator.init();

window.configurator = configurator;

export 

export 

export 
import * as Frame from './frame.js';

export function cartItemsSize() {
  var cart = JSON.parse(localStorage.getItem('cart')) ;
  document.getElementById("cart-link").innerText = (cart.length > 0  : "Cart");
}

export function getCartItems() {  
  return JSON.parse(localStorage.getItem('cart')) ;
}

export 

export 

export async function getDivsForCartView() {
  var cartTag = document.getElementById("cart");
  var items = getCartItems();
  var total = 0;
  var item;
  
  for(let i=0; i < items.length; i++) 
  
  document.getElementById("price-total").innerHTML = `${total.toFixed(2)}`;
}

/*<!-- TODO: dynamically add cart items using template below -->
      <!--<div class="cart-item">
        <div class="cart-preview" id="preview-container-0">
          <a href="">
            <img class="cart-thumb" src="" id="preview-0" alt="">
          </a>
        </div>
        <div class="museum-label">
          <div>
            <span class="artist"></span>
            <span class="title"></span>,
            <span class="date"></span>
            <br><br>
            <span class="frame-description"></span>
          </div>
          <div class="cart-price">€ <span id="price-0">0</span></div>
          <button class="cart-remove"></button>
        </div>
      </div>-->*/

export 
    import * as Helper from './helper.js';
    const MET_API_URL = "https://collectionapi.metmuseum.org/public/collection/v1/";

    Helper.cartItemsSize();
    
    document.addEventListener('DOMContentLoaded', event => {
      const searchQuery = new URLSearchParams(window.location.search).get("q"); // https://www.w3schools.com/jsref/prop_loc_search.asp | https://developer.mozilla.org/de/docs/Web/API/URLSearchParams
      
      if (searchQuery) else {
        showHighlights();
      }
      
    });

    const searchform = document.querySelector('main .search-form');
    searchform.addEventListener('submit', );

    async function showHighlights() {
      const response = await fetch('./highlights.json');
      const data = await response.json();
      data.highlights.map(objID => getObject(objID).then(addItem));
    }

    

    async function getObject(objectID) {
      const objectUrl = MET_API_URL + 'objects/' + objectID;

      let item = JSON.parse(localStorage.getItem(objectID));
      if (!item) 
      return item;
    }
    
    function addItem(item) {
      const thumb = document.createElement("div");
      thumb.classList.add("thumb");
      thumb.innerHTML = `
          <a href="config.html?objectID=${item.objectID}" id="object-${item.objectID}">
            <img src="${item.primaryImageSmall}" alt="${item.title}" id="object-image-${item.objectID}">
            <div class="museum-label">
              <span class="artist">${item.artistDisplayName}</span>
              <span class="title">${item.title}</span>,
              <span class="date">${item.objectDate}</span>
            </div>
          </a>`;
      document.getElementById("gallery").appendChild(thumb);
    }

  