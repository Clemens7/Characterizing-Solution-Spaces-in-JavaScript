export 


export function getCartProducts() {
    let cart = JSON.parse(localStorage.getItem('cart'));
    if (!cart) 
    return cart;
}

export function isCartEmpty() {
    const number = getCartProducts().length;
    console.log("cart items rn:" + number);
    return number < 1;
}


export 

export function countCart() {
    const cart = document.getElementById("cart-link");
    const count = getCartProducts().length;
    if (count > 0) {
        cart.innerHTML = `Cart (${count})`;
    }
}
import {
    findObject, setPrice
} from "./general.js";
import {calculatePrice, render} from "./frame.js";
import {
    countCart,
    getCartProducts,
    isCartEmpty,
    removeFromCart
} from "./cart-helpers.js";


countCart();
calcPrice().then(r => console.log(r));

const cartElement = document.getElementById("cart");

if (isCartEmpty())  else {
    document.getElementById('checkout-button').disabled = false;
}

async function calcPrice() {
    let totalPrice = 0;
    const items = getCartProducts();

    for (let index = 0; index < items.length; index++) {
        const item = items[index];
        const obj = await findObject(item.objectID);

        const cartItemDiv = document.createElement("div");
        cartItemDiv.classList.add("cart-item");
        const size = {
            'S': 'Small',
            'M': 'Medium',
            'L': 'Large'
        }
        const print = size[item.printSize] + ' print';
        const frame = `in a ${item.frameWidth / 10}&nbsp;cm ${item.frameStyle} frame`;
        const mat = item.matWidth > 0 ? ` with a ${item.matWidth / 10}&nbsp;cm ${item.matColor} mat.` ;

        cartItemDiv.innerHTML =
            `<div class="cart-preview" id="preview-container-${index}">
                <a href="config.html?${new URLSearchParams(item)}">
                    <img class="cart-thumb" src="${obj.primaryImageSmall}" id="preview-${index}" alt="${obj.title}">
                </a>
            </div>
            <div class="museum-label">
            <div>
                <span class="artist">${obj.artistDisplayName}</span>
                <span class="title">${obj.title}</span>,
                <span class="date">${obj.objectDate}</span>
                <br><br>
                <span class="frame-description">${print} ${frame}${mat}</span>
            </div>
            <div class="cart-price">€ <span id="price-${index}">0</span></div>
            <button class="cart-remove" onclick="remove(${index});"></button>
            </div>`;
        cartElement.insertBefore(cartItemDiv, cartElement.firstChild);

        const preview = document.getElementById("preview-" + index);
        const previewContainer = document.getElementById("preview-container-" + index);

        render(preview, previewContainer,
            item.printSize,
            item.frameStyle, item.frameWidth,
            item.matColor, item.matWidth);

        const price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        document.getElementById("price-" + index).innerHTML = `${price}`;
        totalPrice += price;
    }
    setPrice("#price-total", totalPrice);
}

window.remove = 
import {render, getPrintSizes, calculatePrice} from './frame.js'
import {findObject} from './general.js'
import {saveToCart, countCart} from "./cart-helpers.js";

countCart();


window.onload = onLoad;
let artObj;
let form;

async function onLoad() {

    let urlParams = new URLSearchParams(window.location.search);
    let objectID = urlParams.get("objectID");
    console.log("objectID ", objectID)

    if(objectID == null || objectID === "")
    

    
    let printSize = urlParams.get("printSize");
    let frameStyle = urlParams.get("frameStyle");
    let frameWidth = urlParams.get("frameWidth");
    let matColor = urlParams.get("matColor");
    let matWidth = urlParams.get("matWidth");

   

    form = document.querySelector("#config-form");
    form.printSize.value = printSize || form.printSize.value;

    
    form.frameWidth.value = clamp(frameWidth/10,2,5) ;
    form.frameWidthR.value = form.frameWidth.value;

    form.matWidth.value =  clamp(matWidth/10,0,10)  || form.matWidth.value;
    form.matWidthR.value = form.matWidth.value;

    form.frameStyle.value = frameStyle || form.frameStyle.value;
    form.matColor.value = matColor || form.matColor.value;

    form.matWidth.onchange = form.matWidthR.onchange = 

    form.frameWidth.onchange = form.frameWidthR.onchange = 

    form.onsubmit = formSubmit;
    try {
        artObj = await findObject(objectID);
        console.log(artObj);
     
        document.querySelector("#image-label").innerHTML = "<b>" + artObj.artistDisplayName + "</b><br><i>" + artObj.title + "</i>, " + artObj.objectDate;
        console.log(artObj);
        reRender();
        form.onchange = reRender;
    } 
}

function reRender() {

    let container = document.querySelector("#preview-container");
    let img = document.querySelector("#preview-image");

    img.src = artObj.primaryImageSmall;
    console.log(artObj.primaryImageSmall);

    let printSizes = getPrintSizes(img);
    setPrintSizes(img, printSizes);

    let price = calculatePrice(form.printSize.value,
        form.frameStyle.value,
        form.frameWidth.value,
        form.matWidth.value);

    setPrice(price);
    setTotalSize(printSizes[form.printSize.value], form.matWidth.value, form.frameWidth.value)

    render(img,
        container,
        form.printSize.value,
        form.frameStyle.value,
        form.frameWidth.value * 10,
        form.matColor.value,
        form.matWidth.value * 10);
}


function setPrintSizes(img, printSizes) {

    document.querySelector("#print-size-s-label").innerHTML =
        `Small<br> ${printSizes.S[0] / 10} × ${printSizes.S[1] / 10} cm`;
    document.querySelector("#print-size-m-label").innerHTML =
        `Medium<br> ${printSizes.M[0] / 10} × ${printSizes.M[1] / 10} cm`;
    document.querySelector("#print-size-l-label").innerHTML =
        `Large<br> ${printSizes.L[0] / 10} × ${printSizes.L[1] / 10} cm`;

}


function setPrice(price) {
    document.querySelector("#price").innerHTML = "€ " + price.toFixed(2);
}

function setTotalSize(size, matWidth, frameWidth) {
    matWidth = parseFloat(matWidth) * 10;
    frameWidth = parseFloat(frameWidth) * 10;

    let height = size[0] + matWidth + frameWidth;
    let width = size[1] + matWidth + frameWidth;
    document.querySelector("#total-size").innerHTML = height / 10 + " &times; " + width / 10 + " cm";
}



window.clamp = clamp
function clamp(val, min ,max)
{
    return Math.min(Math.max(val,min),max);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price;
    let frameBaseCost = 30;
    let costFrame = [];
    costFrame['classic'] = 1;
    costFrame['natural'] = 0.80;
    costFrame['shabby'] = 0.90;
    costFrame['elegant'] = 0.85;

    let costMat = 0.05;

    let costFactorSize = [];
    costFactorSize["S"] = 1;
    costFactorSize["M"] = 2;
    costFactorSize["L"] = 3.5;

    price = costFactorSize[printSize] *
        (frameBaseCost +
            costMat * matWidth +
            costFrame[frameStyle] * frameWidth);

    return ((Math.round((price + Number.EPSILON) * 100)) / 100);
}
const MET_BASE = "https://collectionapi.metmuseum.org/public/collection/v1";

export function setPrice(selector, price) {
    document.querySelector(selector).innerHTML = price;
}

export async function findObject(id) {
    let url = MET_BASE + "/objects/" + id;

    let obj = JSON.parse(localStorage.getItem(id)); // check if cached
 
    if(obj == null) // if not fetch
    

    return obj;
}


export 


import { findByQuery, findObject } from './general.js'
import { countCart } from "./cart-helpers.js";

window.addEventListener('load', pageLoad());

function addGallery(object) {
    let template =
        `<div class="thumb">
            <a href="" id="object">
                <img src="${object.primaryImageSmall}" alt="${object.title}" id="${object.objectID}">
                <div class="museum-label">
                    <span class="artist">${object.artistDisplayName}</span>
                    <span class="title">${object.title}</span>,
                    <span class="date">${object.objectDate}</span>
                </div>
            </a>
        </div>`;
    document.getElementById('gallery').insertAdjacentHTML("beforeend", template);
}

async function search() {
    let query = document.getElementById('search').value;
    if (query) {
        document.getElementById('search-info').innerHTML = `Searching for “${query}”...`;
        let result = await findByQuery(query);
        let count = result.objectIDs.length;
        let art = 'artworks';

        if (count === 1) 
        document.getElementById('search-info').innerHTML =
            `Found ${count} ${art} for “${query}”`;

        if (count > 100) 
        document.getElementById('gallery').innerHTML = '';
        for (let i = 0; i < count; i++) {
            let object = await findObject(result.objectIDs[i]);
            addGallery(object);
        }
    }
}

async function pageLoad() {

    countCart();

    let Params = new URLSearchParams(window.location.search);
    let query = Params.get('q');
    document.getElementById('search').value = query;
    if (query) {
        search();
    }
}