export class Artwork {
    
}

export class ArtworkContainer {
    constructor(id='gallery') {
        this.container = document.getElementById(id);
        if(!this.container) 
    }

    clear() {
        this.container.innerHTML = '';
    }

    createArtworkContainer(artwork) {
        /* <div class="thumb">
        <a href="" id="object-0">
          <img src="" alt="" id="object-image-0">
          <div class="museum-label">
            <span class="artist"></span>
            <span class="title"></span>,
            <span class="date"></span>
          </div>
        </a>
      </div> */

        let thumb = document.createElement('div');
        thumb.className = 'thumb';
        let a = document.createElement('a');
        a.href = `config.html?objectID=${artwork.id}`;
        a.id = `object-${artwork.id}`;
        thumb.appendChild(a);

        let img = document.createElement('img');
        img.src = artwork.image;
        img.id = `object-image-${artwork.id}`;
        a.appendChild(img);

        let museumlabel = document.createElement('div');
        museumlabel.className = 'museum-label';

        let artist = document.createElement('span');
        artist.className = 'artist';
        artist.textContent = artwork.artist;

        let title = document.createElement('span');
        title.className = 'title';
        title.textContent = artwork.title;
        title.append(', ');

        let date = document.createElement('span');
        date.className = 'date';
        date.textContent = artwork.date;

        museumlabel.appendChild(artist);
        museumlabel.appendChild(title);
        museumlabel.appendChild(date);

        a.appendChild(museumlabel);

        this.container.appendChild(thumb);

    }

}export async function retrieveArtworkInformation(objectID) {
    let storage = window.localStorage;
    let data = storage["ObjectID"+objectID];
    if (!data) {
        const url = apiObjectUrl(objectID);
        try {
            const response = await fetch(url);
            data = await response.json();
            storage["ObjectID"+objectID] = JSON.stringify(data);
        } 
    }
    return {id:objectID, artist:data.artistDisplayName, title:data.title, date:data.objectDate, image:data.primaryImageSmall};
}

function apiObjectUrl(objectID) {
    return `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
}import {Artwork, ArtworkContainer} from './artwork.js';
import { refreshNumberOfCartItems } from './shopping_cart.js';
import {retrieveArtworkInformation} from "./museum-endpoint.js";

async function retrieveObjectIDs(query) {
    const url = apiSearchUrl(query);
    try {
        const response = await fetch(url);
        const rawData = await response.json();
        console.log(JSON.stringify(rawData));
        return rawData;

    }}

function apiSearchUrl(query) {
    return `https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${query}`;
}

async function imageSearch(query) {
    let searchtext = document.getElementById('search-info');
    searchtext.innerText = `Searching for “${query}”...`;
    const img = await retrieveObjectIDs(query);
    let text = document.getElementById('search-info');
    text.innerText = `Found ${img.total} artwork${img.total === 1  : 's'} for “${query}”`;
    if (!img || img.total === 0) 
    await showArtworks(img.objectIDs, 100);
}

async function showArtworks(objectIDs, maxArtworks = undefined) {
    const artworkContainer = new ArtworkContainer();
    artworkContainer.clear();
    if (maxArtworks === undefined
        || typeof(maxArtworks) !== 'number'
        || maxArtworks > objectIDs.length) 
    for (let i = 0; i < maxArtworks; i++) {
        let artwork = await retrieveArtworkInformation(objectIDs[i]);
        artworkContainer.createArtworkContainer(artwork);
    }
}



function cleanQueryParam(query) {
    return query.replace(/\+/g, ' ');
}


window.onload = function () {
    const form = document.querySelector('#search-form');
    form.addEventListener('submit', );

    refreshNumberOfCartItems();
    let param = new URLSearchParams(document.location.search).get("q");
    if (!param)  else {
        param = cleanQueryParam(param);
        imageSearch(param);
    }
};const CART_STORAGE_KEY = 'cart';

export function getCartItems() {
    if (localStorage[CART_STORAGE_KEY])  else {
        return [];
    }
}

export 

export 

export function refreshNumberOfCartItems() {
    const count = getNumberOfCartItems();
    const cartText = count > 0  : 'Cart';
    document.getElementById('cart-link').innerText = cartText;
}

export 

function getNumberOfCartItems() {
    return getCartItems().length;
}
