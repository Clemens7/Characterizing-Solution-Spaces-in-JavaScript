import {render, calculatePrice} from "./frame.js";
import {displayCartItems, getConfigMessage} from "./util.js";

window.onload = async function() {
    await renderCart();
};

async function renderCart() {
    displayCartItems();
    displayTotal();

    let cart = JSON.parse(localStorage.getItem("cart"));

    if(cart != null && cart.length > 0) {
        await renderAllCartItems(cart);
    }

}





async function renderAllCartItems(cart){

    let config = [];

    for (let i = 0; i < cart.length; i++) {

        let data = localStorage.getItem(cart[i]);

        if (data != null )  else {
            let resp = await fetch('https://collectionapi.metmuseum.org/public/collection/v1/objects/' + cart[i].objectID)
                .then((response) => {
                    return response.json();
                })
                .then((data) => {
                    createCartItem(cart, data, i, config);
                });
         }

    }
    addEventListeners();

}


function renderCartItem(configuration, cartItem) {
    configuration.image.onload = function() {
        render(configuration.image, configuration.container, cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matColor, cartItem.matWidth);
    }
}

function createCartItem(cart, data, i, config) {
    let cartItem = document.getElementsByClassName("cart-item")[0];
    let newCartItem = createCartItemNode();

    let previewContainerNode = newCartItem.children.item(0);
    let previewNode = newCartItem.children.item(0).children.item(0).children.item(0);
    previewNode.setAttribute("src", data.primaryImageSmall);
    previewNode.setAttribute("alt", data.title);

    config.push({'image': previewNode, 'container': previewContainerNode});
    config[i].image.src = data.primaryImageSmall;
    renderCartItem(config[i], cart[i]);

    let configParams = new URLSearchParams((cart[i]));
    let configURL = '/config.html?' + configParams.toString();
    let aNode = newCartItem.children.item(0).children.item(0);
    aNode.setAttribute("href", configURL);

    let museumLabelsNode = newCartItem.children.item(1).children.item(0).children;
    let frameDescription = getConfigMessage(cart[i]);
    setCartItemNodes(museumLabelsNode, data.artistDisplayName, data.title, data.objectDate, frameDescription);

    let price = getPrice(cart[i]);
    let priceNode = newCartItem.children.item(1).children.item(1);
    priceNode.textContent = "€ " + price;

    let cartNode = document.getElementById("cart");
    let cartTotal = document.getElementsByClassName("cart-total")[0];
    cartNode.insertBefore(newCartItem, cartItem);

    if(i === 0) {
        cartNode.removeChild(cartItem);
    }
}

function setCartItemNodes(node, artistDisplayName, title, objectDate, frameDescription) {
    node.item(0).textContent = artistDisplayName;
    node.item(1).textContent = title;
    node.item(2).textContent = ", " + objectDate;
    node.item(5).textContent = frameDescription;
}

function getPrice(object) {
    return calculatePrice(object.printSize, object.frameStyle, object.frameWidth, object.matWidth);
}

function displayTotal(){
    let subtotalElement = document.getElementById('price-total');
    subtotalElement.innerText = calculateTotal();
}

function calculateTotal(){
    let cart = JSON.parse (localStorage.getItem('cart'));
    let subtotal = 0;

    if (cart !== null){
        let cartLength = cart.length;
        for (let index = 0; index < cartLength; index++) {
            const item = cart[index];
            subtotal += calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        }
    }
    return subtotal.toFixed(2);
}



function addEventListeners (){
    addOnSubmitClickEvent();
    addOnDeleteClickEvent();
}

function addOnSubmitClickEvent (){
    let btnCheckout = document.getElementById ('checkout-button');
    btnCheckout.addEventListener('click', );
}

function addOnDeleteClickEvent() {
    let btnDelete = document.getElementsByClassName("cart-remove");

    for (let i = 0; i < btnDelete.length; i++) {
        btnDelete[i].addEventListener('click', )
    }
}


function createCartItemNode() {
    let cartItemNode = document.createElement("div");
    cartItemNode.classList.add("cart-item");

    let cartPreviewNode = document.createElement("div");
    cartPreviewNode.classList.add("cart-preview");
    cartPreviewNode.setAttribute("id", "preview-container-0");

    cartItemNode.appendChild(cartPreviewNode);

    let aNode = document.createElement("a");
    aNode.setAttribute("href", "");

    cartPreviewNode.appendChild(aNode);

    let imgNode = document.createElement("img");
    imgNode.classList.add("cart-thumb");
    imgNode.setAttribute("src", "");
    imgNode.setAttribute("id", "preview-0");
    imgNode.setAttribute("alt", "");

    aNode.appendChild(imgNode);

    let museumLabelNode = document.createElement("div")
    museumLabelNode.classList.add("museum-label");

    cartItemNode.appendChild(museumLabelNode);

    let divNode = document.createElement("div");
    let span1 = document.createElement("span");
    span1.classList.add("artist");
    divNode.appendChild(span1);

    let span2 = document.createElement("span");
    span2.classList.add("title");
    divNode.appendChild(span2);

    let span3 = document.createElement("span");
    span3.classList.add("date");
    divNode.appendChild(span3);

    let brNode = document.createElement("br");
    divNode.appendChild(brNode);
    let brNode2 = document.createElement("br");
    divNode.appendChild(brNode2);

    let span4 = document.createElement("span");
    span4.classList.add("frame-description");
    divNode.appendChild(span4);

    museumLabelNode.appendChild(divNode);

    let cartPriceNode = document.createElement("div");
    cartPriceNode.classList.add("cart-price");

    museumLabelNode.appendChild(cartPriceNode);

    let spanNode = document.createElement("span");
    spanNode.setAttribute("id", "price-0");
    cartPriceNode.appendChild(spanNode);

    let btnNode = document.createElement("button");
    btnNode.classList.add("cart-remove");
    btnNode.setAttribute("type", "button");
    museumLabelNode.appendChild(btnNode);

    return cartItemNode;
}import { render, getPrintSizes, calculatePrice } from './frame.js';
import { displayCartItems } from './util.js';

var searchURL = './search.html';
var cartUrl = './cart.html';
var configuration;

window.onload = function() {


    /*
        parameter configuration.objectID needed to choose artwork => redirect if missing

    const urlParams = new URLSearchParams(window.location.search);
    configuration = {
        objectID : urlParams.get('objectID')
    };

    if(configuration.objectID == null) 

    /*
        show header cart items
    displayCartItems();

    /*
        fill with predefined configuration

    configuration.image = document.getElementById('preview-image');
    configuration.container = document.getElementById('preview-container');

    setInitialConfiguration(urlParams, configuration);
    setPrice(calculatePrice(configuration.printSize, configuration.frameStyle, configuration.frameWidth, configuration.matWidth));

    /*
        get query parameter 'configuration.objectID', load the requested artwork


    if(window.localStorage.getItem(configuration.objectID) == null)  else {
        handleMetObject(window.localStorage.getItem(configuration.objectID), configuration);
    }  
    
    /*
        set onsubmit event to add to localStorage 'cart'

    document.getElementById('config-form').onsubmit = 

    /*
        set events to re-render image when values are updated

    for (const element of document.getElementsByName('printSize')) {
        element.addEventListener('change', );
    }

    for (const element of document.getElementsByName('frameStyle')) {
        element.addEventListener('change', );
    }

    for (const element of document.getElementsByName('matColor')) {
        element.addEventListener('change', );
    }


    var frameWidthTextField = document.getElementsByName('frameWidth')[0];
    var frameWidthSlider = document.getElementsByName('frameWidthR')[0];

    frameWidthTextField.onchange = ;

    frameWidthSlider.onchange = ;

    
    var matWidthTextField = document.getElementsByName('matWidth')[0];
    var matWidthSlider = document.getElementsByName('matWidthR')[0];

    matWidthTextField.onchange = ;

    matWidthSlider.onchange = ;


}


function handleMetObject(objectAsString, configuration) {
    const object = JSON.parse(objectAsString);
    console.log(object);
    if (object.primaryImageSmall === undefined || object.primaryImageSmall == "") 

    configuration.image.onload = function() {
        renderConfig(configuration);
        setPrintSizes(getPrintSizes(configuration.image));
        setSize(configuration);
    }
    configuration.image.src = object.primaryImageSmall;
    document.getElementById('image-label').textContent = `${object.title}: ${object.artistDisplayName}, ${object.objectDate}`;
}





function handleFrameWidthNum(num) {
    if(num == null) return 40;}

function handleMatWidthNum(num) {
    if(num == null) return 55;}

/* set num according to min, max values, round and convert to mm */


function setPrintSizes(printSizesObject) {
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${printSizesObject.S[0]} × ${printSizesObject.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${printSizesObject.M[0]} × ${printSizesObject.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${printSizesObject.L[0]} × ${printSizesObject.L[1]} cm`;
}

function setPrice(price) {
    document.getElementById('price').textContent = `€ ${price.toFixed(2)}`;
}

function setSize(configuration) {
    var printSizes = getPrintSizes(configuration.image)[configuration.printSize];
    const additionalSize = 2*configuration.matWidth/10 + 2*configuration.frameWidth/10;
    document.getElementById('total-size').textContent = `${printSizes[0] + additionalSize} × ${printSizes[1] + additionalSize} cm`;
}

function renderConfig(configuration) {
    console.log('Re-render with:');
    console.log(configuration);
    render(configuration.image, configuration.container, configuration.printSize, configuration.frameStyle, configuration.frameWidth, configuration.matColor, configuration.matWidth);
}

function setInitialConfiguration(urlParams, configuration) {

    configuration.printSize = setRadiobuttonAccordingToOption(['S', 'M', 'L'], ['print-size-s', 'print-size-m', 'print-size-l'], urlParams.get('printSize')) || 'M';
    configuration.frameStyle = setRadiobuttonAccordingToOption(['classic', 'natural', 'shabby', 'elegant'], ['frame-style-classic', 'frame-style-natural', 'frame-style-shabby', 'frame-style-elegant'], urlParams.get('frameStyle')) || 'natural';
    configuration.matColor = setRadiobuttonAccordingToOption(['ivory', 'mint', 'wine', 'indigo', 'coal'], ['mat-color-ivory', 'mat-color-mint', 'mat-color-wine', 'mat-color-indigo', 'mat-color-coal'], urlParams.get('matColor')) || 'wine';

    configuration.frameWidth = handleFrameWidthNum(urlParams.get('frameWidth'));
    var valueInCm = configuration.frameWidth / 10;
    console.log('Set framewidth: ' + valueInCm + "cm");

    document.getElementsByName('frameWidthR')[0].value = valueInCm;
    document.getElementsByName('frameWidth')[0].value = valueInCm;

    configuration.matWidth = handleMatWidthNum(urlParams.get('matWidth'));
    valueInCm = configuration.matWidth / 10;
    console.log('Set matwidth: ' + valueInCm + "cm");

    document.getElementsByName('matWidthR')[0].value = valueInCm;
    document.getElementsByName('matWidth')[0].value = valueInCm;
    
}

function setRadiobuttonAccordingToOption(options, optionIds, option) {
    if(option == null) return;export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    const basePrice = 30;
    const matPrice = 0.05;
    let additionalPrice;

    switch (frameStyle) {
        
        case 'natural':
            additionalPrice = 0.8;
            break;
        
        case 'elegant':
            additionalPrice = 0.85;
            break;
    }

    price = basePrice + (frameWidth / 10) * additionalPrice + (matWidth / 10) * matPrice;

    if (printSize == 'M') {
        price = price * 2;
    } else if (printSize == 'L') 

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}import {displayCartItems} from './util.js';

document.addEventListener('DOMContentLoaded', evt => {
    const params = (new URL(document.location)).searchParams;
    const query = params.get('q');
    if (!query)  else {
        const searchInfo = document.getElementById('search-info');
        searchInfo.innerText = `Searching for “${query}”...`;
        artworkSearch(query);
    }
});

const form = document.querySelector('main form');
form.addEventListener('submit', );

async function artworkSearch(searchTerm) {
    await retrieveObjectIDsAsync(searchTerm);
}

export var Artworks = {
    serialize: ,
    parse: function (aw) {
        return aw.split(' ').join('+');
    }
};

async function retrieveObjectIDsAsync(searchterm) {
    const searchInfo = document.getElementById('search-info');
    const responseObjects = await fetch("https://collectionapi.metmuseum.org/public/collection/v1/search?q=" + Artworks.parse(searchterm) + "&hasImages=true");

    const rawData = await responseObjects.json();
    if (rawData.total === 1)  else {
        searchInfo.innerText = `Found ${rawData.total} artworks for “${searchterm}”`;
    }
    await getObjetsAsync(rawData);
}

async function getObjetsAsync(rawData) {

    let maxToShow = rawData.total > 100  : rawData.total;
    console.log(maxToShow);

    const results = await Promise.all(rawData.objectIDs.slice(0, maxToShow).map(async (object1) => {
        try {
            let x = ObjectsCache.retrieve(object1);
            if (x) {
                const gallery = document.getElementById('gallery');
                gallery.appendChild(createOutput(x));
                return x;
            }
        }}));
}



function createOutput(artWork) {
    console.log(artWork);
    const thumb = document.createElement('div');
    thumb.className = "thumb";
    const link = document.createElement('a');
    link.href = "config.html?objectID=" + artWork.objectID; //TODO

    link.id = "object-".concat(artWork.objectID); //TODO
    const img = document.createElement('img');
    img.src = artWork.primaryImageSmall;
    img.alt = artWork.objectID;
    link.appendChild(img);
    const museumlLabel = document.createElement('div');
    museumlLabel.className = "museum-label";
    const artist = document.createElement('span');
    artist.className = "artist";
    artist.innerText = artWork.artistDisplayName;
    const title = document.createElement('span');
    title.className = "title";
    title.innerText = artWork.title;
    const date = document.createElement('span');
    date.className = "date";
    date.innerText = artWork.objectDate;
    const comma = document.createTextNode(', ');
    museumlLabel.appendChild(artist);
    museumlLabel.appendChild(title);
    museumlLabel.appendChild(comma);
    museumlLabel.appendChild(date);
    link.appendChild(museumlLabel);
    thumb.appendChild(link);
    return thumb;
}

export var ObjectsCache = {
    retrieve: function (key) {
        if (key in localStorage) {
            return JSON.parse(localStorage[key]);
        }
    },
    store: 
};

displayCartItems();

class ArtWork {
    
}export function displayCartItems() {
    let cart = JSON.parse(localStorage.getItem('cart'));

    if (cart !== null){
       let numCartItems = Object.values(cart).length;
       let elementCartLink = document.getElementById('cart-link');
       elementCartLink.innerText = `Cart (${numCartItems})`;
    }  
}

export function getConfigMessage(object) {
    let msg = "";
    switch (object.printSize) {
        case ('S'):
            msg = "Small ";
            break;
        case ('M'):
            msg = "Medium ";
            break;
        
        
    }

    msg += "print in a " + object.frameWidth/10 + " cm " + object.frameStyle + " frame";

    if(object.matWidth > 0) {
        msg += " with a " + object.matWidth/10 + " cm " + object.matColor + " mat";
    }

    msg += ".";

    return msg;
}