export 


export function retrieveFromStorage(queryElems) {
    const key = queryElems.join(' ');
    if (key in localStorage) {
        console.log(`Retrieving ${key} from local storage`);
        return JSON.parse(localStorage[key]);
    }
}
      import { artDocumentContainer, addStuffToHtml } from './html-document-container.js';
      import { getPrintSizes, render, calculatePrice } from './frame.js';
      import { countCartItems } from './display-cart-number.js';
      import { store, retrieveFromStorage } from './art-cache.js';

      let cartContainer = new artDocumentContainer('cart');

      document.addEventListener('DOMContentLoaded', event => {
        let datas = retrieveFromStorage(['cart']);
        let oj = JSON.stringify(datas);
        console.log(oj);
        if (!datas) 
        else {
          cartContainer.clear();
          getData(datas);
        }
      }
      )

      async function getData(datas) {
        for (let i = 0; i < datas.length; i++) {
          console.log(datas[i]);
          if (datas.length - 1 === i) {
            await getIDandProcessForLast(datas[i], i);
          }
          else {
            await getIDandProcess(datas[i], i);
          }
          frameDescription(datas[i], i);
          calculateItemPrice(datas[i], i);
        }
        calculateSubTotal(datas);
        setRemoval();


      }

      async function getIDandProcess(data, id) {
        let objectIDData = await collectData(data.objectID);
        cartContainer.addCartToDocument(objectIDData, id, data);
        render(document.getElementById(`img${id}`), document.getElementById(`${id}`), data.printSize, data.frameStyle,
          data.frameWidth, data.matColor, data.matWidth);
      }

      async function getIDandProcessForLast(data, id) {
        let objectIDData = await collectData(data.objectID);
        cartContainer.addLastCartToDocument(objectIDData, id, data);
        render(document.getElementById(`img${id}`), document.getElementById(`${id}`), data.printSize, data.frameStyle,
          data.frameWidth, data.matColor, data.matWidth);
      }




      async function collectData(objectID) {
        let doesObjectExist = JSON.parse(localStorage.getItem(objectID));

        if(doesObjectExist) else {

        const url = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
        try {
          const response = await fetch(url);
          const data = await response.json();
          localStorage.setItem(objectID, JSON.stringify(data));
          return data;
        }
      }}


      async function frameDescription(data, id) {
        if (data.matWidth == 0) 
        else {
          if (data.printSize == 'S') {
            document.getElementById(`frame-desc-${id}`).innerHTML = `Small print in a ${data.frameWidth / 10} cm 
  ${data.frameStyle} frame with a ${data.matWidth / 10} cm ${data.matColor} mat.`;
          }
          if (data.printSize == 'M') {
            document.getElementById(`frame-desc-${id}`).innerHTML = `Medium print in a ${data.frameWidth / 10} cm 
  ${data.frameStyle} frame with a ${data.matWidth / 10} cm ${data.matColor} mat.`;
          }
          if (data.printSize == 'L') 
        }
      }

      async function calculateItemPrice(data, id) {
        let itemprice = calculatePrice(data.printSize, data.frameStyle, data.frameWidth, data.matWidth);
        document.getElementById(`price-${id}`).innerHTML = `${itemprice}`;
      }


   
      async function calculateSubTotal(datas) {
        let subTotal = 0;
        for (let i = 0; i < datas.length; i++) {
          subTotal += parseFloat(calculatePrice(datas[i].printSize, datas[i].frameStyle, datas[i].frameWidth, datas[i].matWidth));
        }
        document.getElementById('price-total').innerHTML = `${subTotal.toFixed(2)}`;
      }

      async function setRemoval() {
        let buttons = document.getElementsByClassName("cart-remove");
        let datasForRemoval = retrieveFromStorage(['cart']);
        console.log(datasForRemoval);
        for (let i = 0; i < buttons.length; i++) {
          console.log(document.getElementById(`cart-remove-${i}`));
          document.getElementById(`cart-remove-${i}`).addEventListener("click", )
        }
      }

      countCartItems();

      console.log(document.getElementsByTagName("button"));
      document.getElementById("checkout-button").addEventListener("click", );
    import { retrieveFromStorage } from './art-cache.js';


export async function countCartItems(){
    let cartItems = retrieveFromStorage(['cart']);
    let cartCount = 0;
    if(cartItems){
        cartCount = cartItems.length;
        document.getElementById("cart-link").innerHTML = `Cart (${cartCount})`;
    return cartCount;
    }export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }
    
    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
   
    
    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    
    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    if(frameStyle == 'classic') else if(frameStyle == 'natural'){
        price += (0.08*frameWidth);
    }else if(frameStyle == 'shabby'){
        price += (0.09*frameWidth);
    } else {
        price += (0.085*frameWidth);
    }
    price += 0.005*matWidth;
    if(printSize == 'L') else if( printSize == 'M'){
        price = price*2;
    } 
    price = (Math.round((price + Number.EPSILON) * 100) / 100);
    price = parseFloat(price.toFixed(2));
    return price;
}
export class artDocumentContainer {
  constructor(containerID = 'gallery') {
      this.container = document.getElementById(containerID);
      if (!this.container) 
  }
  clear() {
      this.container.innerHTML = '';
  }





  
  


  addCartToDocument(artElem, id , data) {
      this.container.innerHTML += `
      <div class="cart-item">
      <div class="cart-preview" id="${id}">
      <a href="config.html?objectID=${artElem.objectID}&printSize=${data.printSize}&frameStyle=${data.frameStyle}&frameWidth=${data.frameWidth}&matColor=${data.matColor}&matWidth=${data.matWidth}">
          <img class="cart-thumb" src="${artElem.primaryImageSmall}" id="img${id}" alt="${artElem.title}">
        </a>
      </div>
      <div class="museum-label">
        <div>
        <span class="artist">${artElem.artistDisplayName}</span>
        <span class="title">${artElem.title}</span>,
        <span class="date">${artElem.objectDate}</span>
          <br><br>
          <span class="frame-description" id ="frame-desc-${id}"></span>
        </div>
        <div class="cart-price" id ="cartprice">€ <span id="price-${id}">0</span></div>
        <button type = "submit" class="cart-remove" name="cart-remove" id="cart-remove-${id}"></button>
      </div>
    </div>`;

  }

  addLastCartToDocument(artElem, id , data) {
    this.container.innerHTML += `
    <div class="cart-item">
    <div class="cart-preview" id="${id}">
    <a href="config.html?objectID=${artElem.objectID}&printSize=${data.printSize}&frameStyle=${data.frameStyle}&frameWidth=${data.frameWidth}&matColor=${data.matColor}&matWidth=${data.matWidth}">
        <img class="cart-thumb" src="${artElem.primaryImageSmall}" id="img${id}" alt="${artElem.title}">
      </a>
    </div>
    <div class="museum-label">
      <div>
      <span class="artist">${artElem.artistDisplayName}</span>
      <span class="title">${artElem.title}</span>,
      <span class="date">${artElem.objectDate}</span>
        <br><br>
        <span class="frame-description" id ="frame-desc-${id}"></span>
      </div>
      <div class="cart-price" id ="cartprice">€ <span id="price-${id}">0</span></div>
      <button type = "submit" class="cart-remove" name="cart-remove" id="cart-remove-${id}"></button>
    </div>
  </div>
  <div class="cart-total">
    <div class="price" id="priceT">Total: € <span id="price-total">0</span></div>
    <button type="button" id="checkout-button">Checkout</button>
  </div>
`;

}
}


export 