export class CartItem {
    constructor(objectID, printSize, frameWidth, frameStyle, matWidth, matColor) {
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameWidth = frameWidth;
        this.frameStyle = frameStyle;
        this.matWidth = matWidth;
        this.matColor = matColor;
    }

    toQueryParams() {
        let str = `objectID=${this.objectID}&printSize=${this.printSize}&frameWidth=${this.frameWidth}&frameStyle=${this.frameStyle}&matColor=${this.matColor}&matWidth=${this.matWidth}`;
        return str;
    }

    generateDesc() {
        let size =  {
            "S": "Small",
            "M": "Medium",
            "L": "Large"
        }

        let text = `${size[this.printSize]} print in a ${this.frameWidth/10} cm ${this.frameStyle} frame`;
        if (this.matWidth !== 0) {
            text = text + ` with a ${this.matWidth/10} cm ${this.matColor} mat`;
        }
        return text + ".";
    }
}
import {calculatePrice} from "./frame.js";
import {render} from "./frame.js";
import {CartItem} from "./cartItem.js";
let items = [];
if (localStorage.getItem("cart") !== undefined && localStorage.getItem("cart") !== null) {
    items = JSON.parse(localStorage.getItem("cart"))
        .map(item => new CartItem(item.objectID, item.printSize, item.frameWidth, item.frameStyle, item.matWidth, item.matColor));
}
if (items.length === 0)  else {
    document.getElementById("cart-link").innerHTML = "Cart (" + items.length + ")";
}
checkEmpty();
buildCart();
let elements = document.getElementsByClassName("cart-remove");
Array.prototype.forEach.call(elements, element => {
    element.addEventListener("click", removeItem);
})
let images = document.getElementsByClassName("cart-thumb");
Array.prototype.forEach.call(images, element => {
    element.addEventListener("load", callRender);
})



function setSum() {
    let sum = 0;
    items.forEach(item => sum += calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth));
    document.getElementById('price-total').innerHTML = sum.toFixed(2);
}

function buildCart() {
    let template = "";
    items.forEach((item, index) => {
        template +=
            `
        <div class="cart-item">
            <div class="cart-preview" id=${"preview-container" + index}>
              <a href=${"config.html?" + item.toQueryParams()}>
                <img class="cart-thumb" style="max-height: 250px; max-width: 250px" id=${"preview" + index} alt="Image">
              </a>
            </div>
            <div class="museum-label">
              <div>
                <span class="artist" id=${"artist" + index}></span>
                <span class="title" id=${"title" + index}></span>
                <span class="date" id=${"date" + index}></span>
                <br><br>
                <span class="frame-description">${item.generateDesc()}</span>
              </div>
              <div class="cart-price">€
                <span id=${"price" + index}>
                    ${calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2)}
                </span>
              </div>
              <button class="cart-remove" id="${index}"></button>
            </div>
        </div>
        `
    });
    setSum();
    document.getElementById('cart').insertAdjacentHTML('afterbegin', template);
    loadInfo(template);
}

function loadInfo(template) {
    items.forEach((item, index) => {
        let cached = localStorage.getItem("object" + item.objectID);
        if (cached !== undefined && cached !==null) {
            console.log("cached");
            let json = JSON.parse(cached);
            insertInfo(index, json.artistDisplayName, json.title, json.objectDate, json["primaryImageSmall"]);
        }
    });
}

function insertInfo(index, artist, title, date, preview) {
    document.getElementById("artist" + index).innerHTML = artist;
    let titleElement = document.getElementById("title" + index);
    if (date !== undefined && date !== null) {
        titleElement.innerHTML = title + ", ";
    }
    document.getElementById("date" + index).innerHTML = date;
    document.getElementById("preview" + index).src = preview;

}
function checkEmpty() {
    if (items.length === 0)  else {
        let button = document.getElementById("checkout-button");
        button.disabled = false;
        button.onclick = 
    }
}
function callRender() {
    let index = Array.prototype.indexOf.call(getAncestor(this,4).children, getAncestor(this,3));
    let item = items[index];
    render(this,this.parentElement,item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth)
}
function getAncestor(child,level) {
    let ancestor = child;
    for (let i = 0; i < level ; i++) {
        ancestor = ancestor.parentElement;
    } return ancestor;
}
import {calculatePrice} from "./frame.js";
import {CartItem} from "./cartItem.js";
import {render} from "./frame.js";

export function displayNoInCart() {
    let items = [];
    if(localStorage.getItem("cart") !== null) 
    if (items.length > 0) 
}

displayNoInCart();

const params = new URLSearchParams(window.location.search);
document.getElementById("buy-button").addEventListener("click", addToCart);
document.getElementById("frameWidth-display").addEventListener("change", frameW_input_write_slider);
document.getElementById("frameWidth-slider").addEventListener("input", frameW_slider_write_input);
document.getElementById("matWidth-display").addEventListener("change", matW_input_write_slider);
document.getElementById("matWidth-slider").addEventListener("input", matW_slider_write_input);
document.getElementById("frameWidth-display").addEventListener("change", calculatePriceConfig);
document.getElementById("frameWidth-slider").addEventListener("input", calculatePriceConfig);
document.getElementById("matWidth-display").addEventListener("change", calculatePriceConfig);
document.getElementById("matWidth-slider").addEventListener("input", calculatePriceConfig);
document.getElementById("print-size-s").addEventListener("click", calculatePriceConfig);
document.getElementById("print-size-m").addEventListener("click", calculatePriceConfig);
document.getElementById("print-size-l").addEventListener("click", calculatePriceConfig);
document.getElementById("frame-style-elegant").addEventListener("click", calculatePriceConfig);
document.getElementById("frame-style-classic").addEventListener("click", calculatePriceConfig);
document.getElementById("frame-style-shabby").addEventListener("click", calculatePriceConfig);
document.getElementById("frame-style-natural").addEventListener("click", calculatePriceConfig);
document.getElementById("frameWidth-display").addEventListener("change", renderPreview);
document.getElementById("frameWidth-slider").addEventListener("input", renderPreview);
document.getElementById("matWidth-display").addEventListener("change", renderPreview);
document.getElementById("matWidth-slider").addEventListener("input", renderPreview);
document.getElementById("print-size-s").addEventListener("click", renderPreview);
document.getElementById("print-size-m").addEventListener("click", renderPreview);
document.getElementById("print-size-l").addEventListener("click", renderPreview);
document.getElementById("frame-style-elegant").addEventListener("click", renderPreview);
document.getElementById("frame-style-classic").addEventListener("click", renderPreview);
document.getElementById("frame-style-shabby").addEventListener("click", renderPreview);
document.getElementById("frame-style-natural").addEventListener("click", renderPreview);
document.getElementById("mat-color-coal").addEventListener("click", renderPreview);
document.getElementById("mat-color-ivory").addEventListener("click", renderPreview);
document.getElementById("mat-color-wine").addEventListener("click", renderPreview);
document.getElementById("mat-color-mint").addEventListener("click", renderPreview);
document.getElementById("mat-color-indigo").addEventListener("click", renderPreview);
document.getElementById("preview-image").addEventListener("load", renderPreview);



const objectID = params.get("objectID");
if (objectID === null) 

let cached = localStorage.getItem("object" + objectID);
if (cached === undefined || cached ===null)  else {
    let cachedArtwork = JSON.parse(cached);
    if (cachedArtwork.artistDisplayName !== null) document.getElementById("artwork-author").innerHTML = cachedArtwork.artistDisplayName;
    if (cachedArtwork.title !== null) document.getElementById("artwork-name").innerHTML = cachedArtwork.title;
    if (cachedArtwork.objectDate != null) document.getElementById("artwork-date").innerHTML = cachedArtwork.objectDate;
    if (cachedArtwork["primaryImageSmall"] !== null) document.getElementById("preview-image").src = cachedArtwork["primaryImageSmall"];
}

applyFrameStyleParam();
applyFrameWidthParam();
applyMatColorParam();
applyMatWidthParam();
applyPrintSizeParam();

calculatePriceConfig()

function renderPreview() {
    render(document.getElementById("preview-image"), document.getElementById("preview-container"), getCheckedSize(), getCheckedStyle(),
        document.getElementById("frameWidth-display").value * 10, getCheckedColor(),(document.getElementById("matWidth-display").value * 10).toFixed(2));
}

function calculatePriceConfig() {
    document.getElementById("price").innerHTML = "€ " + calculatePrice(getCheckedSize(), getCheckedStyle(), document.getElementById("frameWidth-display").value * 10,
        document.getElementById("matWidth-display").value * 10).toFixed(2);
}



function getCheckedSize() {
    if (document.getElementById("print-size-s").checked === true) 
    else if (document.getElementById("print-size-m").checked === true) 
    else return "L";
}

function getCheckedColor() {
    if (document.getElementById("mat-color-coal").checked === true) 
    else if (document.getElementById("mat-color-indigo").checked === true) 
    else if (document.getElementById("mat-color-ivory").checked === true) 
    else if (document.getElementById("mat-color-mint").checked === true) 
    else return "wine";
}

function getCheckedStyle() {
    if (document.getElementById("frame-style-classic").checked === true) 
    else if (document.getElementById("frame-style-shabby").checked === true) 
    else if (document.getElementById("frame-style-elegant").checked === true) 
    else return "natural";


}
function applyPrintSizeParam() {
    switch(params.get("printSize")) {
        
        
        
        default:
            document.getElementById("print-size-s").checked = false;
            document.getElementById("print-size-m").checked = false;
            document.getElementById("print-size-l").checked = false;
    }
}

function applyFrameWidthParam() {
    if (params.get("frameWidth") !== null) 
}

function applyMatWidthParam() {
    if (params.get("matWidth") !== null) 
}

function applyFrameStyleParam() {
    switch (params.get("frameStyle")) {
        
        
        
        
        default:
            document.getElementById("frame-style-classic").checked = false;
            document.getElementById("frame-style-natural").checked = false;
            document.getElementById("frame-style-shabby").checked = false;
            document.getElementById("frame-style-elegant").checked = false;
    }
}

function applyMatColorParam() {
    switch (params.get("matColor")) {
        
        
        
        
        
        default:
            document.getElementById("mat-color-ivory").checked = false;
            document.getElementById("mat-color-mint").checked = false;
            document.getElementById("mat-color-wine").checked = false;
            document.getElementById("mat-color-indigo").checked = false;
            document.getElementById("mat-color-coal").checked = false;

    }
}










export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

const frameSizeCosts = {
    S: 1,
    M: 2,
    L: 3.5
};
const frameStyleCosts = {
    classic: 1,
    natural: 0.8,
    shabby: 0.9,
    elegant: 0.85
};
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    const matPrice = 0.05; //5c
    if (!["S", "M", "L"].includes(printSize) || !["classic", "natural", "shabby", "elegant"].includes(frameStyle)
    || frameWidth < 20 || frameWidth > 50 || matWidth < 0 || matWidth > 100) 
    price = (30 + (frameWidth/10.0) * frameStyleCosts[frameStyle] + (matWidth/10.0) * matPrice) * frameSizeCosts[printSize];
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export class SearchItem {

    constructor(objectID, source, artist, title, date){
        this.objectID = objectID;
        this.source = source;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}import {SearchItem} from "./SearchItem.js";

let objectIDs = [];
let searchItems = [];
let count = 0;
let total = 0;

const requestUrl = 'https://collectionapi.metmuseum.org/public/collection/v1/';

const searchInfo = document.getElementById('search-info');

displayNoInCart();

const query = new URLSearchParams(window.location.search).get('q');

if(query === null || query === '')  else {
    searchInfo.innerHTML = 'Searching for “' + query + '”...';
    createSearchList();
}



function createSearchList(){

    fetch(requestUrl + 'search?hasImages=true&q=' + query).then(response => {
        if (response.ok) {
            console.log('TEST fetch Search');
            response.json().then(json => { 
                    objectIDs = json.objectIDs;
                    if (json.total === 0) 
                    console.log('Objects highlight');
                    console.log(objectIDs);

                    if(objectIDs !== null && objectIDs.length > 100)
                        

                    getObjectsFromAPI();
                    createItemsFromTemplate(searchItems);
                }
            )
        }
    });
}

function getObjectsFromAPI(){
    if (objectIDs === null || objectIDs === undefined) else {
        total = objectIDs.length;

        objectIDs.forEach(item => {
            let cached = localStorage.getItem('object' + item);
            if (cached !== undefined && cached !== null) {
                var json = JSON.parse(cached);
                searchItems.push(new SearchItem(item, json.primaryImageSmall, json.artistDisplayName, json.title, json.objectDate));
                checkAllLoaded();
            }


            /*var requestItem = new XMLHttpRequest();
            requestItem.open("GET", requestUrl + 'objects/' + item, false);
            requestItem.send(null);
            var json = JSON.parse(requestItem.responseText);
            searchItems.push(new SearchItem(item, json.primaryImageSmall, json.artistDisplayName, json.title, json.objectDate));*/
        });
    }
}

function checkAllLoaded(){
    count++;
    if(query !== null && query !== '') {
        if (total <= count) {
            localStorage.setItem("test", total + " " + count + " " + objectIDs + " ye")
            count = 0;
            if(objectIDs === null || objectIDs === undefined || objectIDs.length === null || objectIDs.length === undefined || objectIDs.length === 0) else if (objectIDs.length === 1)  else {
                searchInfo.innerHTML = 'Found ' + objectIDs.length + ' artworks for “' + query + '”';
            }
        }
    }
}

function createItemsFromTemplate(items){
    let template = "";
    var index = 0;

    items.forEach(item => {
        template += `
            <div class="thumb">
                <a href=${"config.html?objectID=" + item.objectID} id=${"object-" + index}>
                    <img src=${item.source} alt="" id=${"object-image-" + index}>
                    <div class="museum-label">
                        <span class="artist">${item.artist}</span>
                        <span class="title">${item.title}</span>,
                        <span class="date">${item.date}</span>
                </div>
                </a>
            </div>`
        index++;
    });
    document.getElementById('gallery').insertAdjacentHTML('afterbegin', template);

}

export function displayNoInCart() {
    let items = [];
    if(localStorage.getItem("cart") !== null) 
    if (items.length > 0) 
}
