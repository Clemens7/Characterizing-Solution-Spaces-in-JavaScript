
    import {calculatePrice, render} from "./frame.js";
    import {saveShoppingCart, getShoppingCart} from "./Util.js";
    import CartItem from "./CartItem.js";
    import ShoppingCart from "./ShoppingCart.js";

/*    let cart = [ { "objectID": 39799,
                  "printSize": 'M',
                  "frameStyle": 'classic',
                  "frameWidth": 4,
                  "matColor": 'red',
                  "matWidth": 5},
                { "objectID": 437853,
                  "printSize": 'L',
                  "frameStyle": 'shabby',
                  "frameWidth": 3,
                  "matColor": 'red',
                  "matWidth": 5},
                { "objectID": 436535,
                  "printSize": 'L',
                  "frameStyle": 'natural',
                  "frameWidth": 5,
                  "matColor": 'red',
                  "matWidth": 6},
                { "objectID": 634108,
                  "printSize": 'M',
                  "frameStyle": 'classic',
                  "frameWidth": 3,
                  "matColor": 'red',
                  "matWidth": 2},
                { "objectID": 435882,
                  "printSize": 'L',
                  "frameStyle": 'elegant',
                  "frameWidth": 6,
                  "matColor": 'red',
                  "matWidth": 7},
                { "objectID": 459054,
                  "printSize": 'M',
                  "frameStyle": 'classic',
                  "frameWidth": 4,
                  "matColor": 'red',
                  "matWidth": 5}
            ];
    localStorage.setItem("cart", JSON.stringify(cart));*/

    let shoppingCart = getShoppingCart();

    let items = document.getElementById('cart');

    if((localStorage.getItem('cart') != null && shoppingCart.getSize() > 0)) else {

      let cartTotal = setCartTotal(false);
      items.appendChild(cartTotal)
    }

    function setCartTotal(notEmpty){

      let cartTotal = document.createElement('div');
      cartTotal.setAttribute('class', 'cart-total');

      let priceTotal = document.createElement('div');
      priceTotal.setAttribute('class', 'price');
      priceTotal.innerText = 'Total: € ';
      cartTotal.appendChild(priceTotal);

      let priceTotalResult = document.createElement('span');
      priceTotalResult.setAttribute('id', 'price-total');
      priceTotalResult.innerText = 0;
      priceTotal.appendChild(priceTotalResult);

      let checkout = document.createElement('button');
      checkout.setAttribute('type', 'button');
      checkout.setAttribute('id', 'checkout-button');
      checkout.innerText = 'Checkout';

      cartTotal.appendChild(checkout);

      if(!notEmpty){
        checkout.disabled = true;
        items.innerText = 'There are no items in your shopping cart.';
      }
      return cartTotal;
    }

    

  import {calculatePrice} from './frame.js';

export default class CartItem {

    

    
}
    import {calculatePrice, render, getPrintSizes} from "./frame.js";
    import {getShoppingCart, saveShoppingCart} from "./Util.js";
    import CartItem from "./CartItem.js";

    let urlParameters = new URLSearchParams(window.location.search);
    let objID = null;
    let printSize = null;
    let frameStyle = null;
    let frameWidth = null;
    let matColor = null;
    let matWidth = null;

    let sliderFrameWidth = document.getElementsByName('frameWidthR')[0];
    sliderFrameWidth.defaultValue = 2.0; //default must be set to 2
    sliderFrameWidth.step = 0.1;
    let numberFrameWidth = document.getElementsByName('frameWidth')[0];
    numberFrameWidth.defaultValue = 2.0;

    if (urlParameters.has('frameWidth'))  else {
        frameWidth = 2.0;
    }

    sliderFrameWidth.value = Math.round(frameWidth * 10) / 10;
    numberFrameWidth.value = Math.round(frameWidth * 10) / 10;
    urlParameters.set('frameWidth', Math.round(frameWidth * 10) / 10);

    let sliderMatWidth = document.getElementsByName('matWidthR')[0];
    sliderMatWidth.defaultValue = 0.0;
    sliderMatWidth.step = 0.1;
    let numberMatWidth = document.getElementsByName('matWidth')[0];

    if (urlParameters.has('matWidth'))  else {
        matWidth = 0.0;
    }

    sliderMatWidth.value = Math.round(matWidth * 10) / 10;
    numberMatWidth.value = Math.round(matWidth * 10) / 10;
    urlParameters.set('matWidth', Math.round(matWidth * 10) / 10);

    let shoppingCart = getShoppingCart();
    if (shoppingCart && shoppingCart.getSize() !== 0) 

    const form = document.querySelector('.buy');
    form.addEventListener('submit', );

    form.addEventListener('click', );

    if (urlParameters.has('objectID')) {
        objID = urlParameters.get('objectID');
    }

    if (urlParameters.has('printSize'))  else {
        printSize = 'M'; //Default Value
    }

    if (urlParameters.has('frameStyle'))  else {
        frameStyle = 'natural';
    }

    if (urlParameters.has('matColor'))  else {
        matColor = 'mint';
    }

    const img = document.getElementById('preview-image');
    const imgContainer = document.getElementById('preview-container');

    let request = 'https://collectionapi.metmuseum.org/public/collection/v1/objects/' + objID;

    fetch(request)
        .then(async function (data) {
            if (data.status !== 200)  else {
                data = await data.json();

                img.setAttribute('src', data.primaryImageSmall);
                img.addEventListener('load', function () {

                    const printSizes = getPrintSizes(img);

                    document
                        .getElementById('print-size-s-label')
                        .innerHTML = 'Small<br>' +
                        printSizes['S'][0] / 10 +
                        ' × ' +
                        printSizes['S'][1] / 10 +
                        ' cm';

                    document
                        .getElementById('print-size-m-label')
                        .innerHTML = 'Medium<br>' +
                        (printSizes['M'][0]) / 10 +
                        ' × ' +
                        printSizes['M'][1] / 10 +
                        ' cm';

                    document
                        .getElementById('print-size-l-label')
                        .innerHTML = 'Large<br>' +
                        printSizes['L'][0] / 10 +
                        ' × ' +
                        printSizes['L'][1] / 10 +
                        ' cm';

                    sliderFrameWidth.addEventListener('change', );

                    numberFrameWidth.addEventListener('change', );

                    sliderMatWidth.addEventListener('change', );

                    numberMatWidth.addEventListener('change', );

                    document.getElementById('print-size-s').addEventListener('click', );

                    document.getElementById('print-size-m').addEventListener('click', );

                    document.getElementById('print-size-l').addEventListener('click', );

                    document.querySelectorAll('.frame-style-item').forEach(elem => {
                        elem.addEventListener('change', )
                    });

                    document.querySelectorAll('.mat-color-item').forEach(elem => {
                        elem.addEventListener('change', )
                    });

                    let price = calculatePrice(printSize, frameStyle, frameWidth, matWidth);
                    if (!Number.isInteger(price) && Number.isInteger(price * 10)) {
                        price = price.toString() + '0';
                    }
                    document.getElementById('price').innerText = '€ ' + price;
                    document.getElementById('total-size').innerText = ((parseFloat(printSizes[printSize][0]) / 10 + parseFloat(frameWidth)) + parseFloat(matWidth)) + ' x ' + ((parseFloat(printSizes[printSize][1]) / 10 + parseFloat(frameWidth)) + parseFloat(matWidth)) + ' cm';

                    render(img, imgContainer, printSize, frameStyle, frameWidth * 10, matColor, matWidth * 10);
                });

                let imgArtist = document.createElement('span');
                imgArtist.setAttribute('class', 'artist');
                imgArtist.innerText = data.artistDisplayName;

                document.getElementById('image-label').appendChild(imgArtist);
                let imgTitle = document.createElement('span');
                imgTitle.setAttribute('class', 'title');
                imgTitle.innerText = data.title;

                document.getElementById('image-label').appendChild(imgTitle);
                let imgYear = document.createElement("span");
                imgYear.setAttribute('class', 'date');
                imgYear.innerText = ' ' + data.objectDate;

                document.getElementById('image-label').appendChild(imgYear);
            }
        })
        .catch();
export 

export 

export 

    import {getShoppingCart} from "./Util.js";

    let shoppingCart = getShoppingCart();
    if((localStorage.getItem('cart') != null && shoppingCart.getSize() > 0)) 
    /*
    const form = document.querySelector('form');
    form.addEventListener('submit', );

    document.addEventListener('DOMContentLoaded', event => {
      const params = (new URL(document.location)).searchParams;
      const actualQuery = params.get('q');
      if(!actualQuery){
        useHighlights(); //use highlights when no parameter is given
        return;
      }});
  
class Artwork {
  
}

var SearchTerms = {
  serialize : ,
  parse : 
}

async function useHighlights(){
  var highlights = [39799, 459055, 437853, 435809, 436535, 360018, 634108, 459080, 435882, 271890, 459054, 436105];
  var i = 0;
  for( i = 0; i < 12; i++){
    addGridElement(highlights[i], i);
  }
}









async function addGridElement(retrievedObject, nthObject){
  var url = "https://collectionapi.metmuseum.org/public/collection/v1/objects/"+retrievedObject;
  const response = await fetch(url);
  const data = await response.json();

  function processObjectRequest(){
      var thumb = document.createElement("div");
      thumb.setAttribute("class", "thumb");
      thumb.setAttribute("id", "thumb-"+nthObject);

      var aOfThumb = document.createElement("a");
      aOfThumb.setAttribute("href", ""); //TODO
      aOfThumb.setAttribute("id", "object-"+nthObject);

      var imgOfThumb = document.createElement("img");
      imgOfThumb.setAttribute("src", data.primaryImageSmall);
      imgOfThumb.setAttribute("alt", data.objectName);
      imgOfThumb.setAttribute("id", "object-image-"+nthObject);

      var labelOfThumb = document.createElement("div");
      labelOfThumb.setAttribute("class", "museum-label");

      var artist = document.createElement("span");
      artist.setAttribute("class", "artist");
      artist.setAttribute("id", "artist"+nthObject);

      artist.innerText = data.artistDisplayName;

      var title = document.createElement("span");
      title.setAttribute("class", "title");
      title.setAttribute("id", "title"+nthObject);

      title.innerText = data.title;

      var comma = document.createElement("text");
      comma.innerText = ", ";

      var date = document.createElement("span");
      date.setAttribute("class", "date");
      date.setAttribute("id", "date"+nthObject);

      date.innerText = data.objectDate;

      thumb.appendChild(aOfThumb);
      aOfThumb.appendChild(imgOfThumb);
      labelOfThumb.appendChild(artist);
      labelOfThumb.appendChild(title);
      labelOfThumb.appendChild(comma);
      labelOfThumb.appendChild(date);
      aOfThumb.appendChild(labelOfThumb);

      document.getElementById("gallery").appendChild(thumb);
    }

    processObjectRequest();
}
import CartItem from "./CartItem.js";

export default class ShoppingCart {
    constructor(items) {
        this.items = items;
    }

    

    

    

    

    

    getSize() {
        if (this.items != null) {
            return this.items.length;
        }
    }
}import CartItem from './CartItem.js';
import ShoppingCart from './ShoppingCart.js';


export function getShoppingCart() {
    let objStr = localStorage.getItem("cart");
    if (!objStr) 
    let itemArr = JSON.parse(objStr);
    let cartItemArr = itemArr.map();
    return new ShoppingCart(cartItemArr);
}

export 


export 


