
    import * as Frame from './frame.js';

    let image = document.querySelector('#preview-image');
    const label = document.querySelector('#image-label');

    let params      = (new URL(document.location)).searchParams;
    let objectID    = parseInt(params.get("objectID"));
    let printSize   = params.get("printSize");
    if (printSize == null) 
    let frameWidth  = parseInt(params.get("frameWidth")); 
    if (isNaN(frameWidth)) 
    let frameStyle  = params.get("frameStyle");
    if (frameStyle == null) 
    let matWidth    = parseInt(params.get("matWidth"));
    if (isNaN(matWidth)) 
    let matColor    = params.get("matColor");
    if (matColor == null) 

    calculateTotalPrice();

    if (isNaN(objectID)) 

    function loadImage(input){

      if (objectID in localStorage)  else {
        fetch('https://collectionapi.metmuseum.org/public/collection/v1/objects/' + input)
        .then((Response) => {
          if (Response.status !== 200) 
          return Response.json();
        }).then((data) => {
          image.src = data.primaryImageSmall; 
          label.innerHTML = '<div class="artist">' + data.artistDisplayName + '</div>' + data.title + ', ' + data.objectDate;
          var dataJSON = JSON.stringify(data);
          localStorage[objectID] = dataJSON;
        }).catch();
      }

      let key = 'cart';
      if (key in localStorage) 
    }
    loadImage(objectID);

    function pre_set(){
      if(objectID == null) else {
        document.querySelector('#object-id').value = objectID;
      }

      if(printSize != null){
        if(printSize == "S" || printSize == "s") else if(printSize == "M" ){
          var printSizeSelection = document.querySelector('#print-size-m');
        } 
        if(printSizeSelection != null){
          printSizeSelection.checked = true;
        }
      }

      if(!isNaN(frameWidth)){
        var realFrameWidth = frameWidth / 10;
        if (parseFloat(realFrameWidth) < 2)  else if (parseFloat(realFrameWidth) > 5) 
        document.querySelector('input[name="frameWidth"]').value = realFrameWidth;
        document.querySelector('input[name="frameWidthR"]').value = realFrameWidth;
      }

      if(frameStyle != null){
        if(frameStyle == "classic") else if(frameStyle == "natural") else if(frameStyle == "shabby"){
          var frameStyleSelection = document.querySelector('#frame-style-shabby');
        }
        if(frameStyleSelection != null){
          frameStyleSelection.checked = true;
        }
      }

      if(!isNaN(matWidth)){
        var realMatWidth = matWidth / 10;
        if (realMatWidth < 0)  else if (realMatWidth > 10) 
        document.querySelector('input[name="matWidth"]').value = realMatWidth;
        document.querySelector('input[name="matWidthR"]').value = realMatWidth;
      }
  
      if(matColor != null){
        if(matColor == "ivory") else if(matColor == "mint"){
          var matColorSelection = document.querySelector('#mat-color-mint');
        }
        if(matColorSelection != null){
          matColorSelection.checked = true;
        }
      }

    }
    pre_set();

    function linkSlider(slider){
      var text_box = document.querySelector('#'+slider.getAttribute("link-to"));

      var min = parseInt(text_box.min);
      var max = parseInt(text_box.max);

      text_box.value = slider.value;

      slider.addEventListener("change", );

      text_box.addEventListener("change", );

    }
    document.querySelectorAll('input[type="range"]').forEach(element => linkSlider(element));
    
    function calculateTotalPrice(){
      let totalPrice = document.getElementById('price');
      let notFixedPrice = Frame.calculatePrice(printSize, frameStyle, frameWidth, matWidth);
      console.log("not fixed: " + notFixedPrice);
      totalPrice.textContent = "â‚¬ " + notFixedPrice.toFixed(2);
    }

    function renderImage() {
      let previewContainer = document.getElementById('preview-container');
      Frame.render(image, previewContainer, printSize, frameStyle, frameWidth, matColor, matWidth);
    }

    image.addEventListener('load', renderImage);

    

    let configForm = document.getElementById('config-form');
    configForm.addEventListener('submit', addAndProceedToCart);

    
    
    
    
    

    document.getElementById('print-size-s').addEventListener('change', changePrintSize);
    document.getElementById('print-size-m').addEventListener('change', changePrintSize);
    document.getElementById('print-size-l').addEventListener('change', changePrintSize);

    document.getElementsByName('frameWidthR')[0].addEventListener('change', changeFrameWidth);
    document.getElementsByName('frameWidth')[0].addEventListener('change', changeFrameWidth);

    document.getElementById('frame-style-classic').addEventListener('change', changeFrameStyle);
    document.getElementById('frame-style-natural').addEventListener('change', changeFrameStyle);
    document.getElementById('frame-style-shabby').addEventListener('change', changeFrameStyle);
    document.getElementById('frame-style-elegant').addEventListener('change', changeFrameStyle);

    document.getElementsByName('matWidthR')[0].addEventListener('change', changeMatWidth);
    document.getElementsByName('matWidth')[0].addEventListener('change', changeMatWidth);

    document.getElementById('mat-color-ivory').addEventListener('change', changeMatColor);
    document.getElementById('mat-color-mint').addEventListener('change', changeMatColor);
    document.getElementById('mat-color-wine').addEventListener('change', changeMatColor);
    document.getElementById('mat-color-indigo').addEventListener('change', changeMatColor);
    document.getElementById('mat-color-coal').addEventListener('change', changeMatColor);

  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {

    let price = 0.0;
    let basePrice = 30.0;
    let sizeFactor;
    let frameStylePrice;
    let mat = 0.05;

    switch(printSize){
        
        case "M":
            sizeFactor = 2.0;
            break;
        
        
    }

    switch(frameStyle){
        
        case "shabby":
            frameStylePrice = 0.90;
            break;
        
        
        
    }

    console.log("framestyleprice: " + frameStylePrice);
    let framePrice = frameStylePrice * frameWidth / 10;
    let matPrice = mat * matWidth / 10;
    price = (basePrice + framePrice + matPrice) * sizeFactor;
    console.log("Frame Price: " + price);

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
