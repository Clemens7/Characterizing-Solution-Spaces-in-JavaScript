var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Artwork } from "./model/artwork.js";
import * as ArtworkCache from "./repository/artwork-cache.js";
const searchUrl = "https://collectionapi.metmuseum.org/public/collection/v1/search";
const objectUrl = "https://collectionapi.metmuseum.org/public/collection/v1/objects/";
export function search(searchText) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = encodeURI(searchUrl + `?q=${searchText.trim().replace("+", " ")}&hasImages=true`);
        console.log(`Search api url: ${url}`);
        let ret = [];
        try {
            const response = yield fetch(url);
            const data = yield response.json();
            if (!data.objectIDs) 
            let count = 0;
            data.objectIDs.map((objid) => {
                if (count < 100) {
                    ret.push(objid);
                }
                count++;
            });
            return ret;
        }});
}
export function getArtwork(artworkId) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${objectUrl}${artworkId}`;
        const artwork = ArtworkCache.retrieve(artworkId);
        if (artwork) 
        try {
            const response = yield fetch(url);
            const data = yield response.json();
            if (data) {
                if (!data.primaryImageSmall) 
                const newArtwork = new Artwork(data);
                ArtworkCache.store(newArtwork);
                return newArtwork;
            }});
}
import { Artwork } from "../model/artwork.js";
import { LocalStorageUtil } from "../util/LocalStorageUtil.js";
export function retrieve(objectID) {
    let key = objectID;
    let stored = LocalStorageUtil.retrieve(key);
    if (stored !== null) 
    return null;
}
export function store(artwork) {
    console.log(`Artwork ${artwork.objectID} stored in cache`);
    LocalStorageUtil.store(artwork.objectID, artwork);
}
export class Artwork {
    constructor(json) {
        this.objectID = "";
        this.imageSrc = "";
        this.artist = "";
        this.title = "";
        this.date = "";
        if (json) {
            this.objectID = json.objectID;
            this.imageSrc = json.primaryImageSmall;
            this.artist = json.artistDisplayName;
            this.title = json.title;
            this.date = json.objectDate;
        }
    }
}
import { ConfiguredFrameRepository } from "./repository/ConfiguredFrameRepository.js";
const ID_CARTLINK = 'cart-link';
document.addEventListener('DOMContentLoaded', () => {
    updateCartCounter();
});
export function updateCartCounter() {
    const configuredFrameRepository = new ConfiguredFrameRepository();
    const cartLink = document.getElementById(ID_CARTLINK);
    if (cartLink !== null) {
        const itemsInCart = configuredFrameRepository.getAllFrames().length;
        if (itemsInCart > 0) 
        else {
            cartLink.innerText = 'Cart';
        }
    }
}
import { LocalStorageUtil } from "../util/LocalStorageUtil.js";
import { ConfiguredFrame } from "../model/ConfiguredFrame.js";
export class ConfiguredFrameRepository {
    getAllFrames() {
        let allFrames = [];
        let allFramesFromStorage = LocalStorageUtil.retrieve(ConfiguredFrameRepository.LOCALSTORAGE_KEY);
        if (allFramesFromStorage !== null) 
        return allFrames;
    }
    
    
    
    
}
ConfiguredFrameRepository.LOCALSTORAGE_KEY = 'cart';
export class ConfiguredFrame {
    
    
    
    
    
    
    
    
    
    static 
    
    
    
    
}
export class LocalStorageUtil {
    static retrieve(localStorageKey) {
        if (!(localStorageKey in localStorage)) {
            return null;
        }
    }
    static store(key, value) {
        localStorage[key] = JSON.stringify(value);
    }
}
export class SearchDom {
    constructor(containerID = "gallery") {
        const tmpContainer = document.getElementById(containerID);
        if (!tmpContainer) 
        else {
            this.container = tmpContainer;
        }
    }
    clearContainer() {
        this.container.innerHTML = "";
    }
    addArtworkToContainer(artwork) {
        let thumb = document.createElement("div");
        thumb.classList.add("thumb");
        let link = document.createElement("a");
        link.href = `config.html?objectID=${artwork.objectID}`;
        thumb.appendChild(link);
        let img = document.createElement("img");
        img.src = artwork.imageSrc;
        img.alt = `Artwork of ${artwork.artist}, Title: ${artwork.title}, Date: ${artwork.date}`;
        link.appendChild(img);
        let label = document.createElement("div");
        label.classList.add("museum-label");
        link.appendChild(label);
        let artist = document.createElement("span");
        artist.classList.add("artist");
        artist.innerText = artwork.artist;
        label.appendChild(artist);
        let title = document.createElement("span");
        title.classList.add("title");
        title.innerText = artwork.title;
        label.appendChild(title);
        label.appendChild(document.createTextNode(", "));
        let date = document.createElement("span");
        date.classList.add("date");
        date.innerText = artwork.date;
        label.appendChild(date);
        this.container.appendChild(thumb);
    }
}
var __awaiter = (this ) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value ; }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); }  }
        
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as ArtworkApi from "./artwork-api.js"; // use .js even tough webstorm may complain as it won't work otherwise after compilation
import { SearchDom } from "./search-dom.js";
const searchDom = new SearchDom();
function parseArtworkIDs(artworkIDs, searchText) {
    let promises = [];
    for (let artworkId of artworkIDs) {
        promises.push(ArtworkApi.getArtwork(artworkId));
    }
    Promise.all(promises).then((artworks) => {
        if (searchText) {
            const heading = document.getElementById("search-info");
            if (heading)
                heading.innerText = `Found ${artworks.length} artwork${artworks.length === 1  : "s"} for “${searchText}”`;
        }
        document.body.style.cursor = "default";
        searchDom.clearContainer();
        for (let artwork of artworks) {
            if (artwork) {
                searchDom.addArtworkToContainer(artwork);
            }
        }
    });
}
function searchArtworks(searchText) {
    return __awaiter(this, void 0, void 0, function* () {
        const heading = document.getElementById("search-info");
        if (heading)
            heading.innerText = `Searching for “${searchText}”...`;
        document.body.style.cursor = "wait";
        const res = yield ArtworkApi.search(searchInput.value);
        parseArtworkIDs(res, searchText);
    });
}
document.addEventListener('DOMContentLoaded', (event) => __awaiter(void 0, void 0, void 0, function* () {
    const params = (new URL(document.location.href)).searchParams;
    const searchQuery = params.get('q');
    if (!searchQuery) 
    else {
        document.getElementById('search').value = searchQuery;
        searchArtworks(searchQuery);
    }
}));
const searchInput = document.getElementById("search");
const searchForm = document.getElementsByClassName("search-form")[0];
searchForm.addEventListener("submit", );
