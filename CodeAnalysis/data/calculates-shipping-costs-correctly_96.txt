import {getCartItems} from "../util.js";
import {calculatePrice} from "../../frame.js";

var subTotalPrice = 0;
var data;
var selection = document.getElementById("country");
var btn = document.getElementById("pay-button");
var countryOptions = document.getElementById("country");

initCheckout();

function initCheckout() {
    btn.disabled = true;
    selection.addEventListener('change', calculateTotalPrice);
    const cartItems = getCartItems();
    if (cartItems.length === 0 || cartItems.length === null) 
    calculateSubTotalPrice();
    getShippingCosts();
}

function calculateSubTotalPrice() {
    const cartItems = getCartItems();
    cartItems.forEach(item => {
        subTotalPrice += parseFloat(calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2));
    });
    document.getElementById("price-subtotal").innerText = subTotalPrice;
}

async function getShippingCosts() {
    const response = await fetch("https://web-engineering.big.tuwien.ac.at/s20/a2/shipping");
    data = await response.json();
    data.destinations.forEach(destination => {
        let newCountry = document.createElement("option");
        newCountry.value = destination.displayName;
        newCountry.innerText = destination.displayName;
        countryOptions.appendChild(newCountry);
    });
    calculateTotalPrice();
}

function calculateTotalPrice() {
    let selectedCountry = selection.value;
    data.destinations.forEach(destination => {
        if (destination.displayName === selectedCountry) {
            document.getElementById("price-shipping").innerText = parseFloat((destination.cost / 100)).toFixed(2);
            document.getElementById("price-total").innerText = parseFloat((subTotalPrice + (destination.cost / 100))).toFixed(2);
            btn.disabled = false;
        }
    });
}
export 

export 

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;

    const pricePerCm = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    }

    price += frameWidth * pricePerCm[frameStyle];
    price += matWidth * 0.05;
    if (printSize == "M") {
        price *= 2;
    } else if (printSize == "L") {
        price *= 3.5;
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export 
const API_URL = "https://collectionapi.metmuseum.org/public/collection/v1";//http://localhost:4445/ https://collectionapi.metmuseum.org/public/collection/v1
/*
for localhost test:

 1)
run two nodejs processes in folder test with params:  "mock-server/server.js 4445" and
"node_modules/static-server/bin/static-server.js -p 4444 ../wwwnode node_m"

2)
in browser set the localstorage item(for cart test)
localStorage.setItem('cart',"[{\"objectID\":1,\"printSize\":\"M\",\"frameStyle\":\"shabby\",\"frameWidth\":24,\"matColor\":\"coal\",\"matWidth\":23},{\"objectID\":2,\"printSize\":\"M\",\"frameStyle\":\"natural\",\"frameWidth\":46,\"matColor\":\"indigo\",\"matWidth\":17},{\"objectID\":3,\"printSize\":\"S\",\"frameStyle\":\"elegant\",\"frameWidth\":20,\"matColor\":\"wine\",\"matWidth\":9}]");
localStorage.setItem('cart',"[{\"objectID\":207059,\"printSize\":\"S\",\"frameStyle\":\"shabby\",\"frameWidth\":20,\"matColor\":\"coal\",\"matWidth\":23},{\"objectID\":2,\"printSize\":\"M\",\"frameStyle\":\"natural\",\"frameWidth\":46,\"matColor\":\"indigo\",\"matWidth\":17},{\"objectID\":3,\"printSize\":\"S\",\"frameStyle\":\"elegant\",\"frameWidth\":20,\"matColor\":\"wine\",\"matWidth\":9}]");

[{"objectID":1,"printSize":"M","frameStyle":"shabby","frameWidth":24,"matColor":"coal","matWidth":23},{"objectID":2,"printSize":"M","frameStyle":"natural","frameWidth":46,"matColor":"indigo","matWidth":17},{"objectID":3,"printSize":"S","frameStyle":"elegant","frameWidth":20,"matColor":"wine","matWidth":9}]



export 

export 

/* Can not be used bc of the fixed tests whichs sets the localStorage Items
function getNextItemID() {
    let currItemID = localStorage.getItem("currentItemID");
    if(currItemID === undefined || currItemID == null){
        localStorage.setItem("currentItemID","1");
        return 1;
    }else{
        currItemID = parseInt(currItemID)+1;
        localStorage.setItem("currentItemID",currItemID);
        return currItemID;
    }
}*/

export 

export 



export function getCartItems() {
    if (localStorage.getItem("cart") === null) 
    return JSON.parse(localStorage.getItem("cart"));
}

export 

export 

export 