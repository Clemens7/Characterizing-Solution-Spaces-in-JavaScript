import { Artwork } from "./models.js";

const API_URL = "https://collectionapi.metmuseum.org/public/collection/v1";


export 


import {FrameConfig} from "../models.js";
import {getPrintSizes, render, calculatePrice} from "../frame.js";

document.querySelectorAll('#config-form input').forEach(el => {
  el.addEventListener('change', formChanged);
});

const form = document.getElementById('config-form');
form.frameWidth.addEventListener('change', );

form.frameWidthR.addEventListener('input', );

form.matWidth.addEventListener('change', );

form.matWidthR.addEventListener('input', );

form.addEventListener('submit', );

function formChanged() {
  renderImage();
  setPrice();
}

export function setObjectID(objectID) {
  form['object-id'].value = objectID;
}

export 

export 

export 

export 

export 

export async function initLabelImageSizes(artwork) {
  setLabel(artwork.artist, artwork.title, artwork.date);
  const img = document.getElementById('preview-image');
  img.src = artwork.img;
  await new Promise((resolve, reject) => {
    img.onload = () => resolve();
    img.onerror = ;
  });
  setPrintSizesText(getPrintSizes(img));
  formChanged();
}

function setPrintSizesText(sizes) {
  document.getElementById('print-size-s-label').innerHTML = `Small <br> ${sizes.S[0] / 10} × ${sizes.S[1] / 10} cm`;
  document.getElementById('print-size-m-label').innerHTML = `Medium <br> ${sizes.M[0] / 10} × ${sizes.M[1] / 10} cm`;
  document.getElementById('print-size-l-label').innerHTML = `Large <br> ${sizes.L[0] / 10} × ${sizes.L[1] / 10} cm`;

  const config = getFrameConfigFromDOM();
  const totalWidth = sizes[config.printSize][0] / 10 + config.frameWidth + config.matWidth;
  const totalHeight = sizes[config.printSize][1] / 10 + config.frameWidth + config.matWidth;

  document.getElementById('total-size').innerText = `${totalWidth.toFixed(1)} × ${totalHeight.toFixed(1)} cm`;
}

function getFrameConfigFromDOM() {
  const f = document.getElementById('config-form');
  return new FrameConfig(
    f["object-id"].value,
    f.printSize.value,
    f.frameStyle.value,
    Number.parseFloat(f.frameWidth.value),
    f.matColor.value,
    Number.parseFloat(f.matWidth.value)
  );
}

function setLabel(artistText, titleText, dateText) {
  const imageLabel = document.getElementById('image-label');
  const artist = document.createElement('span');
  const title = document.createElement('span');
  const date = document.createElement('span');
  artist.className = 'artist';
  title.className = 'title';
  date.classname = 'date';
  artist.innerText = artistText;
  title.innerText = titleText;
  date.innerText = `, ${dateText}`;
  imageLabel.appendChild(artist);
  imageLabel.appendChild(title);
  imageLabel.appendChild(date);
}

function renderImage() {
  const config = getFrameConfigFromDOM();
  render(
    document.getElementById('preview-image'),
    document.getElementById('preview-container'),
    config.printSize,
    config.frameStyle,
    config.frameWidth,
    config.matColor,
    config.matWidth
  );
}

function setPrice() {
  const config = getFrameConfigFromDOM();
  const price = calculatePrice(
    config.printSize,
    config.frameStyle,
    config.frameWidth,
    config.matWidth
  );
  document.getElementById('price').innerText = `€ ${price.toFixed(2)}`;
}


import {getArtworkDetails} from "../api.js";
import {FrameConfig} from "../models.js";
import {
  setObjectID,
  setFrameStyle,
  setFrameWidth,
  initLabelImageSizes,
  setMatColor,
  setMatWidth,
  setPrintSize
} from "./config-dom.js";

async function initFrameConfigurator() {
  const rawObjectID = new URLSearchParams(location.search).get("objectID");
  const objectID = Number.parseInt(rawObjectID);

  if (isNaN(objectID)) 

  setFrameConfigFromURL();

  let artwork = JSON.parse(localStorage.getItem(objectID.toString()));
  if (!artwork) 

  if (!artwork || !artwork.img)  else {
    await initLabelImageSizes(artwork);
  }
}

function setFrameConfigFromURL() {
  const frameConfig = getFrameConfigFromURL();
  setObjectID(frameConfig.objectID);

  if (frameConfig.printSize) 
  if (frameConfig.frameStyle) 
  if (frameConfig.frameWidth) 
  if (frameConfig.matColor) 
  if (frameConfig.matWidth) 
}

function getFrameConfigFromURL() {
  const url = new URLSearchParams(location.search);
  return new FrameConfig(
    Number.parseInt(url.get("objectID")),
    url.get("printSize"),
    url.get("frameStyle"),
    Number.parseFloat(url.get("frameWidth")),
    url.get("matColor"),
    Number.parseFloat(url.get("matWidth"))
  );
}



initFrameConfigurator();


export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    let woodCost = 0;
    if (frameStyle === 'classic')  else if (frameStyle === 'natural') {
        woodCost = 0.8;
    }

    let multi = 1;
    if (printSize === 'M') {
        multi = 2;
    }

    price += woodCost * frameWidth + 0.05 * matWidth;
    price *= multi;

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}


export class CartItemsContainer{
    constructor(){
        this.container = document.getElementById('cart-link');
        this.defaultValue = "Cart";
        this.refresh();
    }

    refresh(){
        if(!localStorage['cart'] || localStorage['cart'].length < 1 || localStorage['cart'] == '[]'){
            this.container.innertText = this.defaultValue;
            return;
        }}




}import { CartItemsContainer } from "./header-dom.js";

document.addEventListener("DOMContentLoaded", async (event) => {
    console.log("header js loaded");
    let test = new CartItemsContainer();
    test.refresh();

});export class Artwork {
  
}


export class FrameConfig {

  
}
import * as CACHE from './search-cache.js';
import { Artwork } from '../models.js';
const API_URL = "https://collectionapi.metmuseum.org/public/collection/v1";
export async function search(q){
    if (!q){
        const highlightsPromise  = await fetch("./highlights.json");
        const rawData = await highlightsPromise.json();
        return rawData.highlights;
    };
}
export async function retrieveArtworkDetails(objectID){
    let artwork = CACHE.retrieveResult(objectID);
    if(artwork) return artwork;}


import { Artwork } from '../models.js';

export 
export function retrieveResult(id){
    if (!(id in localStorage))
    console.log(`Retrieving object ${id} from cache`);
    return JSON.parse(localStorage[id]);
}
let currentCount = 0;
import { MAX_ARTWORKS } from "./search.js";
import { Artwork } from '../models.js';
export class SearchResultContainer{
    constructor(){
        this.container = document.getElementById("gallery");
        this.limit = 100;
    }
    render(artwork) {
        this.container.appendChild(createHTMLElement("div", {"class": "thumb"}, [
            createHTMLElement("a", {
                "href": `./config.html?objectID=${artwork.id}`,
                "id": `object-${currentCount}`
            }, [
                createHTMLElement("img", {
                    "src":`${artwork.img}`,
                    "alt": `${artwork.title}`,
                    "id":`object-image-${currentCount}`
                }),
                createHTMLElement("div", {"class":"museum-label"},[
                    createHTMLElement("span", {"class": "artist"},artwork.artist),
                    createHTMLElement("span", {"class": "title"},artwork.title),
                    createHTMLElement("span", {"class": "date"},`, ${artwork.date}`),
                ])
            ])
        ]));
        currentCount++;
    }
    clear(){
        currentCount++;
        this.container.innerHTML = '';
    }

}
export class SearchInfo{
    constructor(){
        this.element = document.getElementById('search-info');
    }
    startSearch(query){
        if(!query){
            this.element.innerHTML = "Search our collection of more than 400,000 artworks.";
            return;
        }}
    searchFinished(query, amount){
        if(!query){
            this.element.innerHTML = "Search our collection of more than 400,000 artworks.";
            return;
        }} artwork${(amount == 1) } for “${query}”`;
    }

}
function createHTMLElement(tag, attributes, content = null){
    const element = document.createElement(tag);
    for (const key in attributes) {
        element.setAttribute(key, attributes[key]);
    }

    if (Array.isArray(content)){
        content.forEach(child => {
            element.appendChild(child);
        });
    }
    else if (content != ""){
        element.innerHTML = content;
    }

    return element;
}
import {SearchResultContainer, SearchInfo} from './search-dom.js';
import * as API from './search-api.js';
document.addEventListener("DOMContentLoaded", async (event) => {
    const urlParams = new URLSearchParams(window.location.search);
    await search(urlParams.get('q'));
    /*
    const form = document.getElementsByClassName("search-form")[0];
    form.addEventListener("submit", );

});
async function search(q){
    const container = new SearchResultContainer();
    container.clear();

    const info = new SearchInfo();
    info.startSearch(q);
    const ids = await API.search(q);
    info.searchFinished(q, ids.length);

    const length = (ids.length > MAX_ARTWORKS)  : ids.length;
    for(let i = 0; i < length; i++){
        let artwork = await API.retrieveArtworkDetails(ids[i]);
        container.render(artwork);
    }
}
export const MAX_ARTWORKS = 100;
