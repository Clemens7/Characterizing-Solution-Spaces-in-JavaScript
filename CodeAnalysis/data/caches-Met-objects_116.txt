import { render, calculatePrice } from "./frame.js";
class ArtworkFull {
  constructor(oid, artist, title, date, image, price, frameDescription, index, printSize, frameWidth, frameStyle, matWidth, matColor, configPath) {
    this.oid = oid;
    this.artist = artist;
    this.title = title;
    this.date = date;
    this.image = image; 
    this.price = price;
    this.frameDescription = frameDescription;
    this.index = index;
    this.printSize = printSize;
    this.frameWidth = frameWidth;
    this.frameStyle = frameStyle;
    this.matWidth = matWidth;
    this.matColor = matColor;
    this.configPath = configPath;
  }
}
window.onload = () => {
  let configs = JSON.parse(localStorage.getItem('cart'));
  base();
  if (configs) {
    if (configs.length > 0) {
      setHeader(configs.length);
      load(configs);
    }
  }
};
function base() {
  document.getElementById('cart').innerHTML = '<div id="empty-cart">There are no items in your shopping cart.</div>';
  document.getElementById('cart').appendChild(createTotalPrice(false));
  setHeader(0);
}
function load(configs) {
  let cart = document.getElementById('cart');

  try {
    let append = (config, j) => {
      if (document.getElementById('empty-cart')) {
        cart.removeChild(document.getElementById('empty-cart'))
      }

      let data = JSON.parse(localStorage.getItem(config.objectID));

      if (data === null)  else {
        createArtwork(data, config, j);
      }
    };

    for (let j = 0; j < configs.length; j++) {
      append(configs[j], j);
    }
  } 
}
function createCartItem(artwork) {
  const cartItem = document.createElement('div');
  cartItem.className = "cart-item";
  cartItem.appendChild(imageContainer(artwork));
  cartItem.appendChild(label(artwork, cartItem));
  return cartItem;
}
function label(artwork, elem) {
  let div = document.createElement('div');
  div.className = 'museum-label';
  div.innerHTML = `
                <div>
                    <span class="artist">${artwork.artist}</span>
                    <span class="title">${artwork.title}</span>,
                    <span class="date">${artwork.date}</span>
                    <br><br>
                    <span class="frame-description">${artwork.frameDescription}</span>
                </div>
                <div class="cart-price">€ <span id="price-${artwork.index}">${artwork.price}</span></div>
                <button class="cart-remove"></button>`;
  div.childNodes[5].addEventListener('click', );
  return div;
}
function imageContainer(artwork) {
  const div = document.createElement('div');
  div.className = 'cart-preview';
  div.id = `preview-container-${artwork.index}`;

  const a = document.createElement('a');
  const img = document.createElement('img');
  a.href = artwork.configPath;
  a.addEventListener('click', );
  img.className = 'cart-thumb';
  img.src = artwork.image;
  img.id = `preview-${artwork.index}`;

  img.addEventListener('load', ()=>
      render(img, div, artwork.printSize, artwork.frameStyle, artwork.frameWidth, artwork.matColor, artwork.matWidth));

  a.appendChild(img);


  div.appendChild(a);
  return div;
}

function updatePrice(number) {
  let price = document.getElementById('price-total').innerHTML;
  let newTotal = (parseFloat(price) + number).toFixed(2);
  document.getElementById('price-total').innerHTML = `${newTotal}`;
  if (newTotal === '0.00')  else {
    document.getElementById('checkout-button').disabled = false;
  }
}
function createTotalPrice(active) {
  let div = document.createElement('div');
  div.className = 'cart-total';
  div.innerHTML =
    `<div class="price">Total: € <span id="price-total">0.00</span></div>
             <button type="button" id="checkout-button" ${active  : 'disabled'} >Checkout</button>`;
  div.childNodes[2].addEventListener('click', );
  return div;
}
function setHeader(length) {
  document.getElementById('cart-link').innerText = `Cart ${length > 0 ? '(' + length + ')' : ''}`;
}
function createArtwork(data, config, i) {
  let cart = document.getElementById('cart');

  let cartItem = new ArtworkFull(
    config.objectID,
    data.artistDisplayName,
    data.title,
    data.objectDate,
    data.primaryImageSmall,
    calculatePrice(config.printSize, config.frameStyle, config.frameWidth, config.matWidth),
    `${{
      "L": "Large",
      "M": "Medium",
      "S": "Small"
    }[config.printSize]} print in a ${config.frameWidth / 10} cm ${config.frameStyle} frame${config.matWidth ? ` with a ${config.matWidth / 10} cm ${config.matColor} mat` }.`,
    i++,
    config.printSize,
    config.frameWidth,
    config.frameStyle,
    config.matWidth,
    config.matColor,
    `./config.html?objectID=${config.objectID}&frameStyle=${config.frameStyle}&matColor=${config.matColor}`
    + `&printSize=${config.printSize}&frameWidth=${config.frameWidth}&`
    + `matWidth=${config.matWidth}`
  );

  if (cartItem.image === '') 

  let newElem = createCartItem(cartItem);

  let prev = document.getElementsByClassName('cart-total')[0];

  cart.insertBefore(newElem, prev);

  updatePrice(Number(cartItem.price.toFixed(2)));

  return newElem;
}
import * as frameFunc from './frame.js';

class Artwork {
  constructor(objectID, printSize, frameWidth, frameStyle, matWidth, matColor, price, totalSize) {
    this.objectID = objectID;
    this.printSize = printSize;
    this.frameWidth = frameWidth;
    this.frameStyle = frameStyle;
    this.matWidth = matWidth;
    this.matColor = matColor;
    this.price = price;
    this.totalsize = totalSize;
  }
}

let oid;
let params;
const artwork = new Artwork(0, "M", "4", "natural", "5.5", "mint");
const frametxt = document.getElementsByName("frameWidth")[0];
const mattxt = document.getElementsByName("matWidth")[0];
const frameslider = document.getElementsByName("frameWidthR")[0];
const matslider = document.getElementsByName("matWidthR")[0];
const form = document.getElementById("config-form");

mattxt.addEventListener('change', );
frametxt.addEventListener('change', );
frameslider.addEventListener('input', );
matslider.addEventListener('input', );
window.onload = function () {
  params = new URLSearchParams(window.location.search);
  if (params.has("objectID")) {
    oid = params.get("objectID");
  }
  if (params.has("frameStyle")) 
  if (params.has("matColor")) 
  if (params.has("printSize")) 
  if (params.has("frameWidth")) 
  if (params.has("matWidth")) 
  retrievePic(oid);
  let cart = document.getElementById('cart-link');
  let cartsize = JSON.parse(localStorage.getItem('cart')).length;
  if (cartsize > 0) 
};

function setValues(item) {
  document.getElementById("preview-image").src = item.primaryImageSmall;
  document.getElementById("image-label").innerHTML = "<b>" + item.title + "</b><br>" + item.artistDisplayName + " " + item.objectDate;
  let printsizes = frameFunc.getPrintSizes(document.getElementById("preview-image"));
  document.getElementById("print-size-s-label").innerHTML = "Small<br>" + (printsizes.S[0] / 10) + " &times; " + (printsizes.S[1] / 10) + " cm";
  document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + (printsizes.M[0] / 10) + " &times; " + (printsizes.M[1] / 10) + " cm";
  document.getElementById("print-size-l-label").innerHTML = "Large<br>" + (printsizes.L[0] / 10) + " &times; " + (printsizes.L[1] / 10) + " cm";
  updateArtwork();
}

function retrievePic() {
  if (localStorage.getItem(oid) !== null) {
    let item = JSON.parse(localStorage.getItem(oid));
    setValues(item);
  }
}

const printsize = document.getElementsByName("printSize");
for (let i = 0; i < printsize.length; i++) {
  printsize[i].addEventListener('change', );
}
const matrow = document.getElementsByClassName("mat-color-item");
for (let i = 0; i < matrow.length; i++) {
  matrow[i].children[0].addEventListener('change', );
}
const framerow = document.getElementsByClassName("frame-style-item");
for (let i = 0; i < framerow.length; i++) {
  framerow[i].children[0].addEventListener('change', );
}



function updateArtwork() {
  frameFunc.render(document.getElementById("preview-image"),
    document.getElementById("preview-container"),
    artwork.printSize,
    artwork.frameStyle,
    artwork.frameWidth,
    artwork.matColor,
    artwork.matWidth);
  artwork.price = frameFunc.calculatePrice(artwork.printSize, artwork.frameStyle, artwork.frameWidth, artwork.matWidth);
  document.getElementById("price").innerText = `€ ${artwork.price.toFixed(2)}`;
  let size = frameFunc.getPrintSizes(document.getElementById("preview-image"));
  let totalsize = [0, 0];
  if (artwork.printSize === "S") 
  if (artwork.printSize === "M") { totalsize[0] = size.M[0]; totalsize[1] = size.M[1]; }
  if (artwork.printSize === "L") 
  totalsize[0] = (totalsize[0] / 10) + parseFloat(artwork.frameWidth) + parseFloat(artwork.matWidth);
  totalsize[1] = (totalsize[1] / 10) + parseFloat(artwork.frameWidth) + parseFloat(artwork.matWidth);
  artwork.totalsize = totalsize;
  document.getElementById("total-size").innerHTML = (totalsize[0]).toFixed(2) + " &times; " + (totalsize[1]).toFixed(2);
}

form.addEventListener('submit', )
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    switch (frameStyle) {
        
        case "natural":
            price += frameWidth * 0.8;
            break;
        
        case "elegant":
            price += frameWidth * 0.85;
            break;
    }
    price += matWidth * 0.05;
    if (printSize.toString() === "M") {
        price *= 2;
    } else if (printSize.toString() === "L") 
    price = Math.round(price * 100) / 100;
    return price;
}


        const highlights = [39799, 459055, 437853, 435809, 436535, 360018, 634108, 459080, 435882, 271890, 459054, 436105];
        const gallery = document.getElementById('gallery');
        const form = document.querySelector('.search-form');
        const searchText = document.getElementById('search-info');

        class Picture {
            
        }


        window.onload = () => { updateHeader(); };

        document.addEventListener('DOMContentLoaded', event => {
            const params = (new URL(document.location)).searchParams;
            const Query = params.get('q');
            console.log("Query is:" + Query);
            if (!Query) 
            searchText.innerText = "Searching for “" + Query + "”...";
            console.log("working from params");
            const result = foundationSearch(Query);
            result.then(function (res2) {
                console.log(res2);
                console.log(res2.objectIDs)
                buildSite(res2, Query);
            });
        });

        form.addEventListener('submit', );

        function foundationSearch(term) {
            console.log(term);
            const result = pictureSearch(term);
            result.then(function (res2) {
                console.log(res2);
            });
            return result;
        }

        

        

        

        async function cachedRetrieveById(object) {
            const cache = localStorage.getItem(object);
            if (cache) {
                console.log("Loading Cached entry: " + object);
                return JSON.parse(cache);
            }}

        function buildSite(elements, term) {
            console.log(elements);
            var count = 100;
            if (elements.total < 100) {
                count = elements.total;
            }
            console.log("Count is: " + count);
            if (count == 1)  else {
                searchText.innerText = "Found " + count + " artworks for “" + term + "”";
            }
            for (var i = 0; i < count; i++) {
                const result = cachedRetrieveById(elements.objectIDs[i]);
                result.then(function (res2) {
                    gallery.appendChild(createPictureNode(res2));
                });
            }
        }

        

        async function pictureSearch(searchTerm) {
            console.log("picturesearch in progress. term: " + searchTerm);
            const results = await getIdByTerm(searchTerm);
            return results;
        }

        async function getIdByTerm(term) {
            const response = await fetch('https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=' + term);
            const rawData = await response.json();
            return rawData;
        }

        function createPictureNode(picture) {
            var objectID = "object-" + picture.objectID;
            var imageID = "object-image-" + picture.objectID;
            var imageURL = "./config.html?objectID=" + picture.objectID;
            const div = document.createElement('div')
            div.innerHTML +=
                `<a href="${imageURL}" id="${objectID}">
          <img src="${picture.primaryImageSmall}" alt="${picture.title}" id="${imageID}">
          <div class="museum-label">
            <span class="artist">${picture.artistDisplayName}</span>
            <span class="title">${picture.title}</span>,
            <span class="date">${picture.objectDate}</span>
          </div>
        </a>`;
            return div;
        }

        

        

        

        

        

        function updateHeader() {
            let cartsize = JSON.parse(localStorage.getItem('cart')).length;
            if (cartsize) 
        }

        
    