export function get(key) {
    return localStorage.getItem(key)  : null
}

export async function set(key, callback) {
    return localStorage.setItem(key, JSON.stringify(await callback()))
}

export 
export const baseUrlMetropolitan = 'https://collectionapi.metmuseum.org/public/collection/v1/'
export const baseUrlArtmart = 'https://web-engineering.big.tuwien.ac.at/s20/a2/'
export const apiResultLimit = 100import { RequestService } from './RequestService.js'
import { baseUrlMetropolitan } from './environment.js'
import { QueryString, QueryParam } from './Query.js'

export class MetropolitanService {

    async search(q, hasImages = true, shouldCache) {
        const rs = new RequestService(baseUrlMetropolitan, shouldCache)
        const qp = new QueryString([
            new QueryParam('q', q),
            new QueryParam('hasImages', hasImages)
        ])
        return rs.get(`search${qp}`)
    }

    async object(id, shouldCache) {
        const rs = new RequestService(baseUrlMetropolitan, shouldCache)
        return rs.get(`objects/${id}`)
    }

}
export class QueryString {
    constructor(queryParams) {
        this.queryParams = queryParams
    }

    toString() {
        let params = new URLSearchParams()
        this.queryParams.map(v => params.append(v.name, v.value))
        return '?' + params.toString()
    }

    static 
}

export class QueryParam {
    constructor(name, value) {
        this.name = name;
        this.value = value;
    }
}
import * as CacheService from './CacheService.js';
export class RequestService {

    constructor(baseUrl, shouldCache = false) {
        this.baseUrl = baseUrl
        this.shouldCache = shouldCache;
    }

    async get(path) {
        let resp = null;
        const cachedResponse = CacheService.get(`cachedResponse-${path}`);

        if (cachedResponse ) 
        else {
            resp = await (await fetch(this.baseUrl + path, { method: 'GET' })).json()
            CacheService.set(`cachedResponse-${path}`, _ => resp);
        }
        return await resp
    }
}
import { MetropolitanService } from './MetropolitanService.js'
import { apiResultLimit } from './environment.js'
import { RequestService } from './RequestService.js'
import * as CacheService from './CacheService.js'

const form = document.getElementById('search-form')
const gallery = document.getElementById('gallery')
const searchInfo = document.getElementById('search-info')
const searchBox = document.getElementById('search')

const urlParams = new URLSearchParams(window.location.search)

const metropolitanService = new MetropolitanService()
const rs = new RequestService('')

const searchParams = new URLSearchParams(window.location.search)
searchBox.value = searchParams.get('q')

const cartLabelElement = document.getElementById('cart-link')
const cart = CacheService.get('cart')
cartLabelElement.innerHTML = `Cart ${cart  : ''}`

const loadElementsFromHighlights = 

const search = async (q) => {
    if (q === '') 
    if(q.includes('+'))
        

    console.log(q)

    console.log('Loading elements from api')

    searchInfo.textContent = `Searching for “${q}”...`

    try {
        const objectIds = (await metropolitanService.search(q, true, true))
        let ids = [];

        if (objectIds.objectIDs)
            ids = objectIds.objectIDs.slice(0, apiResultLimit)

        for (const item of ids)
            createGalleryItems(item)

        searchInfo.textContent = `Found ${objectIds.total} ${objectIds.total !== 1 ? 'artworks' } for “${q}”`

    } 
}

if (urlParams.has('q'))
    search(urlParams.get('q'))


form.addEventListener('submit', )

const createGalleryItems = (id) => {
    CacheService.set(id, async () => {
        const obj = await metropolitanService.object(id, true)
        gallery.innerHTML = gallery.innerHTML + createGalleryItem(obj)
        return obj
    })
}

const createGalleryItem = ({ objectID, primaryImageSmall, artistDisplayName, title, objectDate }) => {
    return `
        <div class="thumb">
            <a href="config.html?objectID=${objectID}" id="object-${objectID}">
            <img src="${primaryImageSmall}" alt="${artistDisplayName}" id="${objectID}">
                <div class="museum-label">
                    <span class="artist">${artistDisplayName}</span>
                    <span class="title">${title}</span>,
                    <span class="date">${objectDate}</span>
                </div>
            </a>
      </div>`
}
