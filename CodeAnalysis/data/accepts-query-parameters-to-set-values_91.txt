const CACHE_PREFIX = 'artworkCache_'

export function retrieve(id) {
    if(localStorage.getItem(CACHE_PREFIX + id)) 
}

export function store(id, artwork) {
    localStorage.setItem(CACHE_PREFIX + id, JSON.stringify(artwork));
}
export class Artwork {
    constructor(title, artist, date, image) {
        this.title = title;
        this.artist = artist;
        this.date = date;
        this.image = image;
    }
}window.addEventListener('load', () => {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    document.getElementById('cart-link').innerHTML = `Cart (${cart.length})`;
});
import * as artworkCache from './artwork-cache.js';
import * as frameUtil from './frame.js';
import { Artwork } from './artwork.js';

let queryString = window.location.search;
let queries = {
    objectID: null,
    printSize: null,
    frameStyle: null,
    frameWidth: null,
    matColor: null,
    matWidth: null
};
for (const [key, value] of new URLSearchParams(queryString)) {
    queries = { ...queries, [key]: value };
}

if (!queries.objectID) 


window.addEventListener('load', () => {
    document.getElementById("config-form").addEventListener("submit", addToCart);

    if (queries.printSize) {
        document.querySelectorAll('input[name="printSize"]').forEach(element => {
            element.checked = element.getAttribute('value') == queries.printSize;
        });
    }
    if (queries.frameStyle) {
        document.querySelectorAll('input[name="frameStyle"]').forEach(element => {
            element.checked = element.getAttribute('value') == queries.frameStyle;
        });
    }
    if (queries.frameWidth) {
        changeRangeValues(document.querySelector('input[name="frameWidth"]'), (parseFloat(queries.frameWidth)/10).toFixed(1));
    }
    if (queries.matColor) {
        document.querySelectorAll('input[name="matColor"]').forEach(element => {
            element.checked = element.getAttribute('value') == queries.matColor;
        });
    }
    if (queries.matWidth) {
        changeRangeValues(document.querySelector('input[name="matWidth"]'), (parseFloat(queries.matWidth)/10).toFixed(1));
    }

    let artwork = artworkCache.retrieve(queries.objectID);
    if (artwork)  else {
        fetch('https://collectionapi.metmuseum.org/public/collection/v1/objects/' + queries.objectID)
            .then((res) => {
                if (!res.ok) 
                return res.json();
            })
            .then((data) => {
                let artwork = new Artwork(data.title, data.artistDisplayName, data.objectDate, data.primaryImageSmall);
                insertImageData(artwork);
                artworkCache.store(queries.objectID, artwork);
                update();
            })
            .catch();
    }

    document.querySelectorAll('input[type=range], input[type=number]').forEach(element => {
        let event = element.getAttribute('type') === 'range' ? 'input' : 'change';
        element.addEventListener(event, );
    });

    document.querySelectorAll('input').forEach((element) => {
        element.addEventListener('change', update);
    });
});

const changeRangeValues = (element, val) => {
    let mirrorElement = document.querySelector(`input[name=${element.dataset.mirror}]`);
    let min, max;
    if (element.getAttribute('name').includes('frameWidth')) {
        min = 2;
        max = 5;
    } else {
        min = 0;
        max = 10;
    }
    element.value = Math.min(Math.max(min, val), max).toFixed(1);
    if (element.value % 1 == 0) element.value = Math.trunc(element.value);
    mirrorElement.value = Math.min(Math.max(min, val), max).toFixed(1);
    if (mirrorElement.value % 1 == 0) mirrorElement.value = Math.trunc(mirrorElement.value);
}

const insertImageData = (artwork) => {
    document.getElementById('preview-image').setAttribute('src', artwork.image);
    document.getElementById('image-label').innerHTML = `<span class="artist">${artwork.artist}</span>
<span class="title">${artwork.title}</span>,
<span class="date">${artwork.date}</span>`;
}

const update = () => {
    let img = document.getElementById('preview-image');
    let container = document.getElementById('preview-container');
    let printSize = document.querySelector('input[name="printSize"]:checked').value;
    let frameStyle = document.querySelector('input[name="frameStyle"]:checked').value;
    let frameWidth = document.querySelector('input[name="frameWidth"]').value;
    let matColor = document.querySelector('input[name="matColor"]:checked').value;
    let matWidth = document.querySelector('input[name="matWidth"]').value;

    let ps = frameUtil.getPrintSizes(img);

    document.getElementById('print-size-s-label').innerHTML = `Small<br>${ps.S[0]} × ${ps.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${ps.M[0]} × ${ps.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${ps.L[0]} × ${ps.L[1]} cm`;

    document.getElementById('price').innerHTML = `€ ${frameUtil.calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2)}`;

    let totalHeight = ps[printSize][0] + (2 * parseFloat(frameWidth)) + (2 * parseFloat(matWidth));
    let totalWidth = ps[printSize][1] + (2 * parseFloat(frameWidth)) + (2 * parseFloat(matWidth));
    document.getElementById('total-size').innerHTML = `${totalHeight} × ${totalWidth} cm`;

    frameUtil.render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth);
}


export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;
    let frameCostPerCm = 0;
    let matCostPerCm = 0.05;

    switch (frameStyle) {
        
        
        case 'shabby': frameCostPerCm = 0.9; break;
        
        
    }

    price += (frameCostPerCm * frameWidth) + (matCostPerCm * matWidth);

    switch (printSize) {
        case 'M': price *= 2; break;
        
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}