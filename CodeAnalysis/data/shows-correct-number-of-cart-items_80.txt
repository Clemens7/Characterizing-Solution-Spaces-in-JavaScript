import { Artwork } from './artwork.js';
import { retrieveArtwork, storeArtwork } from './cache.js';

const baseUrl = 'https://collectionapi.metmuseum.org/public/collection/v1';
const searchEndpoint = baseUrl + '/search';
const objectsEndpoint = baseUrl + '/objects';

export 

export 

export export class Artwork {


    

}import {Artwork} from "./artwork.js";
import {Cart} from "./cart.js";



export 

export 

function getCartStorageKey() {
    return "cart";
}

export function retrieveCart() {
    let key = getCartStorageKey();
    if (key in localStorage) {
        let cart = new Cart(JSON.parse(localStorage[key]));
        console.log(`Stored cart has ${cart.items.length} items`);
        return cart;
    }
}

export 

export class CartItem {

    

}import * as Cache from "./cache.js";
import * as Util from "./util.js";
import * as Frame from "./frame.js";
import {Cart} from "./cart.js";
import * as Api from "./api.js";

async function loadData() {
    cartSection.innerText = '';

    if(Cache.retrieveCart().getItemCount() === 0) {
        const cartItemDiv = document.createElement('div');
        cartItemDiv.classList.add('cart-item');
        const emptyCartSpan = document.createElement('span');
        emptyCartSpan.innerText = 'There are no items in your shopping cart.';
        cartItemDiv.appendChild(emptyCartSpan);
        cartSection.appendChild(cartItemDiv);
    }
    addCheckoutSection();
}









function addCheckoutSection() {
    const cartTotalDiv = document.createElement('div');
    cartTotalDiv.classList.add('cart-total');

    const priceDiv = document.createElement('div');
    priceDiv.classList.add('price');
    priceDiv.innerText = 'Total: € ';
    const priceTotalSpan = document.createElement('span');
    priceTotalSpan.id = 'price-total';
    priceTotalSpan.innerText = Util.formatPrice(Cache.retrieveCart().getTotalPrice());
    priceDiv.appendChild(priceTotalSpan);

    const checkoutButton = document.createElement('button');
    checkoutButton.type = 'button';
    checkoutButton.id = 'checkout-button';
    checkoutButton.innerText = 'Checkout';
    checkoutButton.disabled = Cache.retrieveCart().getItemCount() === 0;
    checkoutButton.addEventListener('click', );

    cartTotalDiv.appendChild(priceDiv);
    cartTotalDiv.appendChild(checkoutButton);

    cartSection.appendChild(cartTotalDiv);
}

const cartSection = document.getElementById('cart');

loadData();
import * as Cache from './cache.js';
import {calculatePrice} from './frame.js';

export class Cart {

    constructor(items) {
        this.items = items;
    }

    isEmpty() {
        return this.getItemCount() === 0;
    }

    getItemCount(){
        if(this.items === undefined)
            
        return this.items.length;
    }

    

    getTotalPrice() {
        let total = 0;
        this.items.map();
        return total;
    }
}import * as Frame from "./frame.js";
import * as Util from "./util.js";
import * as Cache from "./cache.js";
import { Artwork } from "./artwork.js";
import { CartItem } from "./cart-item.js";
import { resolveArtwork } from "./api.js";





function link(idSlider, idTextInput, range) {
    const slider = document.getElementById(idSlider);
    const textInput = document.getElementById(idTextInput);
    slider.addEventListener('input', )
    textInput.addEventListener('change', )
}





async function getArtworkData(objectId) {
    const artwork = await resolveArtwork(objectId);
    handleArtworkData(artwork);
}

function getConfigurationData() {
    const data = {};
    data.printSize = document.querySelector('input[name="printSize"]:checked').value;
    data.frameStyle = document.querySelector('input[name="frameStyle"]:checked').value;
    data.frameWidth = parseFloat(document.getElementById('frame-width-text').value) * 10;
    data.matColor = document.querySelector('input[name="matColor"]:checked').value;
    data.matWidth = parseFloat(document.getElementById('mat-width-text').value) * 10;
    console.log(data)
    return data;
}
function showSizes(sizes, data) {
    for (let v of [['s', 'S', 'Small'], ['m', 'M', 'Medium'], ['l', 'L', 'Large']]) {
        const vHtml = document.getElementById(`print-size-${v[0]}-label`);
        vHtml.innerHTML = `${v[2]}<br>${sizes[v[1]][0]/10} × ${sizes[v[1]][1]/10} cm`;
    }
    const totalHtml = document.getElementById('total-size');
    const total = [sizes[data.printSize][0] + 2*data.matWidth + 2*data.frameWidth, sizes[data.printSize][1] + 2*data.matWidth + 2*data.frameWidth];
    totalHtml.innerHTML = `${total[0] / 10} × ${total[1] / 10}`
}
function renderPreview(img) {
    const imgContainer = document.getElementById('preview-container');
    const htmlImg = document.getElementById('preview-image');
    console.log(htmlImg);
    const configurationData = getConfigurationData();
    Frame.render(img, htmlImg, imgContainer, configurationData.printSize,
        configurationData.frameStyle, configurationData.frameWidth,
        configurationData.matColor, configurationData.matWidth)
    document.getElementById('price').innerHTML = "€ " + Frame.calculatePrice(configurationData.printSize, configurationData.frameStyle, configurationData.frameWidth, configurationData.matWidth).toFixed(2);
    const sizes = Frame.getPrintSizes(img);
    showSizes(sizes, configurationData)
}

function setLabel(data) {
    const label = document.getElementById('image-label');
    label.innerHTML = `${data.artist} ${data.title} ${data.date}`
}

function handleArtworkData(data) {
    console.log(data)
    if (data.image) {
        const img = new Image();
        img.onload = () => {
            document.getElementById('preview-image').src = img.src;
            imgObj = img;
            renderPreview(imgObj);
        }
        img.src = data.image
        setLabel(data);
    }
}



function presetValues(urlParams) {
    if (urlParams.get('printSize')) 
    if (urlParams.get('frameStyle')) 
    if (urlParams.get('frameWidth')) 
    if (urlParams.get('matColor')) 
    if (urlParams.get('matWidth')) 
}



function addRerenderOnChange() {
    const radios = document.querySelectorAll('input[type="radio"]')
    for (let radio of radios) {
        radio.addEventListener('click', )
    }
}

const urlParams = new URLSearchParams(window.location.search);
const objectId = urlParams.get('objectID');
let imgObj;
presetValues(urlParams)
if (!objectId)  else {
    getArtworkData(objectId)
}
addRerenderOnChange()
link("frame-width-slider", "frame-width-text", [2, 5])
link("mat-width-slider", "mat-width-text", [0, 10])
document.querySelector('#config-form').addEventListener('submit', )
export 

export 

export import { retrieveCart } from './cache.js';

document.addEventListener("DOMContentLoaded",() => {
    const cart = retrieveCart();
    if(!cart.isEmpty())
});import { search, resolveArtworks } from "./api.js";

async function retrieveArtworks(query) {
    if(query == null ) {
        const toResolve = await highlights();
        return { 'total': toResolve.length, 'artworks': await resolveArtworks(toResolve) };
    }}

async function highlights() {
    const url = 'highlights.json';
    const response = await fetch(url);
    const data = await response.json();
    return data.highlights;
}

async function setHeadingDuringSearch(query) {
    if(query != null ) 
}

async function populateGallery(query) {
    const artworks = await retrieveArtworks(query);
    if(query != null ) 

    const content = artworks.artworks.map(
        (obj, index) => `
        <div class="thumb">
            <a href="config.html?objectID=${encodeURI(obj.objectID)}" id="object-${index}">
                <img src="${obj.image}" alt="Image of ${obj.title}" id="object-image-${index}">
                <div class="museum-label">
                    <span class="artist">${obj.artist}</span>
                    <span class="title">${obj.title}</span>,
                    <span class="date">${obj.date}</span>
                </div>
            </a>
        </div>`
    ).join('');
    document.getElementById('gallery').innerHTML = content;
}

document.addEventListener("DOMContentLoaded",() => {
    const params = (new URL(document.location)).searchParams;
    const query = params.get('q');
    setHeadingDuringSearch(query);
    populateGallery(query);
});export 

export function formatPrice(cost) {
    return (cost / 100).toFixed(2);
}