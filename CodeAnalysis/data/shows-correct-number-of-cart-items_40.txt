export function get(key) {
    return localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) 
}

export 

export 
import * as CacheService from './CacheService.js'
import { MetropolitanService } from "./MetropolitanService.js";
import { render } from "./frame.js";
import { Image } from "./Image.js";
import { calculatePrice } from "./frame.js";

const metropolitanService = new MetropolitanService()
const cartLabelElement = document.getElementById('cart-link')
const cart = CacheService.get('cart')
cartLabelElement.innerHTML = `Cart ${cart ? `(` + cart.length + `)` }`

const shoppingCart = document.getElementById('cart')
const checkoutButton = document.getElementById('checkout-button')
const cartItems = document.getElementById('cart')

let deleteItemButton = document.getElementsByClassName('cart-remove')

let price_total = 0

async function loadCartElements() {
    console.log('Loading elements from cache')
    cartItems.innerHTML = ''

    for (let i = cart.length - 1; i >= 0; i--) 


    let imageElement = document.getElementsByClassName('cart-thumb');
    let inc = 0

    for (let i = cart.length - 1; i >= 0; i--) 



    cartItems.innerHTML = cartItems.innerHTML +
        `<div class="cart-total">
                    <div class="price">Total: € <span id="price-total">0</span></div>
                    <button type="button" id="checkout-button">Checkout</button>
                </div>`

    const price = document.getElementById('price-total')

    price_total = Math.round((price_total + Number.EPSILON) * 100) / 100
    price.innerHTML = `${price_total}`


    for (let i = 0; i < deleteItemButton.length; i++) }














if (cart == null)  else {
    loadCartElements()
}
import { MetropolitanService } from "./MetropolitanService.js";
import { QueryString } from "./Query.js";
import { Image } from "./Image.js";
import { PrintSize, PrintSizes } from "./PrintSize.js";
import { calculatePrice } from "./frame.js";
import * as CacheService from "./CacheService.js"

let printSizeControls = document.querySelectorAll(".segmented input[type=radio][name=printSize]");
let frameStyleControls = document.querySelectorAll(".frame-style-row input[type=radio]");
let matColorControls = document.querySelectorAll(".mat-color-row input[type=radio]");
let addToCartButton = document.querySelector(".buy");
let cartLabeElement = document.querySelector("#cart-link")

let printSize = document.querySelector(".segmented input[type=radio][name=printSize]:checked");
let frameStyle = document.querySelector(".frame-style-row input[type=radio]:checked");
let frameWidth = document.querySelector(".config-row input[type=number][name=frameWidth]");
let frameWidthR = document.querySelector("fieldset input[type=range][name=frameWidthR]");
let matColor = document.querySelector(".mat-color-row input[type=radio]:checked");
let matWidth = document.querySelector(".config-row input[type=number][name=matWidth]");
let matWidthR = document.querySelector("fieldset input[type=range][name=matWidthR]");

let imageElement = document.querySelector('#preview-image');
const artist = document.querySelector('#label-author');
const description = document.querySelector('#label-description');

let image = null;
let printSizeSmall = new PrintSize(PrintSizes.SMALL, 0, 0);
let printSizeMedium = new PrintSize(PrintSizes.MEDIUM, 0, 0);
let printSizeLarge = new PrintSize(PrintSizes.LARGE, 0, 0);

let id = null;
let cart = CacheService.get("cart");

printSizeSmall.calculate(imageElement);
printSizeMedium.calculate(imageElement);
printSizeLarge.calculate(imageElement);


(async () => {
    id = QueryString.getParamFromUrl(document.location.search, "objectID");
    const printSizeParam = QueryString.getParamFromUrl(document.location.search, "printSize");
    const frameStyleParam = QueryString.getParamFromUrl(document.location.search, "frameStyle");
    const frameWidthParam = QueryString.getParamFromUrl(document.location.search, "frameWidth");
    const matColorParam = QueryString.getParamFromUrl(document.location.search, "matColor");
    const matWidthParam = QueryString.getParamFromUrl(document.location.search, "matWidth");

    printSize.value = printSizeParam  : printSize.value;
    frameStyle.value = frameStyleParam  : frameStyle.value;
    frameWidth.value = frameWidthParam  : frameWidth.value;
    matColor.value = matColorParam  : matColor.value;
    matWidth.value = matWidthParam  : matWidth.value;

    if (!id) 
    const metropolitanService = new MetropolitanService;
    const object = await metropolitanService.object(id, true);
    if (object.message === "ObjectID not found") 
    artist.innerText = object.artistDisplayName;
    description.innerHTML = `${object.title}, ca. ${object.objectDate}`;
    imageElement.setAttribute("src", object.primaryImageSmall);

    cartLabeElement.innerHTML = cart ? `Cart (${cart.length})` 
})();

imageElement.addEventListener('load', _ => {
    image = new Image(imageElement, printSize.value, frameStyle.value, frameWidth.value, matColor.value, matWidth.value);
    image.renderImage();
    calculateTotalSize()
    calculateTotalPrice()
})

frameWidth.addEventListener('change', );

frameWidthR.addEventListener('change', );

matWidth.addEventListener('change', );

matWidthR.addEventListener('change', );

addToCartButton.addEventListener('click', )

addCallBackToControls(printSizeControls, 'change', );
addCallBackToControls(frameStyleControls, 'change', );
addCallBackToControls(matColorControls, 'change', );

function addCallBackToControls(controls, event, callback) {
    for (let control of controls) {
        control.addEventListener(event, callback)
    }
}

function calculateTotalSize() {
    const x = document.querySelector(`.config-row div[id=total-size] span[id=size-total-x]`);
    const y = document.querySelector(`.config-row div[id=total-size] span[id=size-total-y]`);
    const size = [printSizeSmall, printSizeMedium, printSizeLarge].find(printSize => printSize.element.checked);
    x.innerHTML = size.x + (matWidth.value * 2) + (frameWidth.value * 2);
    y.innerHTML = size.y + (matWidth.value * 2) + (frameWidth.value * 2);
}

function calculateTotalPrice() {
    const price = document.querySelector('#price');
    const size = [printSizeSmall, printSizeMedium, printSizeLarge].find(printSize => printSize.element.checked);
    price.innerHTML = `€ ${calculatePrice(size.size, image.frameStyle, image.frameWidth, image.matWidth).toFixed(2)}`;
}







export const baseUrlMetropolitan = 'https://collectionapi.metmuseum.org/public/collection/v1/'
export const baseUrlArtmart = 'https://web-engineering.big.tuwien.ac.at/s20/a2/'
export const apiResultLimit = 100import { PrintSizes } from "./PrintSize.js";

export 

export 

export 
import { getPrintSizes, render } from "./frame.js";

export class Image {
    

    

    

    

    

    

    

    

    

    

    

    

    

    
}import { RequestService } from './RequestService.js'
import { baseUrlMetropolitan } from './environment.js'
import { QueryString, QueryParam } from './Query.js'

export class MetropolitanService {

    

    

}
import { getPrintSizes } from "./frame.js";

export class PrintSize {
    

    

    

    

    

    

    

    

    

    
}

export const PrintSizes = Object.freeze({
    SMALL: 'S',
    MEDIUM: 'M',
    LARGE: 'L'
});export class QueryString {
    

    

    static 
}

export class QueryParam {
    
}
import * as CacheService from './CacheService.js';
export class RequestService {

    

    
}
import { MetropolitanService } from './MetropolitanService.js'
import { apiResultLimit } from './environment.js'
import { RequestService } from './RequestService.js'
import * as CacheService from './CacheService.js'

const form = document.getElementById('search-form')
const gallery = document.getElementById('gallery')
const searchInfo = document.getElementById('search-info')
const searchBox = document.getElementById('search')

const urlParams = new URLSearchParams(window.location.search)

const metropolitanService = new MetropolitanService()
const rs = new RequestService('')

const searchParams = new URLSearchParams(window.location.search)
searchBox.value = searchParams.get('q')

const cartLabelElement = document.getElementById('cart-link')
const cart = CacheService.get('cart')
cartLabelElement.innerHTML = `Cart ${cart ? `(` + cart.length + `)` }`

const loadElementsFromHighlights = () => {
    console.log('Loading elements from highlights')
    rs.get('highlights.json').then(values => {
        gallery.innerHTML = ''
        for (const item of values.highlights) {
            createGalleryItems(item)
        }
    })
}

const search = 

if (urlParams.has('q'))
    
else
    loadElementsFromHighlights()


form.addEventListener('submit', )

const createGalleryItems = (id) => {
    CacheService.set(id, async () => {
        const obj = await metropolitanService.object(id, true)
        gallery.innerHTML = gallery.innerHTML + createGalleryItem(obj)
        return obj
    })
}

const createGalleryItem = ({ objectID, primaryImageSmall, artistDisplayName, title, objectDate }) => {
    return `
        <div class="thumb">
            <a href="config.html?objectID=${objectID}" id="object-${objectID}">
            <img src="${primaryImageSmall}" alt="${artistDisplayName}" id="${objectID}">
                <div class="museum-label">
                    <span class="artist">${artistDisplayName}</span>
                    <span class="title">${title}</span>,
                    <span class="date">${objectDate}</span>
                </div>
            </a>
      </div>`
}
