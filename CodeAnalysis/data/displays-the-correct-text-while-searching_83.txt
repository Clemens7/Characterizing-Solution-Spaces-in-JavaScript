function setAttributes(element, attributes) {
    for (let key in attributes) {
        if (typeof (attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

function setClasses(element, classes) {
    for (let classEntry of classes) {
        element.classList.add(classEntry);
    }
    return element;
}

export function text(tag, text, attr = {}, classes = []) {
    const element = document.createElement(tag);
    element.innerText = text;
    return setAttributes(setClasses(element, classes), attr);
}

export function container(elements, tag, attr = {}, classes = []) {
    const container = document.createElement(tag);
    for (let element of elements) {
        container.appendChild(element);
    }
    return setAttributes(setClasses(container, classes), attr);;
}

export function element(tag, attr = {}, classes = []) {
    const element = document.createElement(tag);
    return setAttributes(setClasses(element, classes), attr);
}
function updateHeader(){
    const cartLink = document.querySelector("a#cart-link");

    let items = localStorage.getItem("cart");
    if(items === null){
        items = [];
    }

    cartLink.textContent = "Cart (" + items.length +")";
}

updateHeader();
const SEARCH_RESULT_KEY = "searchResult/";
const SEARCH_OBJECT_KEY = "searchObject/";

export function saveObjectWithId(id, searchResult) {
    localStorage.setItem(SEARCH_OBJECT_KEY + id, JSON.stringify(searchResult));
}

export function getObjectWithId(id) {
    const localStoreItem = localStorage.getItem(SEARCH_OBJECT_KEY + id);
    if (localStoreItem !== null)  else {
        return null;
    }
}

export function saveSearchResult(searchQuery, result) {
    localStorage.setItem(SEARCH_RESULT_KEY + searchQuery, JSON.stringify(result));
}

export function getSearchResult(searchQuery) {
    const localStoreItem = localStorage.getItem(SEARCH_RESULT_KEY + searchQuery);
    if (localStoreItem !== null)  else {
        return null;
    }
}
import * as DomHelper from "../domHelpers.js";

export function loadElements(container, searchObjects) {
    container.innerHTML = "";
    for (let searchObject of searchObjects) {
        container.appendChild(
            DomHelper.container([
                    DomHelper.container(
                        [
                            DomHelper.element(
                                "img",
                                {
                                    src: searchObject.primaryImage,
                                    alt: searchObject.title,
                                    id: `object-image-${searchObject.objectId}`
                                }
                            ),
                            DomHelper.container(
                                [
                                    DomHelper.text(
                                        "span",
                                        searchObject.artistDisplayName,
                                        {},
                                        ["artist"]
                                    ),
                                    DomHelper.text(
                                        "span",
                                        `${searchObject.title}, `,
                                        {},
                                        ["title"]
                                    ),
                                    DomHelper.text(
                                        "span",
                                        searchObject.objectDate,
                                        {},
                                        ["date"]
                                    )
                                ],
                                "div",
                                {},
                                ["museum-label"]
                            )
                        ],
                        "a",
                        {
                            id: `object-${searchObject.objectId}`,
                            href: searchObject.getConfigureHref()
                        }
                    )
                ],
                "div",
                {},
                ["thumb"]
            )
        );
    }
}
export class SearchObject {
    constructor(objectId, primaryImage, title, artistDisplayName, objectDate) {
        this.objectId = objectId;
        this.primaryImage = primaryImage;
        this.title = title;
        this.artistDisplayName = artistDisplayName;
        this.objectDate = objectDate;
    }

    getConfigureHref() {
        return `/config.html?objectID=${this.objectId}`
    }
}

export function parseSearchObject(rawData) {
    return new SearchObject(rawData.objectID, rawData.primaryImageSmall, rawData.title, rawData.artistDisplayName, rawData.objectDate);
}
const MAX_RESULTS = 100;
const API_URL = "https://collectionapi.metmuseum.org/";
const SEARCH_ENDPOINT = "public/collection/v1/search";
const OBJECT_ENDPOINT = "public/collection/v1/objects/";

export async function getObjectIds(searchQuery) {
    try {
        const searchRequestUrl = new URL(SEARCH_ENDPOINT, API_URL);
        searchRequestUrl.searchParams.set("hasImages", "true");
        searchRequestUrl.searchParams.set("q", searchQuery);

        const searchResponse = await fetch(searchRequestUrl.toString());
        let searchObjectIds = (await searchResponse.json()).objectIDs;
        if (!searchObjectIds) 
        if (searchObjectIds.length > MAX_RESULTS) 
        return searchObjectIds;
    }}

export async function getObject(objectId) {
    try {
        const objectRequestUrl = new URL(OBJECT_ENDPOINT + objectId, API_URL);
        const objectResponse = await fetch(objectRequestUrl.toString());
        return await objectResponse.json();
    }}
import * as Remote from "./searchRemote.js";
import * as Cache from "./seachCache.js"
import {parseSearchObject} from "./searchObject.js";

export async function loadWithQuery(searchQuery) {
    return await fillCacheAndRemoteSearch(searchQuery);
}

export 

async function fillCacheAndRemoteSearch(searchQuery) {
    console.log("Loading search from cache and remote.");
    let finalObjects;

    const localResult = Cache.getSearchResult(searchQuery);
    if (localResult === null) {
        const remoteIds = await Remote.getObjectIds(searchQuery);
        Cache.saveSearchResult(searchQuery, remoteIds);
        finalObjects = fillCacheAndRemoteIds(remoteIds);
    }

    return finalObjects;
}

async function fillCacheAndRemoteIds(objectIds) {
    return await Promise.all(
        objectIds
            .map(async (objectId) => {
                let finalObj;

                const localResult = Cache.getObjectWithId(objectId);
                if (localResult === null) {
                    const remoteObject = await Remote.getObject(objectId);
                    Cache.saveObjectWithId(objectId, remoteObject);
                    finalObj = parseSearchObject(remoteObject)
                }

                return finalObj;
            })
    );
}


import * as Dom from "./searchDom.js"
import * as Repo from "./searchRepo.js";

const container = document.getElementById("gallery");

document.addEventListener("DOMContentLoaded", evt => {
    const urlSearchParams = new URL(document.location).searchParams;
    let currentSearchQuery = "";
    if (urlSearchParams.has("q")) {
        currentSearchQuery = urlSearchParams.get("q");
    }

    const searchInput = document.getElementById("search");
    searchInput.value = currentSearchQuery;

    executeSearch(currentSearchQuery).then()
});

document.getElementById("search-form").addEventListener("submit", );

async function executeSearch(searchQuery) {
    if (searchQuery === "") 

    console.log(`Staring search with query: ${searchQuery}.`);
    setIndicator(`Searching for “${searchQuery}”...`);

    const searchResult = await Repo.loadWithQuery(searchQuery);
    setIndicator(`Found ${searchResult.length + ((searchResult.length === 1)  : " artworks")} for “${searchQuery}”`);
    Dom.loadElements(container, searchResult);
}

function setIndicator(indicator) {
    const searchInfo = document.getElementById("search-info");
    searchInfo.innerText = indicator;
}
