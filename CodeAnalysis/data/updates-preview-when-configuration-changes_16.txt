import { cache } from "./cache.js";

class ArtService {

    constructor() {
        this.museumUrl = "https://collectionapi.metmuseum.org/public/collection/v1";
        this.shippingUrl = "https://web-engineering.big.tuwien.ac.at/s20/a2";
    }

    getShipping = 

    getArtObject = async function (objectID) {
        const endpoint = "/objects/" + objectID;

        const cached = cache.load(objectID);
        if (cached) 

        try {
            const response = await fetch(this.museumUrl + endpoint);
            const jsonData = await response.json();
            const artObject = new ArtObject(jsonData.objectID, jsonData.primaryImageSmall, jsonData.artistDisplayName, jsonData.title, jsonData.objectDate);
            cache.store(jsonData.objectID, artObject);
            return artObject;
        }}

    getArtObjectPromises = 
    
    getArtObjects = 

    search = 

    getHighlightObjectPromises = 

    getQueryParams = function (...params) {
        const searchParams = (new URL(document.location)).searchParams;
        let paramObject = {};
        for (let param of params) {
            const queryItem = searchParams.get(param);
            paramObject[param] = queryItem;
        }
        return paramObject;
    }

}

export class ShippingInfo {
    
}

export class ArtObject {
    constructor(objectID, imgUrl, artist, title, date) {
        this.objectID = objectID;
        this.imgUrl = imgUrl;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}

export const artService = new ArtService();class Cache {

    load = function (key) {
        if (key in localStorage) 
    }

    store = function (key, data) {
        localStorage[key] = JSON.stringify(data);
    }

    addToCart = 

    removeFromCart = 

    clearCart = 

    getCartItems = function () {
        const cart = this.load("cart");

        return cart  : [];
    }

    cartLength = 
}

export const cache = new Cache();import { artService } from "./artService.js";
import { cache } from "./cache.js";
import * as domHelper from "./dom-helper.js"
import * as frame from "./frame.js";


const frameWidth = document.getElementById("frameWidth");
const frameWidthR = document.getElementById("frameWidthR");
const matWidth = document.getElementById("matWidth");
const matWidthR = document.getElementById("matWidthR");
const frameStyleRadios = document.getElementsByName("frameStyle");
let selectedFrameStyle = "natural";
const matColorRadios = document.getElementsByName("matColor");
let selectedMatColor = "mint";
const printSizeRadios = document.getElementsByName("printSize");
let selectedPrintSize = "M";
const previewImage = document.getElementById("preview-image");
const previewContainer = document.getElementById("preview-container");
const previewImageLabel = document.getElementById("image-label");
 const price = document.getElementById("price");
 const totalSize = document.getElementById("total-size");
 const addToCartButton = document.getElementById("buy");


function addEventListeners(){
    frameWidth.addEventListener("change", function(){
        frameWidth.value = checkFrameSize(event.target.value);
        frameWidthR.value = event.target.value;
        renderImage();
    }, false)
    frameWidthR.addEventListener("input", , false)

    matWidth.addEventListener("change", function(event){
        matWidth.value = checkMatSize(event.target.value);
        matWidthR.value = event.target.value;
        renderImage();
    }, false)
    matWidthR.addEventListener("input", , false)


    frameStyleRadios.forEach(
        frameStyle => frameStyle.addEventListener("input", function(){
            selectedFrameStyle = frameStyle.value;
            renderImage();
        }, false)
    );

    matColorRadios.forEach(
        matColor => matColor.addEventListener("input", function(){
            selectedMatColor = matColor.value;
            renderImage();
        }, false)
    );

    printSizeRadios.forEach(
        printSize => printSize.addEventListener("input", function(){
            selectedPrintSize = printSize.value;
            renderImage();
        }, false)
    );

    previewImage.addEventListener("load", function(){
        setSizes(previewImage);
        renderImage();
    }, false);

    addToCartButton.addEventListener("click", )
} 


function checkFrameSize(size){
    const LOWER_BOUND = 2;
    const UPPER_BOUND = 5;

    if(size < LOWER_BOUND)
        
    else if(size > UPPER_BOUND)
        
        
    size = Math.round(size*10)/10;

    if(size%1 != 0)
        size = Number(size).toFixed(1);
    
    return size;
}

function checkMatSize(size){
    const LOWER_BOUND = 0;
    const UPPER_BOUND = 10;

    if(size < LOWER_BOUND)
        
    else if(size > UPPER_BOUND)
        

    size = Math.round(size*10)/10;

    if(size%1 != 0)
        size = Number(size).toFixed(1);

    return size;
}

function renderImage(){
   frame.render(previewImage, previewContainer, selectedPrintSize, selectedFrameStyle, frameWidth.value*10, selectedMatColor, matWidth.value*10)
   price.innerText = "€ " + frame.calculatePrice(selectedPrintSize, selectedFrameStyle, frameWidth.value*10, matWidth.value*10).toFixed(2);
   calculateTotalSize();
}

function calculateTotalSize(){
    const sizes = frame.getPrintSizes(previewImage);

    let totalWidth = 2 * frameWidth.value + 2 * matWidth.value;
    let totalHeight = 2 * frameWidth.value + 2 * matWidth.value;
    
    totalWidth +=  sizes[selectedPrintSize][0]/10;
    totalHeight +=  sizes[selectedPrintSize][1]/10;

    totalWidth = (Math.round((totalWidth + Number.EPSILON) * 100) / 100);
    totalHeight = (Math.round((totalHeight + Number.EPSILON) * 100) / 100);

    totalSize.innerHTML = totalWidth + " × " + totalHeight + " cm";
}

function setSizes(){
    const sizes = frame.getPrintSizes(previewImage);

    document.getElementById("print-size-s-label").innerHTML = "Small<br>" + sizes.S[0]/10 +" × " + sizes.S[1]/10 + " cm";
    document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + sizes.M[0]/10 +" × " + sizes.M[1]/10 + " cm";
    document.getElementById("print-size-l-label").innerHTML = "Large<br>" + sizes.L[0]/10 +" × " + sizes.L[1]/10 + " cm";
}

async function loadImage(objectID){
    const image = await artService.getArtObject(objectID);
    
    if(!image.objectID)
    

    domHelper.setAttributes(previewImage, {
        "src": image.imgUrl, 
        "title": image.title,
        "alt": image.title});
    previewImage.dataset.objectid = image.objectID;

    
    createImageDescription(image);
};

function createImageDescription(artObject){

    const artist = document.createElement('span');
    artist.setAttribute('class', 'artist');
    artist.innerText = artObject.artist;

    const title = document.createElement('span');
    title.setAttribute('class', 'title');
    title.innerText = artObject.title;

    const date = document.createElement('span');
    date.setAttribute('class', 'date');
    date.innerText = artObject.date;

    previewImageLabel.appendChild(artist);
    previewImageLabel.appendChild(title);
    previewImageLabel.append(' , ');
    previewImageLabel.appendChild(date);

};



function setQueryParams(){
    const params = artService.getQueryParams("objectID", "printSize", "frameWidth", "frameStyle", "matWidth", "matColor");


    for(let param in params){
        if(params[param])
            params[param] = params[param].toLowerCase() 
    }

    if(params.printSize)

    if(params.frameWidth)

    if(params.matWidth)

    if(params.frameStyle)

    if(params.matColor)

    loadImage(params.objectID);
}

setQueryParams();

addEventListeners();



export 

export function setAttributes(element, attributes) {
    for(let key in attributes) {
        if(typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

export 

export export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    
    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    
    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;

    const printSizeFactors = {
        S: 1,
        M: 2,
        L: 3.5
    }
    const frameStylePrices = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    }

    price += frameWidth/10 * frameStylePrices[frameStyle];

    price += matWidth/10 * 0.05;

    price *= printSizeFactors[printSize];

    return Number((Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2));
}
import { cache } from "./cache.js";

export function displayCartNumber(){
    const items = cache.getCartItems();
    const cartLink = document.getElementById("cart-link");

    if(items.length > 0)
    else{
        cartLink.innerText = "Cart";
    }
}

displayCartNumber();