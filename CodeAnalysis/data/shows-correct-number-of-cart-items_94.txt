export 

export 

export 

export 

export function retrieveCart(){
    if("cart" in localStorage){
        return JSON.parse(localStorage["cart"]);
    }
}import { retrieveObject, storeObject } from "./artmart-cache.js";

class ArtmartAPI {
    constructor(){
        this.metMuseumEndpoint = "https://collectionapi.metmuseum.org/public/collection/v1";
        this.artmartEndpoint = "https://web-engineering.big.tuwien.ac.at/s20/a2";
    }
    
    

    

    

    

    

    

}

const artmartAPI = new ArtmartAPI();
window.artmartAPI = artmartAPI;
export default artmartAPI;
    import artmartAPI from "./artmartAPI.js";
    import {retrieveCart, removeFromCart} from "./artmart-cache.js";
    import {render, calculatePrice} from "./frame.js";
    
    var cartSection;
    var cartTotal;
    var itemTemplate;

    document.addEventListener('DOMContentLoaded', async (event) => 
    {
      cartSection = document.getElementById("cart");
      cartTotal = document.getElementById("cart-total");
      itemTemplate = document.getElementById("preview-container-0").parentNode;
      cartSection.removeChild(itemTemplate);
      document.getElementById("checkout-button").disabled = true;
      await loadCart();
    });

    document.getElementById("checkout-button").addEventListener("click", );

    

    async function loadCart()
    {
      const cart = retrieveCart();
      if( cart !==undefined && cart.length > 0)
      
      else
      {
        console.log("There are no items in your shopping cart.");
        document.getElementById("checkout-button").disabled = true;
        document.getElementById("cart-link").innerText = "Cart";
        document.getElementsByClassName("price")[0].innerText = "There are no items in your shopping cart.";
      }
    }

    

    

    

    
  
    import artmartAPI from "./artmartAPI.js";
    import {addToCart, retrieveCart} from "./artmart-cache.js";
    import {getPrintSizes, render, calculatePrice} from "./frame.js"
  
    const form = document.querySelector("#config-form");
  
    document.addEventListener("DOMContentLoaded", event=>loadObject());
    form.addEventListener('submit', );
  
    var imgContainer = document.getElementById('preview-container');
    var imgElement = document.getElementById('preview-image');
    var artObject;
    var printSize = 'M';
    var frameStyle = 'natural';
    var frameWidth = 40;
    var matColor = 'mint';
    var matWidth = 55;

    async function loadObject(){
      const urlParams = new URLSearchParams(window.location.search);
      const idParam = urlParams.get("objectID");
      if(urlParams.has("printSize")) 
      if(urlParams.has("frameStyle")) 
      if(urlParams.has("frameWidth")) 
      if(urlParams.has("matColor")) 
      if(urlParams.has("matWidth")) 

      const cart = retrieveCart();
      if(!(cart===undefined) && cart.length > 0) 
  
      if(idParam) {
          artObject = await artmartAPI.getObject(idParam);
          if(artObject && artObject.objectID){
              document.getElementById('image-label').innerHTML = "<b>" + artObject.artistDisplayName + "</b><br><i>" + artObject.title + "</i>" + artObject.objectDate;
              imgElement.alt = artObject.title;
              imgElement.onload = function() {
                
                var sizes = getPrintSizes(imgElement);
                var smallLabel = document.getElementById('print-size-s-label');
                smallLabel.innerText = smallLabel.innerText.replace('0 × 0 cm', sizes['S'][0] / 10 + ' x ' + sizes['S'][1] / 10 +' cm');
                
                var mediumLabel = document.getElementById('print-size-m-label');
                mediumLabel.innerText = mediumLabel.innerText.replace('0 × 0 cm', sizes['M'][0] / 10 + ' x ' + sizes['M'][1] / 10 + ' cm');
                
                var largeLabel = document.getElementById('print-size-l-label');
                largeLabel.innerText = largeLabel.innerText.replace('0 × 0 cm', sizes['L'][0] / 10 + ' x ' + sizes['L'][1] / 10+ ' cm');
                
                update();
              };
              
              imgElement.src = artObject.primaryImageSmall;
              return;
          }
      }}
  
    
  
    
  
    function update()
    {  
      render(imgElement, imgContainer, printSize, frameStyle, frameWidth, matColor, matWidth);
      const price =  calculatePrice(printSize, frameStyle, frameWidth, matWidth); 
      document.getElementById("price").innerText = "€ " + price.toFixed(2);
      const sizes = getPrintSizes(imgElement);
      const size = sizes[printSize];
      const width = (Number(size[0]) + Number(frameWidth) + Number(matWidth)) / 10;
      const height = (Number(size[1]) + Number(frameWidth)  + Number(matWidth)) / 10;
      document.getElementById("total-size").innerText =  width.toFixed(1) + " x " + height.toFixed(1) + " cm"
    }
  
    var frameSlider = document.getElementById("frameSlider");
    var frameInput = document.getElementById("frameNumber");
    frameSlider.oninput = 
    frameInput.onchange = 
    
    var matSlider = document.getElementById("matSlider");
    var matInput = document.getElementById("matNumber");
    matSlider.oninput = 
    matInput.onchange = 
  
  
    var printSizeRadio = document.querySelectorAll('input[name="printSize"]');
    for( var i=0; i<printSizeRadio.length; ++i){
      printSizeRadio[i].addEventListener("change", );
    }
  
    var frameStyleRadio = document.querySelectorAll('input[name="frameStyle"]');
    for( var i=0; i<frameStyleRadio.length; ++i){
      frameStyleRadio[i].addEventListener("change", );
    }
  
    var matColorRadio = document.querySelectorAll('input[name="matColor"]');
    for( var i=0; i<matColorRadio.length; ++i){
      matColorRadio[i].addEventListener("change", );
    }
    
  export 

export 

export 

 import artmartAPI from "./artmartAPI.js";
 import {retrieveCart} from "./artmart-cache.js";
 
 var template;
 var templateContainer;
 var highlights; // saved highlights

  document.addEventListener('DOMContentLoaded', async (event) => {
      const urlParams = new URLSearchParams(window.location.search);
      const qParam = urlParams.get("q");
	  template = document.getElementById('template');
	  templateContainer = template.parentNode;
    templateContainer.removeChild(template);
	
	document.getElementById('search').value = qParam;
    searchObjects(qParam);
	
    const cart = retrieveCart();
    if(!(cart===undefined) && cart.length > 0) 
  });

  const form = document.querySelector('.search-form');
  form.addEventListener('submit', );

 async function searchObjects(q){
    clearChildren();
	if(!q) {
		showHighlights();
		return;
	}}
 
 
 
 
 
 
 
 function displayElements(elements) {
    for(var i = 0; i < elements.length; ++i) {
        var obj = elements[i];
        var templateCopy = template.cloneNode(true);
        setupElement(templateCopy, obj);
        templateContainer.appendChild(templateCopy); 
    }
 }
 
 function setupElement(element,object) {
	var anchorElements = element.getElementsByTagName("a");
	var imgElements = element.getElementsByTagName("img");
	var artistElements = element.getElementsByClassName("artist");
	var titleElements = element.getElementsByClassName("title");
  var dateElements = element.getElementsByClassName("date");

	imgElements[0].src = object.primaryImageSmall;
	imgElements[0].alt = object.title;
	artistElements[0].textContent = object.artistDisplayName;
	titleElements[0].textContent = object.title;
	dateElements[0].textContent = object.objectDate;
	anchorElements[0].href = 'config.html?objectID=' + object.objectID;
 }

 async function retrieveObjects(objectIDs){
    const artObjects = await artmartAPI.getObjects(objectIDs);
    console.log(artObjects);
	return artObjects;
 }

  function clearChildren() {
    while (templateContainer.firstChild) {
      templateContainer.removeChild(templateContainer.lastChild);
    }
  }
  
  async function loadHighlights() {
	if(highlights)
		
	console.log("loading highlights");
    highlights = await fetch("./highlights.json");
    highlights = await highlights.json();
  }

  async function showHighlights() {
	await loadHighlights();
    if(highlights) {
      clearChildren();
      let objects = await retrieveObjects(highlights.highlights);
      displayElements(objects);
    }
  }

