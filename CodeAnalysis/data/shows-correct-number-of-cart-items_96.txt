import { getPrintSizes, render, calculatePrice ,getItemPrintDesc} from '../../frame.js';
import { getQueryVariables, removeCartItem, getCartItems, getArtworkMetadata } from '../util.js';

const queryParameters = getQueryVariables();

const INPUT_LIST = {
    cart: document.getElementById('cart'),
    cartTotal: document.getElementById("div-cart-total")
};

var testCartItem = {
    objectID: 123,
    image: {},
    size: "S",
    frameStyle:"natural",
    frameWidth:5.0,
    matColor:"wine",
    matWidth:5.1
};

initCart();

function initCart() {
    updateCartView()
}

function updateCartItemsCounter() {
    if(getCartItems().length > 0)else{
        document.getElementById("cart-link").innerHTML = "Cart";
    }
}

function updateCheckoutButton() {
    document.getElementById("checkout-button").disabled = getCartItems().length <= 0;
}



function updateCartItems() {
    let cartTotal = INPUT_LIST.cartTotal;
    INPUT_LIST.cart.innerHTML = "";
    getCartItems().reverse().forEach();
    INPUT_LIST.cart.appendChild(cartTotal);
}



function updateCartView() {
    updateCartItems();
    updateCartItemsCounter();
    updateTotalPrice();
    updateCheckoutButton();
}

export 

function updateTotalPrice() {
    const cartItems = getCartItems();
    if(cartItems.length < 1){
        document.getElementById("price-total").innerText = "There are no items in your shopping cart.";
        document.getElementById("price-pretext").innerText = "";
    }
}

import { getPrintSizes, render, calculatePrice } from '../../frame.js';
import { getQueryVariables, addCartItem, getCartItems, getArtworkMetadata } from '../util.js';

const queryParameters = getQueryVariables();

const previewImage = document.getElementById("preview-image");
const INPUT_LIST = {
    sizeList: document.getElementsByName('printSize'),
    submitButton: document.getElementById("submitButton"),
    frame: {
        input: document.getElementById("frameWidth"),
        range: document.getElementById("frameWidthR"),
        list: document.getElementsByName('frameStyle')
    },
    material: {
        input: document.getElementById("matWidth"),
        range: document.getElementById("matWidthR"),
        list: document.getElementsByName('matColor')
    }
};

var config = {
    objectID: 123,
    image: {},
    size: "S",
    frame: {
        width: 0.0,
        style: "natural"
    },
    material: {
        width: 0.0,
        color: "wine"
    }
}

initConfig();
initEventListener();

function initConfig() {
    initValues();
    setPreview(queryParameters.objectID);
    updatePrice();
}

function initValues() {
    if (queryParameters.printSize) 

    if (queryParameters.frameStyle) 

    if (queryParameters.matColor) 

    if (queryParameters.frameWidth) 

    if (queryParameters.matWidth) 

    config = {
        objectID: queryParameters.objectID,
        image: document.getElementById("preview-image"),
        size: document.querySelector('input[name="printSize"]:checked').value,
        frame: {
            width: document.getElementById("frameWidth").value,
            style: document.querySelector('input[name="frameStyle"]:checked').value
        },
        material: {
            width: document.getElementById("matWidth").value,
            color: document.querySelector('input[name="matColor"]:checked').value
        }
    }

    document.getElementById("cart-link").innerHTML = "Cart (" + getCartItems().length + ")";
}

function setPreview(id) {
    getArtworkMetadata(id).then(function (data) {
        setLabel(data);
        config.image.onload = function () {
            paintImage();
            setPrintSizes();
        };
        config.image.src = data.primaryImageSmall;
    }, );
}

function paintImage() {
    render(config.image, document.getElementById("preview-container"), config.size, config.frame.style, config.frame.width, config.material.color, config.material.width);
}

function setLabel(data) {
    document.getElementById("previewArtist").innerHTML = data.artistDisplayName;
    document.getElementById("previewTitle").innerHTML = data.title;
    document.getElementById("previewYear").innerHTML = data.objectDate;
}

function setPrintSizes() {
    var sizes = getPrintSizes(config.image);
    document.getElementById("print-size-s-label").innerHTML = "Small <br>" + sizes.S[0] + " × " + sizes.S[1] + " cm"
    document.getElementById("print-size-m-label").innerHTML = "Medium <br>" + sizes.M[0] + " × " + sizes.M[1] + " cm"
    document.getElementById("print-size-l-label").innerHTML = "Large <br>" + sizes.L[0] + " × " + sizes.L[1] + " cm"
}

function updatePrice() {
    document.getElementById("price").innerHTML = "€ " + calculatePrice(config.size, config.frame.style, config.frame.width, config.material.width).toFixed(2);;
}

function initEventListener() {
    INPUT_LIST.frame.input.addEventListener("change", );
    INPUT_LIST.frame.range.addEventListener("change", );

    INPUT_LIST.material.input.addEventListener("change", );
    INPUT_LIST.material.range.addEventListener("change", );

    INPUT_LIST.sizeList.forEach(element => {
        element.addEventListener("change", );
    });

    INPUT_LIST.frame.list.forEach(element => {
        element.addEventListener("change", );
    });

    INPUT_LIST.material.list.forEach(element => {
        element.addEventListener("change", );
    });

    document.querySelectorAll('input').forEach(element => {
        element.addEventListener("change", );
    });

    INPUT_LIST.submitButton.addEventListener("click", );
}

export 

export 

export 

export 
import {getArtworkMetadata, retrieveIdsMatchingTerm, retrieveHighlights, getCartItems} from '../util.js';

const defaultSearchText = "Search our collection of more than 400,000 artworks.";

const resultGallery = document.getElementById("gallery");
const searchInfo = document.getElementById("search-info");
const cartNavLink = document.getElementById("cart-link");
const queryParameters = getQueryVariables();

initSearch();

function initSearch() {
    updateCartItemsCounter();
    searchArtworks();
}

function getQueryVariables(){
    const queryString = window.location.search;
    return new URLSearchParams(queryString);
}

function updateCartItemsCounter() {
    if(getCartItems().length > 0)else{
        cartNavLink.innerHTML = "Cart";
    }
}

function searchArtworks() {
    updateCartItemsCounter();

    let matchingIds;
    let validTerm = false;
    const searchTerm = queryParameters.get('q');

    if (searchTerm == undefined ) {
        matchingIds = retrieveHighlights();
        validTerm = false;
    }

    resultGallery.innerHTML = '';
    matchingIds.then(async function(ids){
        for(let matchingId of ids){
            resultGallery.appendChild(await renderSearchResult(matchingId));
        }

        if(validTerm)else{
            searchInfo.innerText = defaultSearchText;
        }
    });
}

async function renderSearchResult(id) {
    return getArtworkMetadata(id).then(function (data) {
        const artworkHtml = document.createElement('div');

        artworkHtml.innerHTML =
            `<div class="thumb">
                <a href="config.html?objectID=${id}" id="object-${id}">
                <img src="${data.primaryImageSmall}" alt="${data.title}" id="object-image-${id}">
                <div class="museum-label">
                   <span class="artist">${data.artistDisplayName}</span>
                    <span class="title">${data.title}</span>,
                    <span class="date">${data.objectDate}</span>
                </div>
                </a>
            </div>`;

        return artworkHtml;
    });
}const API_URL = "https://collectionapi.metmuseum.org/public/collection/v1";//http://localhost:4445/ https://collectionapi.metmuseum.org/public/collection/v1
/*
for localhost test:

 1)
run two nodejs processes in folder test with params:  "mock-server/server.js 4445" and
"node_modules/static-server/bin/static-server.js -p 4444 ../wwwnode node_m"

2)
in browser set the localstorage item(for cart test)
localStorage.setItem('cart',"[{\"objectID\":1,\"printSize\":\"M\",\"frameStyle\":\"shabby\",\"frameWidth\":24,\"matColor\":\"coal\",\"matWidth\":23},{\"objectID\":2,\"printSize\":\"M\",\"frameStyle\":\"natural\",\"frameWidth\":46,\"matColor\":\"indigo\",\"matWidth\":17},{\"objectID\":3,\"printSize\":\"S\",\"frameStyle\":\"elegant\",\"frameWidth\":20,\"matColor\":\"wine\",\"matWidth\":9}]");
localStorage.setItem('cart',"[{\"objectID\":207059,\"printSize\":\"S\",\"frameStyle\":\"shabby\",\"frameWidth\":20,\"matColor\":\"coal\",\"matWidth\":23},{\"objectID\":2,\"printSize\":\"M\",\"frameStyle\":\"natural\",\"frameWidth\":46,\"matColor\":\"indigo\",\"matWidth\":17},{\"objectID\":3,\"printSize\":\"S\",\"frameStyle\":\"elegant\",\"frameWidth\":20,\"matColor\":\"wine\",\"matWidth\":9}]");

[{"objectID":1,"printSize":"M","frameStyle":"shabby","frameWidth":24,"matColor":"coal","matWidth":23},{"objectID":2,"printSize":"M","frameStyle":"natural","frameWidth":46,"matColor":"indigo","matWidth":17},{"objectID":3,"printSize":"S","frameStyle":"elegant","frameWidth":20,"matColor":"wine","matWidth":9}]



export function getQueryVariables() {
    var query = window.location.search.substring(1);
    var vars = query.split('&');

    var parameters = {};
    vars.forEach(element => {
        parameters[element.split("=")[0]] = element.split("=")[1];
    });
    return parameters;
}

export 

/* Can not be used bc of the fixed tests whichs sets the localStorage Items
function getNextItemID() {
    let currItemID = localStorage.getItem("currentItemID");
    if(currItemID === undefined || currItemID == null){
        localStorage.setItem("currentItemID","1");
        return 1;
    }else{
        currItemID = parseInt(currItemID)+1;
        localStorage.setItem("currentItemID",currItemID);
        return currItemID;
    }
}*/

export 

export 



export function getCartItems() {
    if (localStorage.getItem("cart") === null) 
    return JSON.parse(localStorage.getItem("cart"));
}

export 

export 

export 