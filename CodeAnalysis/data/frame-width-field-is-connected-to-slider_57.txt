export const MET_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/';

export const getArtById = async objectID => {
    const response = await fetch(MET_BASE_URL + `objects/${objectID}`)
    const artJson = await response.json()
    return artJson;
}

export const searchArt = 
    import { getArtById } from './apiCalls.js'
    import { render, getPrintSizes, calculatePrice } from './frame.js'
    import { store, retrieve } from './metCache.js'

    const urlParams = new URLSearchParams(window.location.search);
    const objectID = urlParams.get('objectID')
    const redirectToSearch = 

    let printSize = 'M'
    let frameStyle = 'natural'
    let frameWidth = 4
    let matColor = 'mint'
    let matWidth = 5.5

    const updatePreview = () => {
      render(document.getElementById('preview-image'), document.getElementById('preview-container'), printSize, frameStyle, frameWidth, matColor, matWidth)
      const sizes = getPrintSizes(document.getElementById('preview-image'))
      document.querySelector('#print-size-s-label span').innerHTML = `${sizes.S[0]} × ${sizes.S[1]} cm`
      document.querySelector('#print-size-m-label span').innerHTML = `${sizes.M[0]} × ${sizes.M[1]} cm`
      document.querySelector('#print-size-l-label span').innerHTML = `${sizes.L[0]} × ${sizes.L[1]} cm`
      document.getElementById('total-size').innerHTML = `${sizes.L[0] + frameWidth * 2 + matWidth * 2} × ${sizes.L[1] + frameWidth * 2 + matWidth * 2} cm`
      document.getElementById('price').innerHTML = `€ ${calculatePrice(printSize, frameStyle, frameWidth, matWidth).toFixed(2)}`
    }

    if (objectID) {
      document.addEventListener('DOMContentLoaded', async e => {
        const cart = JSON.parse(window.localStorage.getItem('cart'))
        if (cart ) 

        let artObject = retrieve(objectID)
        if (!artObject) {
          artObject = await getArtById(objectID)
          store(objectID, artObject)
        }
        

        if (artObject.message) 

        const artImage = document.getElementById('preview-image')
        artImage.onload = updatePreview

        if (artObject.primaryImageSmall) {
          artImage.src = artObject.primaryImageSmall;
        }
        document.getElementById('image-label').innerHTML = `
          <span class="artist">${artObject.artistDisplayName}</span>
          <span class="title">${artObject.title}</span>,
          <span class="date">${artObject.objectDate}</span>
        `
      })
    }

    const restrictValues = (value, min, max) => Math.round(Math.min(Math.max(value, min), max) * 10) / 10

    document.getElementById('frame-width-input').addEventListener('change', e => {
      const value = restrictValues(e.target.value, e.target.min, e.target.max)
      document.getElementById('frame-width-input').value = `${value}`
      document.getElementById('frame-width-slider').value = `${value}`
      frameWidth = value
      updatePreview()
    })
    document.getElementById('frame-width-slider').addEventListener('change', )
    document.getElementById('frame-mat-input').addEventListener('change', )
    document.getElementById('frame-mat-slider').addEventListener('change', )
    const printSizeSelectors = document.querySelectorAll('input[name="printSize"]')
    for (const selector of printSizeSelectors) {
      selector.addEventListener('change', )
    }
    const frameStyleSelectors = document.querySelectorAll('input[name="frameStyle"]')
    for (const selector of frameStyleSelectors) {
      selector.addEventListener('change', )
    }
    const matColorSelectors = document.querySelectorAll('input[name="matColor"]')
    for (const selector of matColorSelectors) {
      selector.addEventListener('change', )
    }

    const queryPrintSize = urlParams.get('printSize')
    const queryFrameWidth = urlParams.get('frameWidth')
    const queryMatWidth = urlParams.get('matWidth')
    const queryFrameStyle = urlParams.get('frameStyle')
    const queryMatColor = urlParams.get('matColor')

    if (queryPrintSize) 
    if (queryFrameWidth) 
    if (queryMatWidth) 
    if (queryFrameStyle) 
    if (queryMatColor) 

    document.getElementById('add-to-cart').addEventListener('click', )
  export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    const basePrice = 30;

    price += basePrice

    let woodCost;
    switch(frameStyle) {
        case 'natural':
            woodCost = 0.8
            break;
        
        
        
        
    }
    price += woodCost * frameWidth

    price += 0.05 * matWidth

    switch(printSize) {
        case 'M':
            price *= 2
            break;
        
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export function retrieve(objectID) {
    const key = getStorageKey(objectID)
    if (key in localStorage) 
}

export function store(objectID, met) {
    const key = getStorageKey(objectID)
    localStorage[key] = JSON.stringify(met)
}

function getStorageKey(objectID) {
    return `MET-${objectID}`
}
