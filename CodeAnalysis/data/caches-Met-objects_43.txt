import { Artwork } from '/artwork.js';

export function retrieve(objID) {
    const key = objID;
    if(key in localStorage) {
        console.log(`Retrieving ${key} from local storage`);
        return JSON.parse(localStorage[key]);
    }
}

export 

import { Artwork } from "/artwork.js";

export class ArtworkDocumentContainer {

	

	


	
}export class Artwork {
	
}let cart = [];


export function retrieve() {
    if(!localStorage['cart'])
    return JSON.parse(localStorage['cart']);
}


export 

    import * as CartCache from '/cart-cache.js';
    import * as ArtworkCache from '/artwork-cache.js';
    import * as SearchAPI from '/search-api.js';
    import * as Frame from '/frame.js';

    const cartCache = CartCache.retrieve();

    document.addEventListener('DOMContentLoaded', event => {



    
    const cart = document.getElementById('cart-link');
    if(cartCache){
        cart.innerHTML = `Cart (${cartCache.length})`;

    }

    for(let i = 0; i < cartCache.length; i++){
      displayArt(cartCache[i]);
    }

  });


  async function displayArt(item){
     let artwork = ArtworkCache.retrieve(item.objectID);
     if(!artwork)

    const section = document.getElementById('cart');


    const cartItem = document.createElement('div');
    cartItem.classList.add('cart-item');
    section.prepend(cartItem);

    const cartPreview = document.createElement('div');
    cartPreview.classList.add('cart-preview');
    cartItem.appendChild(cartPreview);

    const link = document.createElement('a');
    const configString = "&printSize=" + item.printSize + "&frameStyle=" + item.frameStyle + "&frameWidth=" + item.frameWidth + "&matColor=" + item.matColor + "&matWidth=" + item.matWidth;
    link.href = "/config.html?" + "objectID=" + item.objectID + configString;
    cartPreview.appendChild(link);
    const image = document.createElement('img');
    image.src = artwork.image;
    image.classList.add('cart-thumb');
    image.alt = artwork.altText;
    Frame.render(image, cartPreview, item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);
    link.appendChild(image);

    const museumLabel = document.createElement('div');
    museumLabel.classList.add('museum-label');
    cartItem.appendChild(museumLabel);
    const div = document.createElement('div');
    museumLabel.appendChild(div);
    const artist = document.createElement('span');
    artist.classList.add("artist");
    artist.innerHTML = artwork.artist;
    div.appendChild(artist);
    const title = document.createElement('span');
    title.classList.add("title");
    title.innerHTML = artwork.title;
    div.appendChild(title);
    const date = document.createElement('span');
    date.classList.add("date");
    date.innerHTML = ", " + artwork.date;
    div.appendChild(date);
    const br = document.createElement('br');
    const br2 = document.createElement('br');
    div.appendChild(br);
    div.appendChild(br2);

    const frameDesc = document.createElement('span');
    frameDesc.classList.add('frame-description');

    let description = "";
    let printSizeText = "";
    let matWidthText = ".";
    let addText1 = "";
    let addText2 = "";
    if(item.matWidth%10 != 0){
      addText1 = "." + item.matWidth%10;
    }
    if(item.frameWidth%10 != 0){
      addText2 = "." + item.frameWidth%10;
    }
    if(item.printSize == 'S'){
      printSizeText = "Small";
    } else if(item.printSize == 'M'){
      printSizeText = "Medium";
    }

    if(item.matWidth != 0){
      matWidthText = " with a " + item.matWidth.toString().charAt(0) + addText1  + " cm " + item.matColor + " mat.";
    }

    description = printSizeText + " print in a " + item.frameWidth.toString().charAt(0) + addText2 + " cm " + item.frameStyle + " frame" + matWidthText;
    console.log(description);
    frameDesc.innerHTML = description;
    div.appendChild(frameDesc);
    const cartRemove = document.createElement('button');
    cartRemove.classList.add('cart-remove');
    museumLabel.appendChild(cartRemove)


  }



  
  
    import * as Frame from '/frame.js';
    import { ConfiguredImage } from '/configuredImage.js';
    import * as CartCache from '/cart-cache.js';
    import * as ArtworkCache from '/artwork-cache.js';
    import * as SearchAPI from '/search-api.js';

    let defImg;
    let configuredImage;

    async function cacheArtwork(objectID){   
      const cachedImage = ArtworkCache.retrieve(objectID);
      if(!cachedImage) 
    }




    document.addEventListener('DOMContentLoaded', event => {


      const urlParams = new URLSearchParams(window.location.search);
      const param = urlParams.get('objectID');
      if(!param)

      cacheArtwork(param);
      const cache = CartCache.retrieve();
      const cart = document.getElementById('cart-link');
      if(cache)


      getPictureAndLabel(param);

      const printSize = urlParams.get('printSize');
      const frameStyle = urlParams.get('frameStyle');
      const frameWidth = urlParams.get('frameWidth');
      const matColor = urlParams.get('matColor');
      const matWidth = urlParams.get('matWidth');

      async function getPictureAndLabel(objectID) {
        try {

          const URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`;
          const objResponse = await fetch(URL);
          const objRawData = await objResponse.json();
          if(!objRawData.primaryImageSmall)

          const prevContainer = document.getElementById('preview-container')
          const previewPicture = document.createElement('img');
          previewPicture.src = objRawData.primaryImageSmall;
          previewPicture.id = "preview-image";
          prevContainer.appendChild(previewPicture);

          const previewLabel = document.createElement('div');
          previewLabel.id = "image-label";
          previewLabel.classList.add("museum-label");
          prevContainer.appendChild(previewLabel);

          const artist = document.createElement('span');
          artist.classList.add("artist");
          artist.innerHTML = objRawData.artistDisplayName;
          previewLabel.appendChild(artist);
          const title = document.createElement('span');
          title.classList.add("title");
          title.innerHTML = objRawData.title;
          previewLabel.appendChild(title);
          const date = document.createElement('span');
          date.classList.add("date");
          date.innerHTML = objRawData.objectDate;
          previewLabel.appendChild(date);

           defImg = {
            image: previewPicture,
            container : prevContainer,
            printSize : printSize,
            frameStyle : frameStyle,
            frameWidth : frameWidth,
            matColor : matColor,
            matWidth : matWidth
          }
          update();
        }catch(error) {
          console.log("Error occured.");
          console.log(error);
        }

      }
        document.getElementById("print-size-" + printSize.toLowerCase()).setAttribute("checked","");
        document.getElementById("frameField").setAttribute("value", checkUrlValue(frameWidth.toString(),2,5));
        document.getElementById("matField").setAttribute("value",checkUrlValue(matWidth.toString(),0,10));
        document.getElementById("frameSlider").value = checkUrlValue(frameWidth.toString(),2,5);
        document.getElementById("matSlider").value = checkUrlValue(matWidth.toString(),0,10);
        document.getElementById("frame-style-" + frameStyle.toLowerCase()).setAttribute("checked","");
        document.getElementById("mat-color-" + matColor.toLowerCase()).setAttribute("checked","");



    });
    
    function update(){
      let size = document.querySelector("div.segmented").getElementsByTagName("label");
      let small = Frame.getPrintSizes(defImg.image).S;
      let medium = Frame.getPrintSizes(defImg.image).M;
      let large = Frame.getPrintSizes(defImg.image).L;
      size.item(0).childNodes.item(2).data = small[0] + " x " + small[1] + " cm";
      size.item(1).childNodes.item(2).data = medium[0] + " x " + medium[1] + " cm";
      size.item(2).childNodes.item(2).data = large[0] + " x " + large[1] + " cm";


      document.getElementById("price").innerHTML = "â‚¬ " +  Frame.calculatePrice2(defImg.printSize,defImg.frameStyle,defImg.frameWidth,defImg.matWidth).toFixed(2);

      Frame.render(defImg.image,defImg.container,defImg.printSize,defImg.frameStyle,defImg.frameWidth,defImg.matColor,defImg.matWidth);


    }
    document.getElementById("print-size-s").addEventListener('click',);
    document.getElementById("print-size-m").addEventListener('click',);
    document.getElementById("print-size-l").addEventListener('click',);




    document.getElementById("frame-style-classic").addEventListener('click',);
    document.getElementById("frame-style-natural").addEventListener('click',);
    document.getElementById("frame-style-shabby").addEventListener('click',);
    document.getElementById("frame-style-elegant").addEventListener('click',);



    document.getElementById("mat-color-ivory").addEventListener('click',);
    document.getElementById("mat-color-mint").addEventListener('click',);
    document.getElementById("mat-color-wine").addEventListener('click',);
    document.getElementById("mat-color-indigo").addEventListener('click',);
    document.getElementById("mat-color-coal").addEventListener('click',);


    document.getElementById("frameField").addEventListener("change", );

    document.getElementById("frameSlider").addEventListener("input", );

      document.getElementById("matField").addEventListener("change", );
    document.getElementById("matSlider").addEventListener("input", );

    



  export class ConfiguredImage {
	

	



	
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}



export 



export 
import { Artwork } from '/artwork.js';
import * as ArtworkCache from '/artwork-cache.js';
import { ArtworkDocumentContainer } from '/artwork-dom.js';

export ;

export 


export 
    import * as SearchAPI from '/search-api.js';
    import { Artwork } from '/artwork.js';
    import { ArtworkDocumentContainer } from '/artwork-dom.js';
    import * as CartCache from '/cart-cache.js';



    async function artSearch(q){
      const artworks = await SearchAPI.retrieve(q); 
    };

    document.addEventListener('DOMContentLoaded', event => {    

      const cache = CartCache.retrieve();
      const cart = document.getElementById('cart-link');
      if(cache)
      const params = (new URL(document.location)).searchParams;
      let searchQuery = params.get('q');
      if(searchQuery == "null")
      else if(!searchQuery)
      else {
        document.getElementById('search').value = searchQuery;
      searchQuery = searchQuery.replace('+', ' ');
      artSearch(searchQuery);
      }



      
});

    


