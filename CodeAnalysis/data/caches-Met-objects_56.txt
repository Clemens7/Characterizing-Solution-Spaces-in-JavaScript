export const CacheType =
{
    Search: 1,
    ObjId: 2
};

export function get(token, type) {
    if (!token) 
    const cached = localStorage.getItem(getKey(token, type));
    if (!cached) 
    return JSON.parse(cached);
}

export 

function getKey(token, type) {
    switch (type) {
        
        case CacheType.ObjId:
            return "objId:" + token;
    }}


            import * as Config from './config.js';
            import * as Frame from './frame.js';

            document.addEventListener('DOMContentLoaded', async event => {
                await updateData();
            });

            document.getElementById("checkout-button").onclick =
                ;

            async function updateData() {
                const cartTag = document.getElementById('cart');
                const checkoutElement = document.getElementsByClassName('cart-total')[0];

                const cartString = localStorage.getItem('cart');

                if (cartString === null || cartString === "[]") 
                const cart = JSON.parse(cartString);
                document.getElementById('cart-link').innerText = `Cart (${cart.length})`;
                const priceTag = document.getElementById('price-total');

                let price = 0.0;
                let i = 0;
                for (let item of cart) {
                    const itemPrice = Frame.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
                    price += itemPrice;
                    const toAdd = await getItem(item, i, itemPrice);
                    cartTag.insertBefore(toAdd, checkoutElement);
                    i++;
                }
            
                priceTag.innerText = price;
            }

            async function getItem(item, i, price) {

                const data = await Config.loadObject(item.objectID);

                const cartItem = document.createElement("div");
                cartItem.className = "cart-item";
                const cartPreview = document.createElement("div");
                cartPreview.className = "cart-preview";
                cartPreview.id = "preview-container-" + i;
                const a = document.createElement("a");
                a.href = "config.html?" +
                    `objectID=${item.objectID}&` +
                    `printSize=${item.printSize}&` +
                    `frameStyle=${item.frameStyle}&` +
                    `frameWidth=${item.frameWidth}&` +
                    `matColor=${item.matColor}&` +
                    `matWidth=${item.matWidth}`;
                const img = document.createElement("img");
                img.className = "cart-thumb";
                img.id = "preview-" + i;
                img.alt = data.title;
                const unfinishedImg = new Image();
                unfinishedImg.onload = function () {
                    img.src = this.src;
                };
                unfinishedImg.src = data.primaryImageSmall;
                a.appendChild(img);
                cartPreview.appendChild(a);
                cartItem.appendChild(cartPreview);

                const museumLabel = document.createElement("div");
                museumLabel.className = "museum-label";

                const labelItems = document.createElement("div");

                const spanArtist = document.createElement("span");
                const spanTitle = document.createElement("span");
                const spanDate = document.createElement("span");
                spanArtist.className = "artist";
                spanArtist.innerText = data.artistDisplayName;
                spanTitle.className = "title";
                spanTitle.innerText = data.title;
                spanDate.className = "date";
                spanDate.innerText = data.objectDate;
                labelItems.appendChild(spanArtist);
                labelItems.appendChild(spanTitle);
                labelItems.appendChild(document.createTextNode(", "));
                labelItems.appendChild(spanDate);

                const br1 = document.createElement("br");
                const br2 = document.createElement("br");

                labelItems.appendChild(br1);
                labelItems.appendChild(br2);

                const spanFrame = document.createElement("span");
                spanFrame.className = "frame-description";
                spanFrame.innerText = configDescription(item);
                labelItems.appendChild(spanFrame);

                museumLabel.appendChild(labelItems);

                const cartPrice = document.createElement("div");
                cartPrice.className = "cart-price";

                const spanPrice = document.createElement("span");
                spanPrice.id = "price-" + i;
                spanPrice.innerText = price;
                cartPrice.appendChild(document.createTextNode("€ "));
                cartPrice.appendChild(spanPrice);

                museumLabel.appendChild(cartPrice);

                const button = document.createElement("button");
                button.className = "cart-remove";


                button.addEventListener("click", );

                museumLabel.appendChild(button);

                cartItem.appendChild(museumLabel);

                return cartItem;

            }

            function configDescription(config) {
                const sizeName = {
                    S: 'Small',
                    M: 'Medium',
                    L: 'Large'
                }

                return `${sizeName[config.printSize]} print` +
                    ` in a ${config.frameWidth / 10} cm` +
                    ` ${config.frameStyle} frame` +
                    (config.matWidth > 0
                        ? ` with a ${config.matWidth / 10} cm ${config.matColor} mat.`
                        
                    )
            }

            

            
        
        import { Item } from './item.js';
        import * as Config from './config.js';
        import * as Cache from './cache.js';

        const params = (new URL(document.location)).searchParams;
        if (!params.has('objectID')) 

        let currentItem = new Item(params.get('objectID'), 'M', 'natural', 4, 'mint', 5.5);

        const frameWidthNumInput = document.getElementsByName('frameWidth')[0];
        const frameWidthRangeInput = document.getElementsByName('frameWidthR')[0];
        const matWidthNumInput = document.getElementsByName('matWidth')[0];
        const matWidthRangeInput = document.getElementsByName('matWidthR')[0];
        const printSizeInputs = document.getElementsByName('printSize');
        const frameStyleInputs = document.getElementsByName('frameStyle');
        const matColorInputs = document.getElementsByName('matColor');

        frameWidthNumInput.addEventListener("change", );
        frameWidthRangeInput.addEventListener("change", );
        matWidthNumInput.addEventListener("change", );
        matWidthRangeInput.addEventListener("change", );
        printSizeInputs.forEach(element => element.addEventListener("click", ));
        frameStyleInputs.forEach(element => element.addEventListener("click", ));
        matColorInputs.forEach(element => element.addEventListener("click", ));

        document.getElementById('config-form').addEventListener('submit', );

        document.addEventListener('DOMContentLoaded', () => {
            Config.updateCartItems(); //calling this function in other EventListener leads to point reductions
        });

        document.addEventListener('DOMContentLoaded', () => {
            loadImage(currentItem.objectID)
                .then(Config.updatePage(currentItem));

            setFrameParameters(
                params.get('printSize'),
                params.get('frameWidth'),
                params.get('frameStyle'),
                params.get('matWidth'),
                params.get('matColor'));
        });

        async function loadImage(objectID) {

            const responseJson = await Config.loadObject(objectID);

            Cache.set(objectID, Cache.CacheType.ObjId, responseJson);

            createLabel(responseJson);
            const image = document.getElementById("preview-image");
            image.setAttribute("alt", responseJson.title);
            image.setAttribute("src", responseJson.primaryImageSmall);
            Config.setPrintSizes(image);

            function createLabel(responseJson) {
                const label = document.getElementById("image-label");
                const spanArtist = document.createElement("span");
                const spanTitle = document.createElement("span");
                const spanDate = document.createElement("span");
                spanArtist.className = "artist";
                spanArtist.innerText = responseJson.artistDisplayName;
                spanTitle.className = "title";
                spanTitle.innerText = responseJson.title;
                spanDate.className = "date";
                spanDate.innerText = responseJson.objectDate;
                label.appendChild(spanArtist);
                label.appendChild(spanTitle);
                label.appendChild(document.createTextNode(", "));
                label.appendChild(spanDate);
            }

            return image;
        }

        function setFrameParameters(printSize, frameWidth, frameStyle, matWidth, matColor) {
            if (printSize) 
            if (frameStyle) 
            if (matColor) 
            if (frameWidth) 
            if (matWidth) 
        }
    import * as Frame from './frame.js';
import * as Cache from './cache.js';

const baseUrl = "https://collectionapi.metmuseum.org/public/collection/v1/";

export 

export 

export 

export 

export 

export 

export 

export async function loadObject(objectID) {
    const cached = Cache.get(objectID, Cache.CacheType.ObjId);
    if (cached) {
        return cached;
    }}
export 

export 

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    const frameStylePrices = {
        classic: 1,
        natural: 0.8,
        shabby: 0.9,
        elegant: 0.85
    };
    const sizeFactor = {
        S: 1,
        M: 2,
        L: 3.5
    };
    const base = 30;
    const frame = frameWidth * frameStylePrices[frameStyle];
    const mat = matWidth * 0.05;

    let price = sizeFactor[printSize] * (base + frame + mat);
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export 
export class Item {
    constructor(objectID, printSize, frameStyle, frameWidth, matColor, matWidth) {
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameStyle = frameStyle;
        this.frameWidth = frameWidth;
        this.matColor = matColor;
        this.matWidth = matWidth;
    }
}

        import * as Search from './search.js';
        import * as Config from './config.js';

        async function artSearch(searchToken) {
            const arts = await Search.retrieve(searchToken);
            if (arts === undefined || arts === null) 
            createTiles(arts);
            return arts.length;
        }

        document.addEventListener('DOMContentLoaded', async event => {
            const params = (new URL(document.location)).searchParams;
            const searchQuery = params.get('q');
            if (!searchQuery) 
            document.getElementById('search').value = searchQuery;
            const searchToken = searchQuery;//.split(',');
            const searchInfo = document.getElementById("search-info");
            searchInfo.innerText = `Searching for “${searchQuery}”...`;
            let resultCount = 0;
            try {
                resultCount = await artSearch(searchToken);
            }
            finally {
                searchInfo.innerText = `Found ${resultCount} artwork${resultCount != 1 ? "s" } for “${searchQuery}”`;
            }
        });
        document.addEventListener('DOMContentLoaded', Config.updateCartItems());

        function createTiles(arts) {

            const gallery = document.getElementById("gallery");

            for (let i = 0; i < arts.length; i++) {
                const div1 = document.createElement("div");
                div1.className = "thumb";
                const a = document.createElement("a");
                a.href = "config.html?objectID=" + arts[i].objectID;
                a.id = "object-" + i;
                div1.appendChild(a);
                const img = document.createElement("img");
                img.src = arts[i].primaryImageSmall;//primaryImage;
                img.alt = arts[i].title;
                img.id = "object-image-" + i;
                a.appendChild(img);
                const div2 = document.createElement("div");
                div2.className = "museum-label";
                a.appendChild(div2);
                const spanArtist = document.createElement("span");
                const spanTitle = document.createElement("span");
                const spanDate = document.createElement("span");
                spanArtist.className = "artist";
                spanArtist.innerText = arts[i].artistDisplayName;
                spanTitle.className = "title";
                spanTitle.innerText = arts[i].title;
                spanDate.className = "date";
                spanDate.innerText = arts[i].objectDate;
                div2.appendChild(spanArtist);
                div2.appendChild(spanTitle);
                div2.appendChild(document.createTextNode(", "));
                div2.appendChild(spanDate);

                gallery.appendChild(div1);
            }
        }
         /*document.getElementsByClassName('search-form')[0].addEventListener('submit', event => {
             const searchInput = document.getElementById('search');
             if (!searchInput.value) {
                 searchInput.style.border = "1px solid red";
                 event.preventDefault();
             }
         });*/
    import * as Cache from './cache.js';

const baseUrl = "https://collectionapi.metmuseum.org/public/collection/v1/";

export async function retrieve(searchToken) {

    const cached = Cache.get(searchToken, Cache.CacheType.Search);
    if (cached) {
        return cached;
    }}











