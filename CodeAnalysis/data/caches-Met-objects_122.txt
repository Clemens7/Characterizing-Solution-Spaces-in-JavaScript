
export function retrieve(keywords) {
    const key = getStorageKey(keywords);
    if(key in localStorage) {
        return JSON.parse(localStorage[key]);
    }
}

export 

function getStorageKey(keywords) {
    return keywords ;
}
import * as fr from './frame.js'
import * as ac from './artwork-cache.js'
import * as NavigationBar from './navigation-bar.js';

const itemTemplate = {
    cartItem: '<div class="cart-item"></div>',
    preview: '<div class="cart-preview"></div>',
    link: '<a href=""></a>',
    img: '<img class="cart-thumb" src="" id="preview-" alt="">',
}

export function createNodeFromHTMLString(htmlString) {
    let div = document.createElement('div');
    div.innerHTML = htmlString.trim();

    return div.firstChild;
}

function createPreviewLink(item) {
    return `config.html?objectID=${item['objectID']}&printSize=${item['printSize']}&frameStyle=${item['frameStyle']}&frameWidth=${item['frameWidth']}&matColor=${item['matColor']}&matWidth=${item['matWidth']}`;
}

async function fetchArtwork(item) {
    let rawArtwork = ac.retrieve(item['objectID']);
    let artwork;
    if (rawArtwork) {
        artwork = new Artwork(rawArtwork['id'], rawArtwork['image'], rawArtwork['artist'], rawArtwork['title'], rawArtwork['date']);
    }
    return artwork;
}

async function createCartItemNode(item) {

    let artwork = await fetchArtwork(item);
    let cartItem = {
        cartItem: `<div class="cart-item" id="cart-item-${artwork['id']}"></div>`,
        preview: `<div class="cart-preview" id="preview-container-${artwork['id']}"></div>`,
        link: `<a href="${createPreviewLink(item)}"></a>`,
        img: `<img class="cart-thumb" src="${artwork['image']}" id="preview-${artwork['id']}" alt="${artwork['title']}">`
    };

    let nodeItem = createNodeFromHTMLString(cartItem.cartItem);
    nodeItem.id = `cart-item-${artwork['id']}`;
    let nodePreview = createNodeFromHTMLString(cartItem.preview);
    let nodeLink = createNodeFromHTMLString(cartItem.link);
    let printSize;
    let nodeImage = createNodeFromHTMLString(cartItem.img);
    nodeImage.onload = function () {

        fr.render(nodeImage, nodePreview, item['printSize'], item['frameStyle'],
            item['frameWidth'] * 10, item['matColor'], item['matWidth'] * 10);
    };
    nodeLink.appendChild(nodeImage);
    nodePreview.appendChild(nodeLink);
    nodeItem.appendChild(nodePreview);


    let labelTemplate =
        `    <div class="museum-label">\n` +
        `      <div>\n` +
        `        <span class="artist">${artwork['artist']}</span>\n` +
        `        <span class="title">${artwork['title']}</span>,\n` +
        `        <span class="date">${artwork['date']}</span>\n` +
        `        <br><br>\n` +
        `        <span class="frame-description" id="frame-description-${item['objectID']}"></span>\n` +
        `      </div>\n` +
        `      <div class="cart-price">€ ${fr.calculatePrice(item['printSize'], item['frameStyle'], item['frameWidth'], item['matWidth'])}<span id="price-"></span></div>\n` +
        `    </div>`;
    let removeButtonTemplate = `<button class="cart-remove" id="remove-button-${item['objectID']}"></button>`;
    let removeButtonNode = createNodeFromHTMLString(removeButtonTemplate);
    removeButtonNode.addEventListener('click', );
    let museumLabelNode = createNodeFromHTMLString(labelTemplate);
    museumLabelNode.appendChild(removeButtonNode);


    nodeItem.appendChild(museumLabelNode);

    return nodeItem;
}


window.onload = function () {

    displayCart();

    async function displayCart() {
        await NavigationBar.displayCartSize();
        let cart = await getCart();
        if (cart.length !== 0) {
            let item;
            while (cart.length !== 0) {
                item = cart.shift();
                console.log(item);
                appendCartItemToPage(item);
            }
           let button  =  document.getElementById('checkout-button');
           button.disabled = false;
           button.onclick =
               

        }

        displayTotalCosts();
    }
};


async function appendCartItemToPage(item = null) {
    if (item === null) 

    let cartItemNode = await createCartItemNode(item);
    let cartContainer = document.getElementById('cart');
    cartContainer.prepend(cartItemNode);
    let removeButton = document.getElementById(`remove-button-${item['objectID']}`);
    /* removeButton.addEventListener('click', ev => {
         newRemoveCartItem(removeButton, item['objectID']);
     });*/

    let size;
    switch (item['printSize']) {
        case 'S':
            size = 'Small';
            break;
        case 'M':
            size = 'Medium';
            break;
        
        
    }

    if (item['matWidth'] === 0)  else {
        document.getElementById(`frame-description-${item['objectID']}`).textContent = `${size} print in a ${item['frameWidth'] / 10} cm ${item['frameStyle']} frame with a ${item['matWidth'] / 10} cm ${item['matColor']} mat.`;

    }

}



export 




export async function getCart() {
    let cart = localStorage.getItem('cart');
    if (cart === null) 
    cart = await JSON.parse(cart);
    cart = cart.map(item => {
        return new CartItem(item['objectID'],
            item['printSize'],
            item['frameStyle'],
            item['frameWidth'],
            item['matColor'],
            item['matWidth']);
    });
    return cart;
}



/*===================================================DIANA'S CODE===================================================*/


export async function cartSize() {
    const cart = await getCart();
    return cart.length;
}

/*
async function displayCart() {
    displayTotalCosts();
}

export async function getTotalCosts() {
    const cart = await getCart();
    let item;
    let totalCosts = 0;
    console.log('cartSIZE');
    console.log(cart.length);
    for (let i = 0; i < cart.length; i++) {
        item = cart[i];
        console.log('=========');
        console.log('ITEM');
        console.log(item);
        console.log('=========');
        console.log('ITEM costs');
        console.log(getCost(item));
        console.log('=========');
        console.log('CURR TOTAL COSTS');
        totalCosts += parseFloat(getCost(item));
        console.log(totalCosts);
    }
    return totalCosts.toFixed(2);
}

async function displayTotalCosts() {
    const totalCosts = await getTotalCosts();
    let htmlTemplateElementCart = document.getElementById('price-total');
    if (totalCosts > 0) {
        htmlTemplateElementCart.innerHTML = totalCosts;
        htmlTemplateElementCart.innerText = totalCosts;
    }
}

function getCost(item) {
    return fr.calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
}

/*===================================================DIANA'S CODE END==================================================*/
class CartItem {
    constructor(objectID, printSize, frameStyle,
                frameWidth, matColor, matWidth) {
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameStyle = frameStyle;
        this.frameWidth = frameWidth;
        this.matColor = matColor;
        this.matWidth = matWidth;
    }
}

class Artwork {
    constructor(id, image, artist, title, date) {
        this.id = id;
        this.image = image;
        this.artist = artist;
        this.title = title;
        this.date = date;
    }
}

import * as Frame from '/frame.js';
import * as ArtworkCache from './artwork-cache.js';
import * as Cart from './cart.js';
import * as NavigationBar from './navigation-bar.js';


class Art {
  constructor(id, image, artist, title, date) {
    this.id = id;
    this.image = image;
    this.artist = artist;
    this.title = title;
    this.date = date;
  }
}


let img = document.getElementById('preview-image');
let form = document.getElementById("config-form");
let submitBtn = document.querySelector("button[type='submit']");

let frameWidthSlider = document.querySelector("input[name='frameWidthR']");
let frameWidthText = document.querySelector("input[name='frameWidth']");
let matWidthSlider = document.querySelector("input[name='matWidthR']");
let matWidthText = document.querySelector("input[name='matWidth']");

let printSizeRadios = document.querySelectorAll("input[name='printSize']");
let frameStyleRadios = document.querySelectorAll("input[name='frameStyle']");


window.onload = function () {
  NavigationBar.displayCartSize();
};

document.addEventListener('DOMContentLoaded', event => {
  const params = (new URL(document.location)).searchParams;

  if (params.has('objectID') && params.get('objectID').trim() !== "") {
    const objectID = params.get('objectID');
    retrieveImgData(objectID, params);
  }
})

submitBtn.addEventListener('click', )

form.addEventListener('submit', );

img.addEventListener('load', event => {

  setPrintSizeLabels();
  updateTotalSizeLabel();
  renderPreview();
})


frameWidthSlider.addEventListener("input", );


frameWidthText.addEventListener("change", );


matWidthSlider.addEventListener("input", );


matWidthText.addEventListener("change", );

for (var i = 0; i < printSizeRadios.length; i++) {
  printSizeRadios[i].addEventListener('change', );
}

for (var i = 0; i < frameStyleRadios.length; i++) {
  frameStyleRadios[i].onclick = addEventListener('change', );
}



async function retrieveImgData(imgID, params) {

  if (params.has('printSize') ) 

  let currentArt;
  let cachedArt = ArtworkCache.retrieve(imgID);
  if (cachedArt) {
    currentArt = new Art(cachedArt.objectID, cachedArt.image, cachedArt.artist, cachedArt.title, cachedArt.date);
  }

  ArtworkCache.store("currentArt", currentArt);

  document.getElementById('preview-image').src = currentArt.image;
  document.getElementById('preview-image').alt = currentArt.title;
  document.getElementById('image-label').innerHTML =
      `<span class="artist">${currentArt.artist}</span>
            <span class="title">${currentArt.title}</span>,
            <span class="date">${currentArt.date}</span>`;

}








function setPrintSizeLabels() {
  let defaultId = 'print-size-';
  let options = ['s', 'm', 'l'];
  let values = Frame.getPrintSizes(document.getElementById('preview-image'));

  for (i = 0; i < options.length; i++) {
    let optionId = defaultId + options[i];
    let textLabel = options[i].slice(0,1).toUpperCase() + options[i].slice(1);
    let key = options[i].slice(0,1).toUpperCase();
    let wText = values[key][0];
    let hText = values[key][1];
    document.getElementById(optionId).labels[0].innerHTML = `${textLabel}<br>${wText} × ${hText} cm`;
  }
}


function getCurrentConfig() {
  let printSize = document.querySelector(`input[name=printSize]:checked`).value;
  let frameStyle = document.querySelector(`input[name=frameStyle]:checked`).value;
  let frameWidth = parseFloat(document.querySelector("input[name='frameWidth']").value);
  let matWidth = parseFloat(document.querySelector("input[name='matWidth']").value);
  let matColor = document.querySelector(`input[name=matColor]:checked`).value;

  return {
    printSize: printSize,
    frameStyle: frameStyle,
    frameWidth: frameWidth,
    matColor: matColor,
    matWidth: matWidth
  }

}



function updateTotalSizeLabel() {
  let current = getCurrentConfig();
  let currentRadioSize = document.querySelector('input[name=printSize]:checked', '#segmented');
  let sizes = Frame.getPrintSizes(document.getElementById('preview-image'))[currentRadioSize.value];
  let wText = sizes[0] + current.frameWidth + current.matWidth;
  let hText = sizes[1] + current.frameWidth + current.matWidth;

  document.getElementById('total-size').innerHTML = `${wText} × ${hText} cm`;
}

function renderPreview() {
  let current = getCurrentConfig();
  let img = document.getElementById('preview-image');
  let container = document.getElementById('preview-container');
  Frame.render(img, container, current.printSize, current.frameStyle, current.frameWidth * 10, current.matColor, current.matWidth *  10);
}


export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;
    console.log(`natW: ${w}`);
    console.log(`natH: ${h}`);

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    console.log(`${printSize} *W: ${w}`);
    console.log(`${printSize} *H: ${h}`);

    console.log('frameWidth: ' + frameWidth);
    console.log('printSize: ' + printSize);
    console.log('matColor: ' + matColor);
    console.log('MatWidth: '+ matWidth);


    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }
    console.log(`offsetWidth: ${x}`);

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    console.log(`IMG HEIGHT: ${img.height} for matWdth: ${matWidth}, frameWidth: ${frameWidth}, x: ${x}`);
    console.log(`IMG WIDTH: ${img.width}`);
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    if (frameStyle === 'classic')  else if (frameStyle === 'natural') {
        price += frameWidth/10 * 0.8;
    } else if (frameStyle === 'shabby')  else {
        price += frameWidth/10 * 0.85;
    }

    price += matWidth/10 * 0.05;

    if (printSize === 'M') {
        price = price * 2;
    } else if (printSize === 'L') 

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
import * as Cart from './cart.js';
export async function displayCartSize() {
    let htmlTemplateElement = document.getElementById('cart-link');
    const size = await Cart.cartSize();
    console.log('=========');
    console.log(size);
    if (size > 0){
        htmlTemplateElement.innerText = `Cart (${size})`;
    }

}
import * as ArtworkCache from './artwork-cache.js'
import * as NavigationBar from './navigation-bar.js';
window.onload = function () {
NavigationBar.displayCartSize();

    function getUrlVars() {
        var vars = [];
        let i = 0;
        var parts = window.location.href.replace(/([^+?=]+)=?([^+]*)/gi, function ( value) {
           vars[i]=value;
           i=i+1;
        });
        return vars;
    }
    const keywords = getUrlVars();

    console.log(keywords);
    if (keywords.length > 0 && keywords[0].includes("?q=")){
        var searchinfo = document.getElementById("search-info");
        keywords[0] = keywords[0].split("=")[1];
        searchinfo.innerHTML = `Searching for “`+ keywords.join(" ") +`”...`;
        console.log(keywords);
        gallerysearch(keywords);

    }

};


    

    const form = document.querySelector('#searchsec form');

    btn();

    function btn() {
        form.addEventListener("submit", );
    }

class Art{
    constructor(id, image, artist,title, date){
        this.id = id;
        this.image = image;
        this.artist= artist;
        this.title = title ;
        this.date=date;

    }

}
async function gallerysearch(keywords) {

    const foundartwork = await getArtwork(keywords);

    var searchinfo = document.getElementById("search-info");

    var kws = keywords.join(" ");
    kws = kws.replace("+"," ");
    if(foundartwork){

        if (foundartwork.length === 1)else {
            searchinfo.innerHTML = `Found `+ foundartwork.length +` artworks for “`+kws+`”`;
        }



        const gallery = document.getElementById("gallery");

        gallery.innerHTML = '';
        let i = 0 ;
        while (i < foundartwork.length){
            gallery.appendChild(createArtworkElem(foundartwork[i]));
            i = i+1;
        }
    }




}



function createArtworkElem(artwork){
      const elem = document.createElement("class");
    console.log(artwork);
    console.log(artwork.id);
    console.log(artwork.image);
    console.log(artwork.artist);
    console.log(artwork.title);
    elem.innerHTML =`<div class="thumb">
        <a href="./config.html?objectID=${artwork.id}" id="${artwork.id}">
          <img src="${artwork.image}" alt="" >
          <div class="museum-label">
            <span class="artist">${artwork.artist}</span>
            <span class="title">${artwork.title}</span>,
            <span class="date">${artwork.date}</span>
          </div>
        </a>
      </div>`;

    return elem;

}




async function getArtwork(keywords) {

    let artwork = ArtworkCache.retrieve(keywords);
    if(artwork)  else {
        function serializeKeywords(keywords){
            return keywords.join("+");
        }

        const args = (serializeKeywords(keywords)).replace(",","%2C");
        console.log(`https://collectionapi.metmuseum.org/public/collection/v1/search?q=${args}&hasImages=true`);
        const response = await fetch(`https://collectionapi.metmuseum.org/public/collection/v1/search?q=${args}&hasImages=true`);


        const rawdata = await response.json();

        var returnlist = [];
        if(rawdata.total === 0) else {
        returnlist = await getbyids(rawdata.objectIDs, rawdata.total);
        return returnlist;
        }
    }}

async function getbyids( objectids, length) {

        function skip(artwork){
            if (artwork.primaryImageSmall)

        }


    var i = 0 ;
    var returnlist = [];

    while (i<100 && i< length){

        let artwork = ArtworkCache.retrieve(objectids[i]);
        if(artwork) {
            if (!skip(artwork)){
                console.log('=========');
                console.log('OBJECTID');
                console.log(artwork.objectID);
                console.log(artwork.id);
                console.log('=========');
                returnlist.push(new Art(artwork.id, artwork.image, artwork.artist, artwork.title, artwork.date));
            }
        }

        i=i+1;
    }
    return returnlist;
}





