export class ArtAPI{
    constructor(){
        this.url = "https://collectionapi.metmuseum.org/public/collection/v1/"
    }

   

    
}
import {ArtAPI} from "./artCollectionApi.js";
import {render, calculatePrice} from "./frame.js";
import {createContainer, createArtworkLabel, createTextNode} from "./htmlConstructsAPI.js";

const api = new ArtAPI();
let totalPrice;


document.addEventListener('DOMContentLoaded', async() => {
    const checkoutButton = document.getElementById('checkout-button');
    checkoutButton.addEventListener('click',);
    if (!localStorage.getItem('cart'))  else {
        await createContent();
        await buttonEvent();
    }
});

async function createContent() {
    let cart = await JSON.parse(localStorage.getItem('cart'));
    let countOfItems = cart.length;
    let i = 0;
    totalPrice= 0;
    for (let item of cart) 
    localStorage.setItem('cart', JSON.stringify(cart));
    totalPrice = totalPrice.toFixed(2);
    const totalP = document.getElementById('price-total');
    totalP.innerHTML = `${totalPrice}`;

    const cartLink = document.getElementById('cart-link');
    cartLink.innerHTML = 'Cart ('+`${countOfItems}`+')';
}

async function buttonEvent() {
    let buttons = document.querySelectorAll(".cart-remove");
    buttons.forEach();
}

import {calculatePrice, render, getPrintSizes} from "./frame.js";
import {ArtAPI} from "./artCollectionApi.js";
import {createArtworkLabel} from "./htmlConstructsAPI.js";

const form = document.getElementById('config-form');
const sizeLabels = document.querySelectorAll('.segmented label');

const price = document.getElementById('price');
const totalSize = document.getElementById('total-size');

const cartLink = document.getElementById('cart-link');

const imgContainer = document.getElementById('preview-container');
const img = document.getElementById('preview-image');
const imgLabel = document.getElementById('image-label');

const api = new ArtAPI();

coupleSliderWithNumber(form.matWidth, form.matWidthR);
coupleSliderWithNumber(form.frameWidth, form.frameWidthR);

limitWidths();

const formElementNames = ['frameWidth', 'matWidth', 'printSize', 'frameStyle', 'matColor'];
for(let elementName of formElementNames) {
    Array.from(document.querySelectorAll(`input[name=${elementName}`)).map(
        el => el.addEventListener('change', 
        ))
}

form.addEventListener('submit', );

for (let param of window.location.search.substr(1).split("&").map(param => param.split("="))) { //param is string[][] containing key, value pairs
    switch (param[0]) {
        case "objectID" :
            form['object-id'].value = param[1];
            break;
        
        
        
        
        
        
        
    }
}

loadImageData();
setPrice();
updateCart();



function coupleSliderWithNumber(number, slider) {
    number.addEventListener('input', );
    slider.addEventListener('input', );
}

function limitWidths() {
    form.matWidth.addEventListener('change', );
    form.frameWidth.addEventListener('change', );
}





async function loadImageData() {
    let id = form['object-id'].value;
    const artwork = await api.getObjectById(id);
    if (!artwork || artwork.message === 'ObjectID not found')  else {
        if(!window.localStorage.getItem(id))
        img.src = artwork.primaryImageSmall;
        imgLabel.replaceWith(createArtworkLabel(artwork));
        img.addEventListener('load', _ => {
            renderImg();
            setSizeOptions();
            setTotalSize();
        });
    }
}

function setPrice() {
    price.innerText = `€ ${calculatePrice(form.printSize.value, form.frameStyle.value, form.frameWidth.valueAsNumber * 10, form.matWidth.valueAsNumber * 10).toFixed(2)}`;
}

function renderImg() {
    render(img, imgContainer, form.printSize.value, form.frameStyle.value, form.frameWidth.value * 10, form.matColor.value, form.matWidth.value * 10);
}

function setSizeOptions() {
    let sizes = getPrintSizes(img);
    let sizeNames = {'S' : 'Small', 'M' : 'Medium', 'L' : 'Large'};
    for (let size of sizeLabels) {
        size.innerHTML = `${sizeNames[size.control.value]}<br> ${parseInt(sizes[size.control.value][0])/10} × ${parseInt(sizes[size.control.value][1])/10} cm`;
    }
}

function setTotalSize() {
    let sizes = getPrintSizes(img)[form.printSize.value];
    sizes = sizes.map(size => parseInt(size) / 10);
    sizes = sizes.map(size => Math.round(10 * (size + form.frameWidth.valueAsNumber + form.matWidth.valueAsNumber + Number.EPSILON)) / 10);
    totalSize.innerText = `${sizes[0]} x ${sizes[1]} cm`;
}

async function updateCart(){
    let cart = await JSON.parse(localStorage.getItem('cart'));
    if(cart){
        cartLink.innerText = `Cart (${cart.length})`;
    }
}export 

export 

export 


export 

export 

export 

export import { ArtAPI } from "./artCollectionApi.js";
import {createArtworkLabel, createArtworkImage, createContainer} from "./htmlConstructsAPI.js";

document.addEventListener('DOMContentLoaded', async event => {
    let searchQuery = (new URL(document.location)).searchParams.get('q');
    if (!searchQuery ) {
        await artHighlights();
        return;
    }});

const api = new ArtAPI();
const input = document.getElementById("search");
const form = document.querySelector("main .search-form");
const searchHeader = document.getElementById("search-info");
const gallery = document.getElementById("gallery");
form.addEventListener("submit", );

updateCart();



async function artHighlights() {
    const data = await fetch("highlights.json");
    const highlights = await data.json();
    await createContent(highlights["highlights"]);
}

async function createContent(ids = []) {
    if(ids.length < 1)
    let index = 0, entries = [], entry;
    for (const id of ids) {
        entries.push(api.getObjectById(id));
    }
    for(const promise of entries){
        entry = await promise;
        if(!window.localStorage.getItem(entry["objectID"]))
        const image = createArtworkImage(entry, index++);
        const label = createArtworkLabel(entry);
        const link = createContainer([image, label], "a", "",
            [ ["href", `config.html?objectID=${entry.objectID}`], ["id", "object-" + index] ]);
        gallery.appendChild(createContainer([link], "div", "thumb"));
    }
}

async function updateCart() {
    let cart = await JSON.parse(localStorage.getItem('cart'));
    if (cart) {
        document.getElementById('cart-link').innerText = `Cart (${cart.length})`;
    }
}
