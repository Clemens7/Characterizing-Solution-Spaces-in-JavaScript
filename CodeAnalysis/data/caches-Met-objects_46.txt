export class ArtAPI{
    constructor(){
        this.url = "https://collectionapi.metmuseum.org/public/collection/v1/"
    }

   

    
}
import {ArtAPI} from "./artCollectionApi.js";
import {render, calculatePrice} from "./frame.js";
import {createContainer, createArtworkLabel, createTextNode} from "./htmlConstructsAPI.js";

const api = new ArtAPI();
let totalPrice;


document.addEventListener('DOMContentLoaded', async() => {
    const checkoutButton = document.getElementById('checkout-button');
    checkoutButton.addEventListener('click',);
    if (!localStorage.getItem('cart'))  else {
        await createContent();
        await buttonEvent();
    }
});

async function createContent() {
    let cart = await JSON.parse(localStorage.getItem('cart'));
    let countOfItems = cart.length;
    let i = 0;
    totalPrice= 0;
    for (let item of cart) {
        let toDisplay;
        if (! await localStorage.getItem(item.objectID))else{
            toDisplay = await JSON.parse(localStorage.getItem(item.objectID));
        }
        item.cartID = i;
        const image = createContainer("", "img", "cart-thumb",
            [["src", toDisplay["primaryImageSmall"]], ["alt", toDisplay["objectName"]], ["id", `preview-${i}`]]);
        let museumLabel = createArtworkLabel(toDisplay);
        let frameDes = document.createElement("span");
        frameDes.className = "frame-description";
        frameDes.innerText = getFrameDescription(item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth);

        museumLabel.appendChild(document.createElement("br"));
        museumLabel.appendChild(document.createElement("br"));

        museumLabel.appendChild(frameDes);

        let price = createTextNode(calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2), "span", "", [["id", `price ${i}`]]);
        let cartPrice = createContainer("", "div", "cart-price", []);
        cartPrice.innerText = "€";
        cartPrice.appendChild(price);

        let rmvButton = document.createElement("button");
        rmvButton.className = "cart-remove";

        museumLabel.appendChild(cartPrice);
        museumLabel.appendChild(rmvButton);
        const cart = document.getElementById('cart');

        const linkToCart = item.matWidth !== 0 ? createContainer([image], "a", "", [["href", `config.html?objectID=${item.objectID}&printSize=${item.printSize}&frameWidth=${item.frameWidth}&frameStyle=${item.frameStyle}&matWidth=${item.matWidth}&matColor=${item.matColor}`]])
            ;
        const imagePreview = createContainer([linkToCart], "div", "cart-preview", [["id", `preview-container-${i}`]]);
        const cartItem = createContainer([imagePreview, museumLabel], "div", "cart-item");
        cart.prepend(cartItem);

        image.addEventListener('load', );
        i++;
        totalPrice+= calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
    }
    localStorage.setItem('cart', JSON.stringify(cart));
    totalPrice = totalPrice.toFixed(2);
    const totalP = document.getElementById('price-total');
    totalP.innerHTML = `${totalPrice}`;

    const cartLink = document.getElementById('cart-link');
    cartLink.innerHTML = 'Cart ('+`${countOfItems}`+')';
}
function getFrameDescription(printSize, frameStyle, frameWidth, matColor, matWidth) {
    return (printSize === 'S' ? 'Small ' : printSize === 'M' ? 'Medium ' )
        + (`print in a ${frameWidth / 10} cm ${frameStyle} frame`) + (matWidth ? ` with a ${matWidth / 10} cm ${matColor} mat` ) + '.';
}
async function buttonEvent() {
    let buttons = document.querySelectorAll(".cart-remove");
    buttons.forEach(btn => btn.addEventListener('click', ));
}

import {calculatePrice, render, getPrintSizes} from "./frame.js";
import {ArtAPI} from "./artCollectionApi.js";
import {createArtworkLabel} from "./htmlConstructsAPI.js";

const form = document.getElementById('config-form');
const sizeLabels = document.querySelectorAll('.segmented label');

const price = document.getElementById('price');
const totalSize = document.getElementById('total-size');

const cartLink = document.getElementById('cart-link');

const imgContainer = document.getElementById('preview-container');
const img = document.getElementById('preview-image');
const imgLabel = document.getElementById('image-label');

const api = new ArtAPI();

coupleSliderWithNumber(form.matWidth, form.matWidthR);
coupleSliderWithNumber(form.frameWidth, form.frameWidthR);

limitWidths();

const formElementNames = ['frameWidth', 'matWidth', 'printSize', 'frameStyle', 'matColor'];
for(let elementName of formElementNames) {
    Array.from(document.querySelectorAll(`input[name=${elementName}`)).map(
        el => el.addEventListener('change', 
        ))
}

form.addEventListener('submit', );

for (let param of window.location.search.substr(1).split("&").map(param => param.split("="))) { //param is string[][] containing key, value pairs
    switch (param[0]) {
        case "objectID" :
            form['object-id'].value = param[1];
            break;
        
        
        
        
        
        
        
    }
}

loadImageData();
setPrice();
updateCart();



function coupleSliderWithNumber(number, slider) {
    number.addEventListener('input', );
    slider.addEventListener('input', );
}

function limitWidths() {
    form.matWidth.addEventListener('change', );
    form.frameWidth.addEventListener('change', );
}





async function loadImageData() {
    let id = form['object-id'].value;
    const artwork = await api.getObjectById(id);
    if (!artwork || artwork.message === 'ObjectID not found')  else {
        if(!window.localStorage.getItem(id))
        img.src = artwork.primaryImageSmall;
        imgLabel.replaceWith(createArtworkLabel(artwork));
        img.addEventListener('load', _ => {
            renderImg();
            setSizeOptions();
            setTotalSize();
        });
    }
}

function setPrice() {
    price.innerText = `€ ${calculatePrice(form.printSize.value, form.frameStyle.value, form.frameWidth.valueAsNumber * 10, form.matWidth.valueAsNumber * 10).toFixed(2)}`;
}

function renderImg() {
    render(img, imgContainer, form.printSize.value, form.frameStyle.value, form.frameWidth.value * 10, form.matColor.value, form.matWidth.value * 10);
}

function setSizeOptions() {
    let sizes = getPrintSizes(img);
    let sizeNames = {'S' : 'Small', 'M' : 'Medium', 'L' : 'Large'};
    for (let size of sizeLabels) {
        size.innerHTML = `${sizeNames[size.control.value]}<br> ${parseInt(sizes[size.control.value][0])/10} × ${parseInt(sizes[size.control.value][1])/10} cm`;
    }
}

function setTotalSize() {
    let sizes = getPrintSizes(img)[form.printSize.value];
    sizes = sizes.map(size => parseInt(size) / 10);
    sizes = sizes.map(size => Math.round(10 * (size + form.frameWidth.valueAsNumber + form.matWidth.valueAsNumber + Number.EPSILON)) / 10);
    totalSize.innerText = `${sizes[0]} x ${sizes[1]} cm`;
}

async function updateCart(){
    let cart = await JSON.parse(localStorage.getItem('cart'));
    if(cart)
}export 

export 

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;
    price += 0.05 * matWidth/10;
    if(frameStyle === 'classic') else if (frameStyle === 'natural'){
        price += 0.8 * frameWidth/10;
    } else if (frameStyle === 'shabby') else {
        price += 0.85 * frameWidth/10;
    }
    if(printSize === 'M'){
        price *= 2;
    } else if(printSize === 'L')
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
function node(element, elementClass, content, text, attributes) {
    const newElement = document.createElement(element);
    if(elementClass){
        newElement.className = elementClass;
    }
    for (let i in attributes){
        if(attributes[i][0] && attributes[i][1]){
            newElement.setAttribute(attributes[i][0], attributes[i][1]);
        }
    }
    if(content){
        if(text){
            newElement.innerText = content;
        } else {
            for (let entry of content){
                newElement.appendChild(entry);
            }
        }
    }

    return newElement;
}

export function createContainer(content = [], element = "div", elementClass = "", attributes = [[]]){
    return node(element, elementClass, content, false, attributes);
}

export function createTextNode(content = "", element = "span", elementClass = "", attributes = [[]]){
    return node(element, elementClass, content, true, attributes);
}

export function createArtworkLabel(artwork){
    if(!artwork) 
    const artist = createTextNode( artwork["artistDisplayName"], "span", "artist",);
    const title = createTextNode(artwork["title"] + ", ", "span", "title");
    const date = createTextNode(artwork["objectDate"], "span", "date");
    return createContainer([artist, title, date], "div", "museum-label");
}

export import { ArtAPI } from "./artCollectionApi.js";
import {createArtworkLabel, createArtworkImage, createContainer} from "./htmlConstructsAPI.js";

document.addEventListener('DOMContentLoaded', async event => {
    let searchQuery = (new URL(document.location)).searchParams.get('q');
    if (!searchQuery || searchQuery.length < 1) 
    await artSearch(searchQuery);
});

const api = new ArtAPI();
const input = document.getElementById("search");
const form = document.querySelector("main .search-form");
const searchHeader = document.getElementById("search-info");
const gallery = document.getElementById("gallery");
form.addEventListener("submit", );

updateCart();

async function artSearch(queryParameter) {
    if (queryParameter === "null") 
    searchHeader.innerText = `Searching for “${queryParameter}”...`;
    const response = await api.getObjectsIdBySearchparameter(queryParameter);
    const ids = response["objectIDs"].slice(0, 100);
    const length = ids.length;
    await createContent(ids);
    searchHeader.innerText = `Found ${length} artwork${length !== 1 ? "s" } for “${queryParameter}”`;
}



async function createContent(ids = []) {
    if(ids.length < 1)
    let index = 0, entries = [], entry;
    for (const id of ids) {
        entries.push(api.getObjectById(id));
    }
    for(const promise of entries){
        entry = await promise;
        if(!window.localStorage.getItem(entry["objectID"]))
        const image = createArtworkImage(entry, index++);
        const label = createArtworkLabel(entry);
        const link = createContainer([image, label], "a", "",
            [ ["href", `config.html?objectID=${entry.objectID}`], ["id", "object-" + index] ]);
        gallery.appendChild(createContainer([link], "div", "thumb"));
    }
}

async function updateCart() {
    let cart = await JSON.parse(localStorage.getItem('cart'));
    if (cart) 
}
