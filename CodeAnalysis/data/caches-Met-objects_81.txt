import {SearchItem} from "./search-item.js";

export async function retrieve(objectID) {
    const key = objectID;
    if(key in localStorage) {
        console.log(`Retrieving ${key} from local storage`);
        return JSON.parse(localStorage[key]);
    }}




import {cart, Frame} from "./cart_objects.js";
import {calculatePrice, render} from "../frame.js";
import {retrieve} from "./cache.js";

async function displayCartItems() {
    const cartTotal = document.getElementsByClassName("cart-total")[0];
    const cartSection = document.getElementById("cart");
    const cartItems = cart.cartItems;

    removeGeneratedDom();

    let totalPrice = 0;
    for (let itemIndex in cartItems) {
        const cartItem = cartItems[itemIndex];
        const price = calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth);
        totalPrice += price;
        console.log(`Display index ${itemIndex}`);
        cartSection.insertBefore(await createFrameHtml(itemIndex, cartItem, price), cartTotal);
    }

    if (cartItems.length === 0) 

    document.getElementById("price-total").innerText = totalPrice.toFixed(2);
    console.log("Displayed Cart");
}

async function createFrameHtml(index, frame, priceAmount) {
    const object = await retrieve(frame.objectID);

    let cartItem = document.createElement("div");
    cartItem.setAttribute("class", "cart-item");

    let cartPreview =  document.createElement("div");
    cartPreview.setAttribute("class", "cart-preview");
    cartPreview.setAttribute("id",  `preview-container-${index}`);

    let link = document.createElement("a");
    link.setAttribute("href", `config.html?objectID=${frame.objectID}&printSize=${frame.printSize}&frameStyle=${frame.frameStyle}&frameWidth=${frame.frameWidth}&matColor=${frame.matColor}&matWidth=${frame.matWidth}`);

    let image = document.createElement("img");
    image.onload = (e) => render(image, document.getElementById(`preview-container-${index}`), frame.printSize, frame.frameStyle, frame.frameWidth, frame.matColor, frame.matWidth);
    image.setAttribute("class", "cart-thumb");
    image.setAttribute("src", object.image);
    image.setAttribute("id", `preview-${index}`);
    image.setAttribute("alt", object.title);

    let museumLabel = document.createElement("div");
    museumLabel.setAttribute("class", "museum-label");

    let div = document.createElement("div");

    let artist = document.createElement("span");
    artist.setAttribute("class", "artist");
    artist.innerText = object.artist;

    let title = document.createElement("span");
    title.setAttribute("class", "title");
    title.innerText = object.title;

    let date = document.createElement("span");
    date.setAttribute("class", "date");
    date.innerText = `, ${object.date}`;

    let frameDescription = document.createElement("span");
    frameDescription.setAttribute("class", "frame-description");
    frameDescription.innerText = generateFrameDescription(frame);

    let cartPrice = document.createElement("div");
    cartPrice.setAttribute("class", "cart-price");
    cartPrice.innerText = "€ ";

    let price = document.createElement("span");
    price.setAttribute("id", `price-${index}`);
    price.innerText = priceAmount.toFixed(2);

    let cartRemove = document.createElement("button");
    cartRemove.setAttribute("class", "cart-remove");
    cartRemove.onclick = ;

    cartItem.appendChild(cartPreview);
    cartPreview.appendChild(link);
    link.appendChild(image);

    cartItem.appendChild(museumLabel);
    museumLabel.appendChild(div);
    div.appendChild(artist);
    div.appendChild(title);
    div.appendChild(date);
    div.appendChild(document.createElement("br"));
    div.appendChild(document.createElement("br"));
    div.appendChild(frameDescription);

    museumLabel.appendChild(cartPrice);
    cartPrice.appendChild(price);

    museumLabel.appendChild(cartRemove);

    return cartItem;
}

function removeGeneratedDom() {
    document.getElementById("checkout-button").disabled = false;

    let items = document.getElementsByClassName("cart-item");
    while(items[0]) 

    let p = document.getElementById("cart-empty");
    if (p !== null) 
    console.log("removed existing generated DOM");
}

function generateFrameDescription(frame) {
    let text = "";
    switch (frame.printSize) {
        
        case "M":
            text="Medium";
            break;
        case "S":
            text="Small";
            break;
    }
    text += ` print in a ${frame.frameWidth/10} cm ${frame.frameStyle} frame`;
    if (frame.matWidth > 0) {
        text += ` with a ${frame.matWidth/10} cm ${frame.matColor} mat`;
    }
    return text + ".";
}

function addLinkToCheckout() {
    let checkout = document.getElementById("checkout-button");
    checkout.onclick = ;
}

addLinkToCheckout();
displayCartItems().then(() => cart.addOnChangeEvent(displayCartItems));import {cart} from "./cart_objects.js";

function displayCartCount() {
    const count = cart.count();
    let text = "Cart";
    if (count > 0) {
        text += ` (${count})`;
    }
    document.getElementById("cart-link").innerText = text;
    console.log("refreshed Cart Count");
}

displayCartCount();
cart.addOnChangeEvent(displayCartCount);export class Frame {
    
}

class Cart {

    constructor() {
        this._onChangeEvents = [];
        this._load();
        window.addEventListener('storage', );
    }

    addOnChangeEvent(event) {
        this._onChangeEvents.push(event);
    }

    

    _load() {
        let cart = window.localStorage.getItem("cart");
        if (cart !== null) {
            this._frames = JSON.parse(cart);
        }
        if (!Array.isArray(this._frames)) 
    }

    

    

    

    count() {
        return this._frames.length;
    }

    get cartItems() {
        return [...this._frames];
    }
}

export const cart = new Cart();import {render,calculatePrice} from "../frame.js";
import {cart} from "./cart_objects.js";

setEventListeners();

let urlParams2 = new URLSearchParams(window.location.search);
setOptionalParams(urlParams2.get('printSize'), urlParams2.get('frameStyle'), urlParams2.get('frameWidth'), urlParams2.get('matColor'), urlParams2.get('matWidth'));


function setOptionalParams(printSize, frameStyle, frameWidth, matColor, matWidth) {
    console.log(printSize);
    if (printSize != undefined) 
    if (frameStyle != undefined ) 
    if (frameWidth != undefined ) 
    if (matColor != undefined) 
    if (matWidth != undefined ) 
}



function setEventListeners() {

    let frameWidth = document.getElementsByName('frameWidth')[0];
    let frameWidthR = document.getElementsByName('frameWidthR')[0];
    let matWidth = document.getElementsByName('matWidth')[0];
    let matWidthR = document.getElementsByName('matWidthR')[0];
    let updateDomElements = document.querySelectorAll('[name="printSize"], [name="frameStyle"], [name="matColor"]');
    for (let element of updateDomElements) {
        element.addEventListener('click', );
    }

    let submit = document.getElementsByClassName('buy')[0];

    let changeFrameWidth = ;
    let changeFrameWidthR = ;
    let changeMatWidth = ;
    let changeMatWidthR = ;

    frameWidth.addEventListener("change", changeFrameWidth);
    frameWidthR.addEventListener("change", changeFrameWidthR);
    matWidth.addEventListener("change", changeMatWidth);
    matWidthR.addEventListener("change", changeMatWidthR);
    let form = document.getElementById('config-form');
    form.onsubmit = ;
    submit.addEventListener('click', );


}



export function updateDom() {
    let item = createConfigObject();
    let img = document.getElementById('preview-image');
    render(img,img.parentElement, item['printSize'], item['frameStyle'], item['frameWidth'], item['matColor'], item['matWidth']);
    let price = calculatePrice(item['printSize'], item['frameStyle'], item['frameWidth'], item['matWidth']);
    document.getElementById('price').innerText ="€ "+ price.toFixed(2);
}

function getSelected(name) {
    let elements = document.getElementsByName(name);
    let selected;
    for (let element of elements) {
        if (element.checked === true) selected = element;
    }
    return selected.value;
}

function createConfigObject(){
    let item = new Object();

    item['objectID'] = urlParams2.get('objectID');
    item['printSize'] = getSelected("printSize");
    item['frameStyle'] = getSelected("frameStyle");
    item['frameWidth'] = document.getElementsByName('frameWidth')[0].value;
    item['matColor'] = getSelected('matColor');
    item['matWidth'] = document.getElementsByName('matWidth')[0].value;

    return item;
}import {getPrintSizes} from "../frame.js";
import {updateDom} from "./config.js";
import {retrieve} from "./cache.js";

let imgTag = document.getElementById('preview-image');
let urlParams = new URLSearchParams(window.location.search);
setIMG(urlParams.get('objectID'));

let img = document.getElementById('preview-image');
img.addEventListener("load", function () {
    let imgSizes = getPrintSizes(imgTag);
    console.log(imgSizes);
    console.log("hello");
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${imgSizes['S'][0]} × ${imgSizes['S'][1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${imgSizes['M'][0]} × ${imgSizes['M'][1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${imgSizes['L'][0]} × ${imgSizes['L'][1]} cm`;
    updateDom();
});

async function setIMG(objectid) {
    console.log(objectid);
    if (objectid == undefined) 
    let museumResponse = await retrieve(objectid);
    console.log(museumResponse);
    console.log("image");
    console.log(imgTag);
    let picture = museumResponse.image;
    if (picture == undefined) 
    console.log("hello");
    imgTag.src = picture;
    let imgLabel = document.getElementById('image-label');
    let test = createLabel(museumResponse.artist,museumResponse.title,museumResponse.date);
    imgLabel.innerHTML = test;

}

function createLabel(artist, title, time) {
    return `<p><b>${artist}</b></p>
                 <div><em>${title}, </em><span>${time}</span></div>`;
}
export 

export function setAttributes(element, attributes) {
    for(let key in attributes) {
        if(typeof(attributes[key]) === 'object')  else {
            element[key] = attributes[key];
        }
    }
    return element;
}

export function textElement(tag, text) {
    const element = document.createElement(tag);
    element.innerText = text;
    return element;
}

export function container(elements, tag='div') {
    const container = document.createElement(tag);
    for(let element of elements) {
        container.appendChild(element);
    }
    return container;
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    } else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    } else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30.0;

    let styleFactor = 0.0;
    if(frameStyle === 'classic')
    else if(frameStyle === 'natural'){styleFactor = 0.8;}
    else if(frameStyle === 'shabby')
    else if(frameStyle === 'elegant'){styleFactor = 0.85;}

    price += frameWidth * styleFactor;
    price += 0.05 * matWidth;

    let priceFactor = 1.0;
    if(printSize === 'S') priceFactor = 1.0;
    if(printSize === 'M') priceFactor = 2.0;
    if(printSize === 'L') 

    price *= priceFactor;

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
export class SearchItem {
    
}

export var SearchParser = {
    serialize : ,
    parse : 
};
import * as DOM from './dom-helpers.js';
import * as Cache from './cache.js';
import {SearchParser} from './search-item.js';

const searchInfo = document.getElementById("search-info");
const artworkLimit = 100;
readGETParameter();

function readGETParameter(){
    const url = new URL(window.location.href);
    const query = url.searchParams.get('q');
    loadArtworks(query);
}

async function retrieveArtworks(query) {
    console.log(`Searching for "${query}"`);
    try {
        const url = api_search(query);
        const response = await fetch(url);
        const rawData = await response.json();
        const result = await rawData.objectIDs;
        return result ? result ;
    }}

async function loadArtworks(query){
    const gallery = document.querySelector(".gallery");
    gallery.innerHTML = '';

    if (query) {
        searchInfo.innerText = `Searching for “${SearchParser.parse(query)}”...`;
    }
    let objectIDs = await getObjectIDsFromQuery(query);
    if (query) {
        let artworkText = objectIDs.length === 1  : 'artworks';
        searchInfo.innerText = `Found ${objectIDs.length} ${artworkText} for “${SearchParser.parse(query)}”`;
    }

    for (let objectID of objectIDs.slice(0,artworkLimit)) {
        let artwork = await Cache.retrieve(objectID);
        gallery.appendChild(createEntry(artwork));
    }
}

async function getObjectIDsFromQuery(query){
    if (!query)  else {
        searchInfo.innerText = `Searching for “${query}”...`;
        const result = await retrieveArtworks(query);
        searchInfo.innerText = `Found ${result.length} artworks for “${query}”`;
        return result;
    }}

function createEntry(searchItem){
    return DOM.setAttributes(DOM.container([createAContainer(searchItem)]), {className: 'thumb'});
}

function createAContainer(searchItem){
    return DOM.setAttributes(DOM.container([
        DOM.setAttributes(document.createElement('img'), {src: searchItem.image, alt: searchItem.title, id: 'object-image-' + searchItem.id}),
        DOM.setAttributes(DOM.container([
            DOM.setAttributes(DOM.textElement('span', searchItem.artist), {className: 'artist'}),
            DOM.setAttributes(DOM.textElement('span', searchItem.title), {className: 'title'}),
            DOM.setAttributes(DOM.textElement('span', ', ')),
            DOM.setAttributes(DOM.textElement('span', searchItem.date), {className: 'date'})]
        ), {className: 'museum-label'})
    ], 'a'), {href: './config.html?objectID=' + searchItem.id, id: 'object-' + searchItem.id});
}

function api_search(query) {
    return `https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=${query}`;
}
