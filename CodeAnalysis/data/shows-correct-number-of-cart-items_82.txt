let storage = window.localStorage;
const artworkKey = 'cache';
const cartKey = 'cart';

export 

export 
export function getStorageCart() {

    let cart = JSON.parse(storage.getItem(cartKey));
    if (cart === null)  else {
        return cart;
    }
}

export function getCartLength() {
    let cart = JSON.parse(storage.getItem(cartKey));
    if (cart === null)  else {
        return cart.length;
    }
}

export 

import {calculatePrice, render} from "../frame.js";
import {getStorageCart, getCartLength, getStoredObject, cacheObject} from "./cache.js";
import {retrieveObject} from "./met.js";


const section = document.getElementById("cart");

const cartTotal = document.createElement("div");
	cartTotal.className = "cart-total";
	cartTotal.innerHTML = "<div class=\"price\">Total: € <span id=\"price-total\">0</span></div>\n" + "<button type=\"button\" id=\"checkout-button\" disabled=\"true\">Checkout</button>";

const noItems = document.createElement("p");
	noItems.style = "margin: 50px 0";
	noItems.innerText = "There are no items in your shopping cart.";


loadPage();


function loadPage(){
	let cacheCart = getStorageCart();
	document.querySelector('#cart-link').innerHTML = ((getCartLength() === 0) ? "Cart" );
	if (cacheCart.length !== 0)  else {
		section.append(noItems);
		section.append(cartTotal);
	}
}
















const ONCE = { once: true };

export 

export 

export 

export 

export 

export 
import { whenImageLoaded, arrayQuerySelector, navigate, redirect } from './configutils.js';
import { BoundForm } from './forms.js';
import { getPrintSizes, render, calculatePrice } from '../frame.js';
import {getStoredObject} from "./cache.js";
import {retrieveObject} from "./met.js";
import {cacheObject} from "./cache.js";
import {storeInCart} from "./cache.js";
import {getCartLength} from "./cache.js";

document.querySelector('#cart-link').innerHTML = ((getCartLength() === 0) ? "Cart" );
const search = new URLSearchParams(window.location.search);
const objectID = search.get('objectID');
if (!objectID) 
const keys = ['printSize', 'frameStyle', 'frameWidth', 'matColor', 'matWidth'];
const form = setupForm(document.querySelector('#config-form'), search);
updatePrice();
const object$ = getObject(+objectID);
object$.then(object => setupPreview(object), );
form.element.addEventListener('change', updatePreview);
form.element.addEventListener('change', updatePrice);
form.element.addEventListener('submit', addToCart);

function getObject(objectID) {
  let artwork = getStoredObject(objectID);
  if (artwork !== null) {
    return Promise.resolve(artwork);
  }
}



function setupForm(element, initialValues) {
  const form = new BoundForm(element);
  for (const key of keys) {
    let value = initialValues.get(key);
    if (value !== null) 
  }
  return form;
}

function setupPreview(object) {
  const preview = document.querySelector('#preview-container');
  const [image, artist, title, date] = arrayQuerySelector(preview, 'img', '.artist', '.title', '.date');
  image.setAttribute('src', object.primaryImageSmall);
  image.setAttribute('alt', object.title);
  artist.innerText = object.artistDisplayName;
  title.innerText = object.title;
  date.innerText = object.objectDate;
  whenImageLoaded(image).then(() => updatePreview());
}

function updatePreview() {
  const container = document.querySelector('#preview-container');
  const img = document.querySelector('#preview-image');
  const sizes = getPrintSizes(img);
  updatePrintSizes(img, sizes);
  const value = form.getValue();
  value.frameWidth *= 10;
  value.matWidth *= 10;
  updateTotalSize(value, sizes);
  const params = keys.map(key => value[key]);
  render(img, container, ...params);
}

function updatePrintSizes(img, sizes) {
  for (const [size, [width, height]] of Object.entries(sizes)) {
    outputDimensions(`#print-size-${size.toLowerCase()}-label output`, width, height);
  }
}

function updateTotalSize(value, sizes) {
  let [width, height] = sizes[value.printSize];
  const added = 2 * (value.frameWidth + value.matWidth);
  width += added;
  height += added;
  outputDimensions('#total-size output', width, height);
}

function outputDimensions(selector, width, height) {
  document.querySelector(selector).innerText = `${width / 10} × ${height / 10}`;
}

function updatePrice() {
  const output = document.querySelector('#price');
  const { printSize, frameStyle, frameWidth, matWidth } = form.getValue();
  const price = calculatePrice(printSize, frameStyle, frameWidth * 10, matWidth * 10).toFixed(2);
  output.innerText = `€ ${price}`;
}
import { clamp } from './configutils.js';

export class BoundForm {
  
  constructor(element) {
    this.element = element;
    this.fieldsets = new Map();
    const fieldsets = element.querySelectorAll('fieldset[data-type]');
    for (const fieldset of fieldsets) {
      const key = fieldset.getAttribute('data-key') ;
      const type = fieldset.getAttribute('data-type');
      let wrapper;
      switch (type) {
        case 'radio':
          wrapper = new RadioFieldset(this, fieldset);
          break;
        case 'number+range':
          wrapper = new NumberRangeFieldset(this, fieldset);
          break;
        
      }
      this.fieldsets.set(key, wrapper);
    }
  }
  
  
  
  getValue() {
    const result = {};
    for (const [key, fieldset] of this.fieldsets) {
      result[key] = fieldset.getValue();
    }
    return result;
  }
}

class Fieldset {
  
  constructor(form, element) {
    this.form = form;
    this.element = element;
  }
  
}

class RadioFieldset extends Fieldset {
  
  constructor(form, element) {
    super(form, element);
    this.options = new Map();
    for (const radioInput of element.querySelectorAll('input[type="radio"]')) {
      const value = radioInput.value;
      this.options.set(value, radioInput);
    }
  }
  
  
  
  getValue() {
    for (const [value, input] of this.options) {
      if (input.checked) {
        return value;
      }
    }}
  
}

class NumberRangeFieldset extends Fieldset {
  
  constructor(form, element) {
    super(form, element);
    this.numberInput = element.querySelector('input[type="number"]');
    this.rangeInput = element.querySelector('input[type="range"]');
    this.constraints = Object.fromEntries(['min', 'max', 'step'].map(c => [c, +this.numberInput.getAttribute(c)]));
    element.addEventListener('input', );
    element.addEventListener('change', );
  }
  
  
  
  getValue() {
    return +this.numberInput.value;
  }
  
  
  
}
import { round } from './scripts/configutils.js';

export 

export 

const baseCost = 30;
const frameStyleCosts = {
    'classic': 0.1,
    'natural': 0.08,
    'shabby': 0.09,
    'elegant': 0.085,
};
const matCost = 0.005;

export 
const URLID = 'https://collectionapi.metmuseum.org/public/collection/v1/objects/';
const URLIMAGE = '"https://images.metmuseum.org/CRDImages/ep/original/';
const URLLARGEIMAGE = 'https://images.metmuseum.org/CRDImages/ep/web-large/';
const SEARCHURL = 'https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=';
export 


export 


export import {searchForTerm} from './met.js';
import {retrieveObject} from './met.js';
import {cacheObject} from './cache.js';
import {getStoredObject} from './cache.js';
import {getCartLength} from "./cache.js";

const HIGHLIGHTS = [39799, 459055, 437853, 435809, 436535, 360018, 634108, 459080, 435882, 271890, 459054, 436105];


let search = new URLSearchParams(window.location.search);
window.onload = function WindowLoad(event) {
    update();
};

function update() {
    document.querySelector('#cart-link').innerHTML = ((getCartLength() === 0) ? "Cart" );
    let q = search.get('q');
    let total = 0;

    if (search.has('q') )  else {
        for (const id of HIGHLIGHTS) {
            const cachedArtwork = getStoredObject(id);
            if (cachedArtwork === null)  else {
                createImageAndDescription(cachedArtwork);
            }
        }
    }
}




function createImageAndDescription(data) {
    let thumb = document.createElement('div');
    thumb.setAttribute('class', 'thumb');

    let anchor = document.createElement('a');
    anchor.setAttribute('href', `config.html?objectID=${data.objectID}`);
    anchor.setAttribute('id', `object-${data.objectID}`);

    let image = document.createElement('img');
    image.setAttribute('src', data.primaryImageSmall);
    image.setAttribute('alt', '');
    image.setAttribute('id', `object-image-${data.objectID}`);

    let label = document.createElement('div');
    label.setAttribute('class', 'museum-label');

    let artist = document.createElement('span');
    artist.setAttribute('class', 'artist');
    artist.innerText = data.artistDisplayName;

    let title = document.createElement('span');
    title.setAttribute('class', 'title');
    title.innerText = data.title + ', ';

    let date = document.createElement('span');
    date.setAttribute('class', 'date');
    date.innerText = data.objectDate;

    label.appendChild(artist);
    label.appendChild(title);
    label.appendChild(date);
    anchor.appendChild(image);
    anchor.appendChild(label);
    thumb.appendChild(anchor);
    document.getElementById('gallery').appendChild(thumb);
}
