import { Artwork } from './artwork.js';
import * as ArtworkCache from './artwork-cache.js';

export 

export async function retrieveObject(id) {
    const artwork = ArtworkCache.retrieve(id);
    if (artwork) 

    const url = met_api_search_object_url(id);
    const responseObject = await fetch(url)
        .then()
        .then()
        .catch(}

export async function retrieveHighlights() {
    const response = await fetch('./highlights.json')
        .then(response => response.json())
        .then(data => {
            return data;
        });
    return response;
}

export 



function met_api_search_object_url(id) {
    const MET_API_SEARCH_OBJECT_URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${id}`;
    return MET_API_SEARCH_OBJECT_URL;
}export function retrieve(id) {
    if (id in localStorage) 
}

export import {getPrintSizes, render, calculatePrice} from "./frame.js";

export class ResultContainer {
    constructor() {
        this.resultContainer = document.getElementById('gallery');
    }

    clear() {
        this.resultContainer.innerHTML = '';
    }

    
}

export class ConfigImage{

    

    

    
}

export class DisplayCart {
    

    

    

    
}





export class Artwork{
    
}
export 

export 

export 


    import { Artwork } from './artwork.js';
    import * as ArtworkAPI from './artwork-api.js';
    import { ResultContainer } from './artwork-dom.js';


    /* Refactor getting cart cache */
    if ('cart' in localStorage) 

    document.addEventListener('DOMContentLoaded', event => {
        const params = (new URL(document.location)).searchParams;
        let searchQuery = params.get('q');
        if (searchQuery) 
        document.getElementById('search').value = searchQuery;
        artworkSearch(searchQuery);
      });
    
    const form = document.getElementById('search-form');
    form.addEventListener('submit', );

    async function artworkSearch(artworkName) {
      const resultContainer = new ResultContainer();
      resultContainer.clear();

      if (!artworkName) {
        displayHighlights(resultContainer);
        return;
      }}

    async function displayHighlights(resultContainer) {
      const highlightObject = await ArtworkAPI.retrieveHighlights();
      const objectIds = highlightObject.highlights;
      Promise.all(
        objectIds.map(async id => {
          const artwork = await ArtworkAPI.retrieveObject(id);}
        )
      );
    }

    


  