export class CartItem {
    constructor(objectID, printSize, frameStyle, frameWidth, matColor, matWidth, price){
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameStyle = frameStyle;
        this.frameWidth = frameWidth;
        this.matColor = matColor;
        this.matWidth = matWidth;
        this.price = price;
    }
}

  import * as Checkout  from "./checkout.js";
  import * as Shipping  from "./shipping.js";


    document.addEventListener('DOMContentLoaded', event => {
      var cartArray = JSON.parse(localStorage.getItem("cart") );
      document.getElementById("pay-button").disabled = true;
      if (cartArray.length === 0) 
        Checkout.getShipping().then(function(data){
        Checkout.addShippingToContainer(data);
        document.getElementById("price-shipping").innerHTML = Checkout.getShippingPrice(data[0].country, data);
        document.getElementById("price-total").innerHTML = Checkout.calculateTotal(data[0].country, data);
      });

    });

    document.getElementById("price-subtotal").innerHTML = Checkout.calculateSubtotal();

    document.getElementById("country").addEventListener('change', );
  import * as Frame from "./frame.js";
import {CartItem} from "./cart-item.js";
import {Shipping} from "./shipping.js";
import * as ElementCreator from './element-creator.js';

export function calculateSubtotal(){
  var parsed_Objs = [], rawData = [];
  var total = 0;
  var cartArray = JSON.parse(localStorage.getItem("cart") );
  parsed_Objs = cartArray.map(obj => {
      return new CartItem(obj.objectID, obj.printSize, obj.frameStyle, obj.frameWidth, obj.matColor, obj.matWidth);
  });
  for (let obj of parsed_Objs) {
      total += Frame.calculatePrice(obj.printSize, obj.frameStyle, obj.frameWidth, obj.matWidth);
  }
  return parseFloat(total);
}

export async function getShipping(){
  var parsed_Objs = [];


  async function getShippingInfo() {
    var response = await fetch(`https://web-engineering.big.tuwien.ac.at/s20/a2/shipping`);
    return await response.json();
  }

  return await getShippingInfo().then(shipping => {
    if (shipping.destinations === undefined || shipping.destinations.length == 0) else{
      document.getElementById("pay-button").disabled = false;
      parsed_Objs = shipping.destinations.map(obj => {
          const item = new Shipping(obj.country, obj.displayName, obj.cost);
          return item;
      });
      return parsed_Objs;
    }
   }).catch();


}

export function getShippingPrice(value, shipping){
  for(let country of shipping){
    if(value === country.country){
      return (country.cost/100).toFixed(2);
    }
  }}

export function calculateTotal(value, shipping){
  var parsed_Objs = [], rawData = [];
  var total = 0;
  var cartArray = JSON.parse(localStorage.getItem("cart") );
  parsed_Objs = cartArray.map(obj => {
      return new CartItem(obj.objectID, obj.printSize, obj.frameStyle, obj.frameWidth, obj.matColor, obj.matWidth);
  });
  for (let obj of parsed_Objs) {
      total += Frame.calculatePrice(obj.printSize, obj.frameStyle, obj.frameWidth, obj.matWidth);
  }
  for(let country of shipping){
    if(value === country.country){
      total += (country.cost / 100);
      return total.toFixed(2);
    }
  }}

export function addShippingToContainer(shipping){
  var parent = document.getElementById("country");
  for(var n = 0; n < shipping.length; n++){
      const options = ElementCreator.create_TextElement('option', shipping[n].displayName, {value: shipping[n].country}, 'option');
      parent.appendChild(options);
  }

}
export 

export 

export function create_TextElement(tag, text, attrs = {}, classes = []) {
    const el = document.createElement(tag);
    el.innerText = text;
    addAttrs(el, attrs);
    addClasses(el, classes);
    return el;
}

function addAttrs(element, attrs = {}) {
    if (Object.keys(attrs).length > 0) {
        for (var key in attrs) {
            element.setAttribute(key, attrs[key]);
        }
    }
}

function addClasses(element, classes = []) {
    if (classes.length > 0) {
        element.classList.add(classes);
    }
}
export 

export 


export 
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {

    function getFrameStyle(frameStyle) {
        const wcClassic = 1.0;
        const wcNatural = 0.80;
        const wcShabby = 0.90;
        const wcElegant = 0.85;

        switch (frameStyle) {
            
            case 'classic':
                return wcClassic;
            case 'shabby':
                return wcShabby;
            case 'elegant':
                return wcElegant;
            
        }

    }

    const baseCost = 30.0;
    const matCost = 0.05;
    const style = getFrameStyle(frameStyle);
    let price = 0.0;
    if (style) {
        switch (printSize) {
            case 'S':
                price = baseCost + frameWidth * style + (matCost ? matCost * matWidth );
                break;
            case 'M':
                price = 2 * (baseCost + frameWidth * style + (matCost ? matCost * matWidth ));
                break;
            case 'L':
                price = 3.5 * (baseCost + frameWidth * style + (matCost ? matCost * matWidth ));
                break;
            

        }
    }
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

export class Shipping {
    constructor(country, displayName, cost){
        this.country = country;
        this.displayName = displayName;
        this.cost = cost;
    }
}
