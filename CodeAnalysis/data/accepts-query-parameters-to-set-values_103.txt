export 


export function getCartProducts() {
    let cart = JSON.parse(localStorage.getItem('cart'));
    if (!cart) {
        cart = [];
    }
    return cart;
}

export 


export 

export function countCart() {
    const cart = document.getElementById("cart-link");
    const count = getCartProducts().length;
    if (count > 0)  else {
        cart.innerHTML = `Cart`;
    }
}
import {render, getPrintSizes, calculatePrice} from './frame.js'
import {findObject} from './general.js'
import {saveToCart, countCart} from "./cart-helpers.js";

countCart();


window.onload = onLoad;
let artObj;
let form;

async function onLoad() {

    let urlParams = new URLSearchParams(window.location.search);
    let objectID = urlParams.get("objectID");
    console.log("objectID ", objectID)

    if(objectID == null || objectID === "")
    

    
    let printSize = urlParams.get("printSize");
    let frameStyle = urlParams.get("frameStyle");
    let frameWidth = urlParams.get("frameWidth");
    let matColor = urlParams.get("matColor");
    let matWidth = urlParams.get("matWidth");

   

    form = document.querySelector("#config-form");
    form.printSize.value = printSize ;

    
    form.frameWidth.value = clamp(frameWidth/10,2,5) ;
    form.frameWidthR.value = form.frameWidth.value;

    form.matWidth.value =  clamp(matWidth/10,0,10)  ;
    form.matWidthR.value = form.matWidth.value;

    form.frameStyle.value = frameStyle ;
    form.matColor.value = matColor ;

    form.matWidth.onchange = form.matWidthR.onchange = 

    form.frameWidth.onchange = form.frameWidthR.onchange = 

    form.onsubmit = formSubmit;
    try {
        artObj = await findObject(objectID);
        console.log(artObj);
     
        document.querySelector("#image-label").innerHTML = "<b>" + artObj.artistDisplayName + "</b><br><i>" + artObj.title + "</i>, " + artObj.objectDate;
        console.log(artObj);
        reRender();
        form.onchange = reRender;
    } 
}

function reRender() {

    let container = document.querySelector("#preview-container");
    let img = document.querySelector("#preview-image");

    img.src = artObj.primaryImageSmall;
    console.log(artObj.primaryImageSmall);

    let printSizes = getPrintSizes(img);
    setPrintSizes(img, printSizes);

    let price = calculatePrice(form.printSize.value,
        form.frameStyle.value,
        form.frameWidth.value,
        form.matWidth.value);

    setPrice(price);
    setTotalSize(printSizes[form.printSize.value], form.matWidth.value, form.frameWidth.value)

    render(img,
        container,
        form.printSize.value,
        form.frameStyle.value,
        form.frameWidth.value * 10,
        form.matColor.value,
        form.matWidth.value * 10);
}


function setPrintSizes(img, printSizes) {

    document.querySelector("#print-size-s-label").innerHTML =
        `Small<br> ${printSizes.S[0] / 10} × ${printSizes.S[1] / 10} cm`;
    document.querySelector("#print-size-m-label").innerHTML =
        `Medium<br> ${printSizes.M[0] / 10} × ${printSizes.M[1] / 10} cm`;
    document.querySelector("#print-size-l-label").innerHTML =
        `Large<br> ${printSizes.L[0] / 10} × ${printSizes.L[1] / 10} cm`;

}


function setPrice(price) {
    document.querySelector("#price").innerHTML = "€ " + price.toFixed(2);
}

function setTotalSize(size, matWidth, frameWidth) {
    matWidth = parseFloat(matWidth) * 10;
    frameWidth = parseFloat(frameWidth) * 10;

    let height = size[0] + matWidth + frameWidth;
    let width = size[1] + matWidth + frameWidth;
    document.querySelector("#total-size").innerHTML = height / 10 + " &times; " + width / 10 + " cm";
}



window.clamp = clamp
function clamp(val, min ,max)
{
    return Math.min(Math.max(val,min),max);
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price;
    let frameBaseCost = 30;
    let costFrame = [];
    costFrame['classic'] = 1;
    costFrame['natural'] = 0.80;
    costFrame['shabby'] = 0.90;
    costFrame['elegant'] = 0.85;

    let costMat = 0.05;

    let costFactorSize = [];
    costFactorSize["S"] = 1;
    costFactorSize["M"] = 2;
    costFactorSize["L"] = 3.5;

    price = costFactorSize[printSize] *
        (frameBaseCost +
            costMat * matWidth +
            costFrame[frameStyle] * frameWidth);

    return ((Math.round((price + Number.EPSILON) * 100)) / 100);
}
const MET_BASE = "https://collectionapi.metmuseum.org/public/collection/v1";

export 

export async function findObject(id) {
    let url = MET_BASE + "/objects/" + id;

    let obj = JSON.parse(localStorage.getItem(id)); // check if cached
 
    if(obj == null) // if not fetch
    {
        obj = await fetch(url).then(handleErrors).then( response =>  response.json());
        localStorage.setItem(id, JSON.stringify(obj)); // cache fetched obj
    }

    return obj;
}


export 

function handleErrors(response) {
    if (!response.ok) 
    return response;
}
