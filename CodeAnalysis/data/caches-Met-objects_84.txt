
 
const baseUrl =  "https://collectionapi.metmuseum.org/public/collection/v1"
const countryUrl = "https://web-engineering.big.tuwien.ac.at/s20/a2"
const searchParams = "hasImages=true"

class APIRequests {

    


    

    

    

    
}

const req = new APIRequests()
export default reqimport API from './APIRequests.js'
import * as Frame from './frame.js';
import ShoppingCart from './ShoppingCart.js'

class Loader {
    constructor () {
        this.cart = new ShoppingCart()
        this.cart.updateHeader()
        
        const ids = this.cart.getIDs()
        if (ids && ids.length) {
            console.log(ids.length)
            this.processObjectIDs(ids)
        }

    }

    

    

    processObjectIDs(objectIDs) {
        for (var i = 0; i < objectIDs.length && i < 100; i++) {
            this.update(new CartItem(objectIDs[i]))
        }}

    

    

}


class CartItem {

    constructor(objectInfoJSON) {
        console.log(objectInfoJSON)
        this.objectID = objectInfoJSON.objectID
        this.artistDisplayName = objectInfoJSON.artistDisplayName
        this.title = objectInfoJSON.title
        this.objectDate = objectInfoJSON.objectDate
        this.price =  this.getPrice()
        this.description = this.getDescription()
        this.image = objectInfoJSON.primaryImageSmall; //sollte render sein
    }

    

    getPrice() {
        let data = new ShoppingCart().getItem(this.objectID)
        console.log(JSON.stringify(data))
        let result = Frame.calculatePrice(data['printSize'],data['frameStyle'],data['frameWidth'],data['matWidth'])

        if (localStorage.getItem('price') === 0 ) }

    
    
}
new Loader();import * as Frame from './frame.js';
import API from "./APIRequests.js"
import Cart from "./ShoppingCart.js"

const configElements = {
    frameWidthSlider: document.getElementsByName("frameWidthR")[0],
    frameWidhtInput: document.getElementsByName("frameWidth")[0],
    matWidthSlider: document.getElementsByName("matWidth")[0],
    matWidthInput: document.getElementsByName("matWidthR")[0],
    frameStyleInputs: document.querySelectorAll(".frame-style-item > input"),
    matStyleInputs: document.querySelectorAll(".mat-color-item > input"),
    frameSizeInputs: document.querySelectorAll(".segmented > input"),
    previewImage: document.getElementById("preview-image"),
    previewContainer: document.getElementById("preview-container"),
    artistText: document.getElementsByClassName("artist")[0],
    titleText: document.getElementsByClassName("title")[0],
    sLabel: document.getElementById("print-size-s-label"),
    mLabel: document.getElementById("print-size-m-label"),
    lLabel: document.getElementById("print-size-l-label"),
    totalSize: document.getElementById("total-size"),
    price: document.getElementById("price"),
    buyButton: document.getElementsByClassName("buy")[0]
}

const defaults = {
    objectID: null,
    frameStyle: "natural",
    printSize: "M",
    frameWidth: 40,
    matColor: "mint",
    matWidth: 55
}

class QueryBoundValue {

    get value() {
        return this.__value
    }

    set value(val) {
        if (this.__validator)
            this.__value = this.__validator.validate(val)
        else
            this.__value = val
        this.__changeListener.forEach()
    }


    constructor(name, validator) {
        this.name = name
        this.__value = undefined
        this.__validator = validator
        this.__changeListener = []
    }

    addListener(func) {
        this.__changeListener.push(func)
    }
}


class ValidRange {

    constructor(start, end, increment) {
        this.start = start
        this.end = end
        this.increment = increment
    }

    /*
    clamped(num) {
        if (num < this.start)
            return this.start
        else if (num > this.end)
            return this.end
        const floored = Math.floor(num)
        const significant = Math.fround(num - floored)
        const difference = significant / this.increment
        const closestInteger = Math.round(difference)
        console.log("floor", floored, "sign", significant, "diff", difference, "closest int", closestInteger)
        return floored + this.increment * closestInteger
    }

    clamped(num) {
        if (num < this.start)
            
        else if (num > this.end)
            

        var tempNumb = num * (1/this.increment)
        if (Number.isInteger(tempNumb)) {
            return num
        }
    }

    validate(value) {
        if (value === null || value === undefined)
            
        else
            return this.clamped(parseInt(value))
    }
}


class SetValidator {
    constructor(allowedValues) {
        this.__allowedValues = allowedValues
    }

    validate(value) {
        if (this.__allowedValues.indexOf(value) == -1)
            
        return value
    }
}


class Configurator {


    constructor() {

        this.objectID = new QueryBoundValue("objectID")
        this.printSize = new QueryBoundValue("printSize", new SetValidator(["M", "S", "L"]))
        this.frameStyle = new QueryBoundValue("frameStyle", new SetValidator(["natural", "classic", "shabby", "elegant"]))
        this.frameWidth = new QueryBoundValue("frameWidth", new ValidRange(20, 50, 1))
        this.matColor = new QueryBoundValue("matColor", new SetValidator(["mint", "ivory", "wine", "indigo", "coal"]))
        this.matWidth = new QueryBoundValue("matWidth", new ValidRange(0, 100, 1))

        this.__printSizes = null
        this.__cart = new Cart()

        this.__loader = new ImageLoader(configElements.previewImage)

        this.__params = new URLSearchParams(window.location.search)

        this.all = [this.objectID, this.printSize, this.frameStyle, this.frameWidth, this.matColor, this.matWidth].map(e => {
            const urlParam = this.__params.get(e.name)
            if (urlParam === undefined || urlParam === null) {
                e.value = defaults[e.name]
            } else {
                e.value = this.__params.get(e.name)
            }
            e.addListener()
            return e    // return the element ie mapping onto itself
        })

        this.__handleImageLoad()
        this.__setup()
        this.__cart.updateHeader()
    }

    async __handleImageLoad() {
        try {
            const loader = await this.__loader.load(this.objectID.value)
            configElements.titleText.innerHTML = loader.title
            configElements.artistText.innerHTML = loader.artist
            const size = loader.sizes
            this.__printSizes = size
            const lab = (s) => (s[0] / 10) + " × " + (s[1] / 10) + " cm"
    
            configElements.sLabel.innerHTML = "Small <br> " + lab(size.S)
            configElements.mLabel.innerHTML = "Medium <br> " + lab(size.M)
            configElements.lLabel.innerHTML = "Large <br> " + lab(size.L)
            this.__rerender()
            this.__recalcSizeAndPrice()
        } 
    }

    __recalcSizeAndPrice() {
        const selectedSize = this.__printSizes[this.printSize.value]
        const sum = parseInt(this.frameWidth.value) + parseInt(this.matWidth.value)
        const width = parseInt(selectedSize[0]) + sum
        const height = parseInt(selectedSize[1]) + sum
        configElements.totalSize.innerHTML = `${width / 10} × ${height / 10} cm`
        configElements.price.innerHTML = "€ " + Frame.calculatePrice(this.printSize.value, this.frameStyle.value, this.frameWidth.value, this.matWidth.value).toFixed(2)
    }

    __setup() {
        this.__setupSlider(this.frameWidth, configElements.frameWidthSlider, configElements.frameWidhtInput, new ValidRange(2, 5, 0.1))
        this.__setupSlider(this.matWidth, configElements.matWidthSlider, configElements.matWidthInput, new ValidRange(0, 10, 0.1))
        this.__setupRadios(configElements.frameStyleInputs, this.frameStyle)
        this.__setupRadios(configElements.matStyleInputs, this.matColor)
        this.__setupRadios(configElements.frameSizeInputs, this.printSize)
        configElements.buyButton.onclick = 
    }

    __rerender() {
        Frame.render(
            configElements.previewImage,
            configElements.previewContainer,
            this.printSize.value,
            this.frameStyle.value,
            this.frameWidth.value,
            this.matColor.value,
            this.matWidth.value
        )
    }

    

    __setupSlider(param, sliderElem, inputElem, validRange) {
        const val = validRange.clamped(param.value / 10)
        sliderElem.value = val
        inputElem.value = val
        sliderElem.oninput = 
        inputElem.oninput = 
        [inputElem, sliderElem].forEach(e => {
            e.onchange = 
        })
    }
    __setupRadios(elements, prop) {
        elements.forEach(elem => {
            if (elem.value === prop.value) {
                elem.checked = true
            } else {
                elem.checked = false
            }
            elem.onchange = 
        })
    }
}

class ImageLoader {

    get artist() {
        return this.__currentJSON.artistDisplayName 
    }

    get title() {
        return (this.__currentJSON.title ) + (" ca " + this.__currentJSON.objectDate)
    }

    get sizes() {
        return Frame.getPrintSizes(this.__imgElement)
    }

    constructor(imgElem) {
        this.__imgElement = imgElem
        this.__currentJSON = null
    }

    loadImage(url) {
        return new Promise((resolve, reject) => {
          const img = new Image()
          img.addEventListener('load', _ => resolve(img))
          img.addEventListener('error', )
          img.src = url
        })
      }

    async load(objectID) {
        if (objectID === null) 
        const objJSON = await API.getObject(objectID)
        if (!objJSON)
            
        const imageURL = objJSON.primaryImageSmall
        this.__currentJSON = objJSON
        const image = await this.loadImage(imageURL)
        this.__imgElement.src = image.src
        return this
    }


}


const conf = new Configurator()
export 

export 

export 
import API from "./APIRequests.js"
import Cart from "./ShoppingCart.js"


class Search {

    constructor() {
        this.cart = new Cart()
        this.cart.updateHeader()
        var urlParams = new URLSearchParams(window.location.search)
        var queryVal = urlParams.get("q")
        if (queryVal != null && queryVal != "") {
            this.updateSearchText("Searching for &ldquo;" + queryVal + "&rdquo;...")

            this.handleObjectSearch(queryVal)
        }
    }

    async handleObjectSearch(searchQuery) {
        const resJSON = await API.search(searchQuery)
        
        this.processObjectIDs(resJSON.objectIDs)
        this.updateSearchText("Found " + resJSON.total + " " + (resJSON.total == 1  : "artworks") + " for &ldquo;" + searchQuery+"&rdquo;")
    }

    

    async processObjectIDs(objectIDs) {
        for (var i = 0; i < objectIDs.length && i < 100; i++) {
            this.updateGallery(await this.getObjectInfo(objectIDs[i]))
        }
    }
    async getObjectInfo(objectID) {
        const objectInfoJSON = await API.getObject(objectID)
        return new SearchObject(objectInfoJSON)
    }

    updateGallery(searchObject) {
        document.getElementById("gallery").appendChild(searchObject.toHTMLNode())
    }

    updateSearchText(text) {
        document.getElementById("search-info").innerHTML = text;
    }
}

class SearchObject {
    objectID
    primaryImageSmall
    artistDisplayName
    title
    objectDate

    constructor(objectInfoJSON) {
        this.objectID = objectInfoJSON.objectID
        this.primaryImageSmall = objectInfoJSON.primaryImageSmall
        this.artistDisplayName = objectInfoJSON.artistDisplayName
        this.title = objectInfoJSON.title
        this.objectDate = objectInfoJSON.objectDate
    }

        <a href="" id="object-0">
          <img src="" alt="" id="object-image-0">
          <div class="museum-label">
            <span class="artist"></span>
            <span class="title"></span>,
            <span class="date"></span>
          </div>
        </a>
      </div>

    toHTMLNode() {

        var thumbDiv = document.createElement('div')
        thumbDiv.setAttribute("class", "thumb")

        var configLink = document.createElement("a")
        configLink.setAttribute("href", window.location.origin+"/config.html?objectID="+this.objectID)
        configLink.setAttribute("id", "object-"+this.objectID)

        var objectImage = document.createElement("img")
        objectImage.setAttribute("src", this.primaryImageSmall)
        objectImage.setAttribute("alt", this.artistDisplayName)
        objectImage.setAttribute("id", "object-image-"+this.objectID)

        var museumLabelDiv = document.createElement("div")
        museumLabelDiv.setAttribute("class", "museum-label")

        var artistSpan = document.createElement("span")
        artistSpan.setAttribute("class", "artist")
        artistSpan.innerHTML = this.artistDisplayName

        var titleSpan = document.createElement("span")
        titleSpan.setAttribute("class", "title")
        titleSpan.innerHTML = this.title + ", "

        var dateSpan = document.createElement("span")
        dateSpan.setAttribute("class", "date")
        dateSpan.innerHTML = this.objectDate


        museumLabelDiv.appendChild(artistSpan)
        museumLabelDiv.appendChild(titleSpan)
        museumLabelDiv.appendChild(dateSpan)

        configLink.appendChild(objectImage)
        configLink.appendChild(museumLabelDiv)

        thumbDiv.appendChild(configLink)

        return thumbDiv
    }
}

new Search();import API from './APIRequests.js'
import * as Frame from './frame.js';


export default class ShoppingCart {

   constructor() {
   }

    


    itemCount() {
        return this.getIDs().length

    }
    
    

    getIDs() {
        if(localStorage.getItem('cart')) {
            let arr = JSON.parse(localStorage.getItem('cart'))
            let result = []
            for (let i = 0; i < arr.length; i++) {
                result[i] = arr[i]['objectID']
            }
            return result
        }}

    getItem(id) {
        let arr = JSON.parse(localStorage.getItem('cart'))
        let r = "" + id 
        for (let i = 0; i < arr.length; i++) {
            if (arr[i]['objectID'] === r)
                
        }
        return null
    }

   
    updateHeader() {
        if (localStorage.getItem('cart')) 
            document.getElementById('cart-link').innerHTML = `Cart (${this.itemCount()})`
    }

}

