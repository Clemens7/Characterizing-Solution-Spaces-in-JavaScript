import * as DOM from './domHelper.js'
import {Artwork} from './artwork.js'

export function createArtworkDom(artwork, i) {
    console.log("creating DOM element")
    return DOM.container([
            DOM.linkContainer([
                DOM.img(artwork.thumbnail, '', 'object-image-' + i),
                DOM.container([
                    DOM.textElement(artwork.artist,'span', 'artist'),
                    DOM.textElement(artwork.title,'span', 'title'),
                    artwork.date === ""  : DOM.textElement(", "+artwork.date,'span', 'date')
                ], 'div', 'museum-label')
            ],'config.html' + "?objectID=" + artwork.id,'object-' + i)
    ],'div','thumb')
}export class Artwork {
    
}import * as DOM from './domHelper.js'
import {calculatePrice, render} from "./frame.js";
import {getOneArtworkByID} from "./searchService.js";
import {Artwork} from "./artwork.js";
import {displayCartCount} from "./main.js";


const cart = "cart";

document.addEventListener("DOMContentLoaded", () => {
    let items = JSON.parse(window.localStorage.getItem(cart));

    let sCart = document.getElementById(cart);
    pageLoad(items, sCart);
    displayCartCount();
});

async function pageLoad(items, sCart) {

    if (items == null) else if(items.length === 0){

        sCart.appendChild(createCheckoutBtnDom(true, items))
    }
}



function createCheckoutBtnDom(state, items) {
    if (state) {
        return DOM.container([
            DOM.container([
                DOM.textElementWithoutclass('There are no items in your shopping cart.', 'span', 'price-total')
            ], 'div', 'price'),
            DOM.btnCheckout('button', 'button', 'checkout-button', state)
        ], 'div', 'cart-total')
    }
}





import {removeFromLocalStorage} from "./searchService.js";

export function container(elements, tag='div', theClass) {
    const container = document.createElement(tag);
    container.setAttribute('class', theClass);
    for (let element of elements){
        container.appendChild(element);
    }
    return container;
}

export 


export 

export 

export 

export 

export 

export 

export 


export function textElementWithoutclass(text, tag,id) {
    const element = document.createElement(tag);
    element.setAttribute('id',id);
    element.innerText = text;
    return element;
}

export function btnCheckout(tag,type,id,state) {
    const container = document.createElement(tag);
    container.setAttribute('type', type);
    container.setAttribute('id',id);
    if(state) {
        container.setAttribute('disabled',true);
    }
    container.innerHTML="Checkout";
    container.addEventListener('click',)
    return container;
}

export 
export import {getOneArtworkByID, getFromLocalStorage, addToLocalStorage} from './searchService.js';
import * as frame from './frame.js';
import {displayCartCount} from './main.js';

let cart = "cart";

class Configuration{
    constructor(objectID, printSize = "M", frameWidth = 0, frameStyle = "natural", matWidth = 0, matColor = "ivory"){
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameWidth = frameWidth;
        this.frameStyle = frameStyle;
        this.matWidth = matWidth;
        this.matColor = matColor;
    }
}

let currentConfig;

document.addEventListener("DOMContentLoaded", function(){
    let urlParams = new URLSearchParams(window.location.search)
    loadPresets(urlParams);
    pageLoad(urlParams);
  });

async function pageLoad(urlParams){
    var artwork;
    if(!urlParams.has('objectID'))

    var objectID = urlParams.get('objectID');
    await getOneArtworkByID(objectID).then(response => {
        artwork = response;

    }).catch();

    if(artwork.message === "Not Found" || artwork.message === "ObjectID not found")

    document.getElementById("preview-image").src = artwork.primaryImageSmall;
    document.getElementById("image-label").innerHTML = `<h3>${artwork.artistDisplayName}</h3><p>${artwork.title}. ${artwork.objectDate}</p>`;

    currentConfig = new Configuration(objectID);

    render();
    displayCartCount();
}

async function loadPresets(urlParams){
    if(urlParams.has('printSize'))
    if(urlParams.has('frameStyle'))
    if(urlParams.has('frameWidth'))

    if(urlParams.has('matWidth'))

    if(urlParams.has('matColor'))
}

function render(){

    let printSize;
    let frameStyle;
    let matColor;
    let frameWidth = document.getElementsByName('frameWidth')[0].value;
    let matWidth = document.getElementsByName('matWidth')[0].value;
    document.getElementsByName('printSize').forEach(element =>{ if(element.checked){
        printSize = element.value;
     }});
     document.getElementsByName('frameStyle').forEach(element => {
         if(element.checked)
            frameStyle = element.value;
     });

     document.getElementsByName('matColor').forEach(element => {
        if(element.checked)
           matColor = element.value;
    });


    document.getElementById('price').innerHTML = `â‚¬ ${parseFloat(frame.calculatePrice(printSize, frameStyle, frameWidth, matWidth)).toFixed(2)}`;

    currentConfig.printSize = printSize;
    currentConfig.frameWidth = frameWidth*10;
    currentConfig.frameStyle = frameStyle;
    currentConfig.matWidth = matWidth*10;
    currentConfig.matColor = matColor;
    
    frame.render(document.getElementById('preview-image'), document.getElementById('preview-container'), printSize, frameStyle, frameWidth*10, matColor, matWidth*10);

    var sizes = frame.getPrintSizes(document.getElementById('preview-image'));
    document.getElementById('print-size-s-label').innerHTML = `Small<br/>${sizes["S"][0]/10} x ${sizes["S"][1]/10} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br/>${sizes["M"][0]/10} x ${sizes["M"][1]/10} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br/>${sizes["L"][0]/10} x ${sizes["L"][1]/10} cm`;
    
    document.getElementById('total-size').innerHTML = getTotalSize(sizes);
}

function getTotalSize(sizes){
    let totalWidth = sizes[currentConfig.printSize][0]/10 + 2 * currentConfig.frameWidth/10 + 2 * currentConfig.matWidth/10;
    let totalHeight = sizes[currentConfig.printSize][1]/10 + 2 * currentConfig.frameWidth/10 + 2 * currentConfig.matWidth/10;
    return totalWidth.toFixed(1) + ' x ' + totalHeight.toFixed(1) + ' cm';
}










document.getElementsByName('frameWidth')[0].addEventListener('change', )

document.getElementsByName('frameWidthR')[0].addEventListener('change', )

document.getElementsByName('matWidth')[0].addEventListener('change', )

document.getElementsByName('matWidthR')[0].addEventListener('change', )


document.getElementsByClassName('frame-style-row')[0].addEventListener('click', )

document.getElementsByClassName('segmented')[0].addEventListener('click', )

document.getElementsByClassName('mat-color-row')[0].addEventListener('click', )

document.getElementsByClassName('buy')[0].addEventListener('click', )


;

export 

export 

export 
const cart = "cart";

export function displayCartCount(){
    let count = JSON.parse(window.localStorage[cart]).length;
    if(count > 0)else{
        document.getElementById('cart-link').innerHTML = 'Cart';
    }
}const url = 'https://collectionapi.metmuseum.org/public/collection/v1/';

export 

export 

export 

export 

export 
import {getArtworkIDsFiltered, getOneArtworkByID} from './searchService.js'
import {Artwork} from "./artwork.js";
import * as artworkDom from './artworkDom.js'
import {displayCartCount} from './main.js'



const form = document.getElementById('search-form');
form.addEventListener("submit", );


document.addEventListener("DOMContentLoaded", () => {

    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let searchInput = urlParams.get("q");

    if (searchInput !== undefined && searchInput !== null)  else {
        initializeHighlights()
    }

    displayCartCount();
});

function initializeHighlights() {
    let response;
    fetch('./highlights.json')
        .then(response => {
                return response.json();
            }
        )
        .then(result => {
            return result["highlights"];
        })
        .then(result => {
            response = getHighlightInfo(result);
        });
}





function getHighlightInfo(highlights) {
    let gallery = document.getElementById('gallery');

    for (let i in highlights) {
        if (highlights.hasOwnProperty(i)) {
            let id = highlights[i];
            getOneArtworkByID(id).then(result => {

                let artwork = new Artwork(
                    result.objectID,
                    result.artistDisplayName,
                    result.title,
                    result.objectDate,
                    result.primaryImageSmall);

                gallery.appendChild(artworkDom.createArtworkDom(artwork, i));
            })

        }
    }

}
