
import { Artwork } from './art-object.js';
import * as Cache from './art-cache.js';

const collectionapi = "https://collectionapi.metmuseum.org/public/collection/v1";

export 

export async function get_objects(objectIDs){
	let cache_result = Cache.retrieve(objectIDs);

	let promises = cache_result.misses.map(id => fetch(objects_api(id))
		.then(response => response.json()));
	
	let results = await Promise.all(promises);

	let new_objects = results.map(
            art => new Artwork(art.objectID, art.artistDisplayName, art.title,art.objectDate,art.primaryImageSmall));

	Cache.store(new_objects);

	return cache_result.hits.concat(new_objects);
}

export 

function objects_api(id){
	return `${collectionapi}/objects/${id}`;
}





export function retrieve(keys){

	var hits = new Array();
	var misses = new Array();
	for (var i = 0; i < keys.length; i++){
		if(keys[i] in localStorage) else {
			misses.push(keys[i]);
		}
	}
	return {hits, misses};
}

export function store(items){
	for (var i = 0; i < items.length; i++){
		localStorage.setItem(items[i].objectID, JSON.stringify(items[i]));
	}
}export class Artwork {
	constructor(objectID, artist, title, date, url){
		this.objectID = objectID;
		this.title = title;
		this.artist = artist;
		this.date = date;
		this.imageUrl = url;
	}
}const cartKey = "cart";

export class CartItem {
    
} 

export function getCartItems() {
    ensureCartInitialized();
    return getLocalStorageItem(cartKey);
}

export function showNumCartItems(){
    let cart = document.getElementById("cart-link");
    let cart_items = getCartItems().length;
    if (cart_items > 0){
        cart.innerHTML = `Cart (${cart_items})`;
    }
}

export 

export function removeFromCart(objectID) {
    ensureCartInitialized();
    const cart = getLocalStorageItem(cartKey);
    const filtered = cart.filter(item => item.objectID !== objectID);
    setLocalStorageItem(cartKey, filtered);
}

export function cartIsEmpty() {
    ensureCartInitialized();
    return getCartItems().length === 0;
}

export 

function ensureCartInitialized() {
    const item = localStorage.getItem(cartKey);
    if (item === null) 
    const parsed = JSON.parse(item);
    if (!Array.isArray(parsed)) 
}

function setLocalStorageItem(key, object) {
    const str = JSON.stringify(object);
    localStorage.setItem(key, str);
}

function getLocalStorageItem(key) {
    const value = localStorage[key];
    return JSON.parse(value);
}import * as Cart from "./cart-api.js";

import * as Api from "./art-api.js";
import * as FrameUtil from "./frame.js";

let total = 0;

document.addEventListener("DOMContentLoaded", event => {

    Cart.showNumCartItems();
    clearCartRender();

    total = 0;
    let checkout = document.getElementById("checkout-button");

    if (Cart.cartIsEmpty())  else {
        renderCart(Cart.getCartItems());
        checkout.addEventListener("click", )
    }
});



function clearCartRender() {
    const container = document.getElementById("cart");
    const items = container.getElementsByClassName("cart-item");

    while (items[0]) 
}

async function renderCart(cartItems) {
    const renders = cartItems.map(item => displayCartItem(item));
    await Promise.all(renders);

    const priceSpan = document.getElementById("price-total");
    priceSpan.innerText = total;
}

function removeCartItem(objectID) {
    const elementToRemove = document.getElementById(`cart-item-${objectID}`);

    let priceString = elementToRemove.querySelector("#price-0").textContent;
    const price = parseFloat(priceString);

    elementToRemove.parentNode.removeChild(elementToRemove);

    Cart.removeFromCart(objectID);
    Cart.showNumCartItems();

    total -= price;

    const priceSpan = document.getElementById("price-total");
    priceSpan.innerText = total;

  if(Cart.cartIsEmpty())
}

async function displayCartItem(cartItem) {
    const template = document.getElementById("cart-template");
    const item = template.content.children[0];

    const newItem = document.importNode(item, true);
    newItem.id = `cart-item-${cartItem.objectID}`;

    const artworkData = (await Api.get_objects([cartItem.objectID])) [0];

    const preview = newItem.children[0];
    const link = preview.children[0];
    link.href = `/config.html?` +
        `objectID=${cartItem.objectID}&` +
        `printSize=${cartItem.printSize}&` +
        `frameStyle=${cartItem.frameStyle}&` +
        `frameWidth=${cartItem.frameWidth}&` +
        `matColor=${cartItem.matColor}&` +
        `matWidth=${cartItem.matWidth}`;
    const thumbnail = link.children[0];
    thumbnail.alt = `Picture ${cartItem.objectID}`;

    loadImage(cartItem, artworkData, preview, thumbnail);

    const label = newItem.children[1];
    fillLabel(label, artworkData, cartItem);

    const removeButton = label.children[2];
    removeButton.addEventListener("click", () => removeCartItem(cartItem.objectID));

    const cartContainer = document.getElementById("cart");
    cartContainer.prepend(newItem);
}

async function fillLabel(label, artwork, cartItem) {
    const div = label.children[0];
    const artist = div.children[0];
    artist.innerText = artwork.artist;
    const title = div.children[1];
    title.innerText = artwork.title;
    const date = div.children[2];
    date.innerText = artwork.date;

    const desc = div.children[5];
    console.log(cartItem.frameWidth);
    console.log(cartItem.frameStyle);
    console.log(cartItem.matWidth);
    console.log(cartItem.matColor);

    let sizeString;
    if (cartItem.printSize == "S") {
        sizeString = "Small";
    }
    if (cartItem.printSize == "M") {
        sizeString = "Medium";
    }
    if (cartItem.printSize == "L") {
        sizeString = "Large";
    }

    desc.innerText = sizeString + " print in a "
        + cartItem.frameWidth + " cm "
        + cartItem.frameStyle + " frame with a "
        + cartItem.matWidth + " cm "
        + cartItem.matColor + " mat.";

    const price =
        FrameUtil.calculatePrice(
            cartItem.printSize, cartItem.frameStyle,
            cartItem.frameWidth, cartItem.matWidth);

    total += price;

    const priceLabel = label.children[1].children[0];
    priceLabel.innerText = price;
}

async function loadImage(cartItem, artwork, container, imageTag) {
    const imageLoadPromise = new Promise(resolve => {
        imageTag.onload = resolve;
        imageTag.src = artwork.imageUrl;
    });

    await imageLoadPromise;

    FrameUtil.render(imageTag, container,
        cartItem.printSize, cartItem.frameStyle,
        cartItem.frameWidth, cartItem.matColor,
        cartItem.matWidth);
}export function getPrintSizes(img) {
  let S = [297, 297]; // A4
  let M = [420, 420]; // A3
  let L = [594, 594]; // A2

  const w = img.naturalWidth;
  const h = img.naturalHeight;

  if (h > w)  else {
    S[1] = Math.floor(h * S[0] / w);
    M[1] = Math.floor(h * M[0] / w);
    L[1] = Math.floor(h * L[0] / w);
  }

  return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
  const printSizes = getPrintSizes(img);
  const w = printSizes[printSize][0];
  const h = printSizes[printSize][1];

  let x;
  if (w > h) {
    x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
  }

  const frameImageSlices = {
    classic: 115,
    natural: 75,
    shabby: 120,
    elegant: 107
  };

  const matColors = {
    ivory: '#fffff0',
    mint: '#e0e6d4',
    wine: '#50222d',
    indigo: '#29434c',
    coal: '#333a3d',
  };

  img.style.boxSizing = 'border-box';
  img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
  img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
  img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
  img.style.borderImageSlice = frameImageSlices[frameStyle];
  img.style.borderWidth = `${frameWidth * x}px`;
  img.style.backgroundColor = matColors[matColor];
  img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
  let price = 30.0; //base cost

  frameWidth /= 10;
  matWidth /= 10;

  const frameCost = {
    classic: 1.0,
    natural: 0.8,
    shabby: 0.9,
    elegant: 0.85
  };

  const sizeCost = {
    S: 1.0,
    M: 2.0,
    L: 3.5
  };

  let framePrice = frameCost[frameStyle] * frameWidth;
  let matPrice = 0.05 * matWidth;

  price += framePrice + matPrice;
  price *= sizeCost[printSize];

  return (Math.round((price + Number.EPSILON) * 100) / 100);
}
