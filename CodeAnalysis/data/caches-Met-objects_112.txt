const BASE_URL = 'https://collectionapi.metmuseum.org';

export async function getObject(id) {
  let artwork = JSON.parse(localStorage.getItem(id));
  if (!artwork) 
  return artwork;
}

export 

export 

export 

export 

export 
import {getAllProducts, add, CObject, remove} from './cart.js';
import {getObject} from "./api.js";
import {calculatePrice, render} from "./frame.js";



export async function init(){
let cartItem = document.getElementById("template").content;
let cart1 = document.getElementById("cart");





if (getAllProducts().length === 0)  else {
    let id = 0;
  for(let cart of getAllProducts()){
    let currentObject = await getObject(cart.objectID);
    let thisItem = cartItem.cloneNode(true);
    let cartitem = thisItem.querySelectorAll("div[class='cart-item']")[0];
    cartitem.setAttribute("id", "cart-item-" + id);
    let label = thisItem.querySelectorAll("div[class='museum-label']")[0];
    let artist = thisItem.querySelectorAll("span[class='artist']")[0];
    let title = thisItem.querySelectorAll("span[class='title']")[0];
    let date = thisItem.querySelectorAll("span[class='date']")[0];
    let description = thisItem.querySelectorAll("span[class='frame-description']")[0];
    let price = thisItem.querySelectorAll("span[id='price-0']")[0];
    let img = thisItem.querySelectorAll("img[class='cart-thumb']")[0];
    let a = thisItem.querySelectorAll("a")[0];
    let removebutton = thisItem.querySelectorAll("button[class='cart-remove']")[0];
    let preview = thisItem.querySelectorAll("div[class='cart-preview']")[0];
    artist.innerHTML = currentObject.artistDisplayName;
    title.innerHTML = currentObject.title;
    date.innerHTML = currentObject.objectDate;
    let textdescription = "";
    if(cart.printSize === "S"){
    textdescription += "Small print in a ";
    }else if(cart.printSize === "M"){
    textdescription += "Medium print in a ";
    }
    let fwidth= pround(Math.max(Math.min(cart.frameWidth/10, 10), 0), 1);
    textdescription += fwidth +" cm " + cart.frameStyle + " frame";
    if(cart.matWidth === 0)else{
    let mwidth = pround(Math.max(Math.min(cart.matWidth/10, 10), 0), 1);
    textdescription += " with a " + mwidth + " cm " + cart.matColor + " mat.";
    }
    description.innerHTML = textdescription;
    price.innerHTML = parseFloat(calculatePrice(cart.printSize, cart.frameStyle, cart.frameWidth, cart.matWidth)).toFixed(2);
    a.setAttribute('href', 'config.html?objectID=' + currentObject.objectID + "&printSize=" + cart.printSize + "&frameStyle=" + cart.frameStyle
    + "&frameWidth=" + cart.frameWidth + "&matColor=" + cart.matColor + "&matWidth=" + cart.matWidth);
    img.setAttribute('src', currentObject.primaryImageSmall);
    img.setAttribute('alt', currentObject.title);
    img.setAttribute('id', 'preview-' + id);
    preview.setAttribute('id','preview-container-' + id);

    removebutton.setAttribute("id", id);
    removebutton.addEventListener("click", removeObject);
    cart1.insertBefore(thisItem, cart1.firstChild);
    render(img, preview, cart.printSize, cart.frameStyle, cart.frameWidth, cart.matColor, cart.matWidth);
  id += 1;
  }
  calctotalPrice();
  cartElements();

}


}


function pround(value, precision = 0) {
  const p = Math.pow(10, precision);
  return Math.round(value * p) / p;
}
function calctotalPrice(){
  let productPrice = 0.0;
  for(let item of getAllProducts()){
      productPrice += parseFloat(calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth));
  }
   let pricetotal = document.getElementById("price-total");
   productPrice = productPrice.toFixed(2);
   pricetotal.innerText= productPrice;

}

export function cartElements(){
    let cartn = document.getElementById("cart-link");
   if(getAllProducts().length !== 0){
      cartn.innerHTML = "Cart (" + getAllProducts().length + ")";
   }
}



    import {init} from "./cart-display.js";
     init();
  export function getAllProducts() {
  var cart = JSON.parse(localStorage.getItem('cart'));
  if (!cart) 
  return cart;
}

export class CObject{
  
}

export 

export 

export 
import {calculatePrice, getPrintSizes, render} from "./frame.js";
import {object as fetchObject} from "./api.js";
import {cartElements} from "./cart-display.js";
import {add, CObject} from "./cart.js";

cartElements();

function getQueryParams() {
  return location.search
    .substring(1)
    .split('&')
    .map(it => it.split('='))
    .reduce((map, [key, value]) => map.set(key, value), new Map())
}

function printSizeToString([width, height]) {
  return `${Math.round(width) / 10} × ${Math.round(height) / 10} cm`;
}



function linkInputs(i1, i2) {
  i1.addEventListener('change', );
  i2.addEventListener('change', );
}

function inputMinMax(input, min, max, precision = 1) {
  input.addEventListener('change', );
}

function getRadioValue(name) {
  return document.querySelector(`input[type="radio"][name="${name}"]:checked`).value;
}

function pround(value, precision = 0) {
  const p = Math.pow(10, precision);
  return Math.round(value * p) / p;
}

function getCartItem() {
  return new CObject(
    objectId,
    getRadioValue('printSize'),
    getRadioValue('frameStyle'),
    document.getElementById('frame-width-input').value * 10,
    getRadioValue('matColor'),
    document.getElementById('mat-width-input').value * 10
  );
}

function updatePreview() {
  const img = document.getElementById('preview-image'),
    container = document.getElementById('preview-container'),
    cartItem = getCartItem(),
    printSizes = getPrintSizes(img)[cartItem.printSize],
    price = calculatePrice(
      cartItem.printSize,
      cartItem.frameStyle,
      cartItem.frameWidth,
      cartItem.matWidth
    ).toFixed(2),
    totalWidth = pround(printSizes[0] / 10 + 0.2 * (cartItem.frameWidth + cartItem.matWidth), 1),
    totalHeight = pround(printSizes[1] / 10 + 0.2 * (cartItem.frameWidth + cartItem.matWidth), 1);

  render(
    img,
    container,
    cartItem.printSize,
    cartItem.frameStyle,
    cartItem.frameWidth,
    cartItem.matColor,
    cartItem.matWidth
  );

  document.getElementById('price').innerText = `€ ${price}`;
  document.getElementById('total-size').innerText = `${totalWidth} × ${totalHeight} cm`;
}

const queryParams = getQueryParams();
const objectId = queryParams.get('objectID') ;

linkInputs(
  document.getElementById('frame-width-input-r'),
  document.getElementById('frame-width-input')
);
linkInputs(
  document.getElementById('mat-width-input-r'),
  document.getElementById('mat-width-input')
);

inputMinMax(document.getElementById('frame-width-input'), 2, 5);
inputMinMax(document.getElementById('mat-width-input'), 0, 10);

document.querySelectorAll('input')
  .forEach(el => el.addEventListener('change', ));

if (queryParams.has('printSize'))
  
if (queryParams.has('frameStyle'))
  
if (queryParams.has('frameWidth'))
  
if (queryParams.has('matColor'))
  
if (queryParams.has('matWidth'))
  

document.getElementById('config-form').addEventListener('submit', );

function getObject(id) {
  const cached = localStorage.getItem(id);
  if (cached) return Promise.resolve(JSON.parse(cached));
}

getObject(objectId).then(object => {
  console.log(object);
  if (!localStorage.getItem(object.objectID)) 

  const img = document.getElementById('preview-image');
  img.src = object.primaryImageSmall;
  img.onload = () => {
    const printSizes = getPrintSizes(img);
    document.getElementById('print-size-s-label').innerHTML = 'Small<br>' + printSizeToString(printSizes.S);
    document.getElementById('print-size-m-label').innerHTML = 'Medium<br>' + printSizeToString(printSizes.M);
    document.getElementById('print-size-l-label').innerHTML = 'Large<br>' + printSizeToString(printSizes.L);
    updatePreview();
  };

  const artistNode = document.createElement("b"),
    descriptionNode = document.createElement("i");
  artistNode.innerText = object.artistDisplayName;
  descriptionNode.innerText = object.title;
  document.getElementById('image-label').append(
    artistNode,
    document.createElement('br'),
    descriptionNode,
    document.createTextNode(`, ${object.objectDate}`)
  );
});
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {

  const frameBaseCost = {
    'S': 1,
    'M': 2,
    'L': 3.5
  };

  const frameTypeCentimeterCost = {
    'classic': 1.00,
    'natural': 0.80,
    'shabby': 0.90,
    'elegant': 0.85
  };

  var price = ((30 + (frameWidth/10 * frameTypeCentimeterCost[frameStyle]) + (matWidth* 0.005)) * frameBaseCost[printSize]);
  return (Math.round((price + Number.EPSILON) * 100) / 100);

}
import {search, highlights, getObject} from "./api.js";
import {cartElements} from "./cart-display.js";

cartElements();

let params = (new URL(document.location)).searchParams.get('q');
if (!params) 
artworkSearch(params);

async function artworkSearch(q) {
  document.getElementById("search").value = q;
  document.getElementById('gallery').innerText = '';
  const searchInfo = document.getElementById('search-info');
  let ids = [];
  if (q!='') {
    searchInfo.innerHTML = 'Searching for “' + q + '”...';
    ids = await search(q);
    searchInfo.innerHTML = `Found ${ids.length} artwork${ids.length == 1  : 's'} for &ldquo;${q}&rdquo;`;
  }
  ids.map(objectID => getObject(objectID).then(appendArtworkElement));
}

function appendArtworkElement(artwork) {
  const outerDiv = document.createElement('div');
  outerDiv.setAttribute('class', 'thumb');
  const ref = document.createElement('a');
  ref.setAttribute('href', 'config.html?objectID=' + artwork.objectID);
  ref.setAttribute('id', 'object-' + artwork.objectID);
  const img = document.createElement('img');
  img.setAttribute('src', artwork.primaryImageSmall);
  img.setAttribute('alt', artwork.title);
  img.setAttribute('id', 'object-image' + artwork.objectId);
  const innerDiv = document.createElement('div');
  innerDiv.setAttribute('class', 'museum-label');
  const artistSpan = document.createElement('span');
  artistSpan.setAttribute('class', 'artist');
  artistSpan.innerText = artwork.artistDisplayName;
  const titleSpan = document.createElement('span');
  titleSpan.setAttribute('class', 'title');
  titleSpan.innerText = artwork.title + ', ';
  const dateSpan = document.createElement('span');
  dateSpan.setAttribute('class', 'date');
  dateSpan.innerText = artwork.objectDate;
  ref.appendChild(img);
  innerDiv.appendChild(artistSpan);
  innerDiv.appendChild(titleSpan);
  innerDiv.appendChild(dateSpan);
  ref.appendChild(innerDiv);
  outerDiv.appendChild(ref);
  document.getElementById("gallery").appendChild(outerDiv);
}


