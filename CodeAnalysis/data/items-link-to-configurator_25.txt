export class CartItem {
    constructor(objectID, printSize, frameWidth, frameStyle, matWidth, matColor) {
        this.objectID = objectID;
        this.printSize = printSize;
        this.frameWidth = frameWidth;
        this.frameStyle = frameStyle;
        this.matWidth = matWidth;
        this.matColor = matColor;
    }

    toQueryParams() {
        let str = `objectID=${this.objectID}&printSize=${this.printSize}&frameWidth=${this.frameWidth}&frameStyle=${this.frameStyle}&matColor=${this.matColor}&matWidth=${this.matWidth}`;
        return str;
    }

    generateDesc() {
        let size =  {
            "S": "Small",
            "M": "Medium",
            "L": "Large"
        }

        let text = `${size[this.printSize]} print in a ${this.frameWidth/10} cm ${this.frameStyle} frame`;
        if (this.matWidth !== 0) {
            text = text + ` with a ${this.matWidth/10} cm ${this.matColor} mat`;
        }
        return text + ".";
    }
}
import {calculatePrice} from "./frame.js";
import {render} from "./frame.js";
import {CartItem} from "./cartItem.js";
let items = [];
if (localStorage.getItem("cart") !== undefined && localStorage.getItem("cart") !== null) {
    items = JSON.parse(localStorage.getItem("cart"))
        .map(item => new CartItem(item.objectID, item.printSize, item.frameWidth, item.frameStyle, item.matWidth, item.matColor));
}
if (items.length === 0)  else {
    document.getElementById("cart-link").innerHTML = "Cart (" + items.length + ")";
}
checkEmpty();
buildCart();
let elements = document.getElementsByClassName("cart-remove");
Array.prototype.forEach.call(elements, element => {
    element.addEventListener("click", removeItem);
})
let images = document.getElementsByClassName("cart-thumb");
Array.prototype.forEach.call(images, element => {
    element.addEventListener("load", callRender);
})



function setSum() {
    let sum = 0;
    items.forEach(item => sum += calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth));
    document.getElementById('price-total').innerHTML = sum.toFixed(2);
}

function buildCart() {
    let template = "";
    items.forEach((item, index) => {
        template +=
            `
        <div class="cart-item">
            <div class="cart-preview" id=${"preview-container" + index}>
              <a href=${"config.html?" + item.toQueryParams()}>
                <img class="cart-thumb" style="max-height: 250px; max-width: 250px" id=${"preview" + index} alt="Image">
              </a>
            </div>
            <div class="museum-label">
              <div>
                <span class="artist" id=${"artist" + index}></span>
                <span class="title" id=${"title" + index}></span>
                <span class="date" id=${"date" + index}></span>
                <br><br>
                <span class="frame-description">${item.generateDesc()}</span>
              </div>
              <div class="cart-price">â‚¬
                <span id=${"price" + index}>
                    ${calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth).toFixed(2)}
                </span>
              </div>
              <button class="cart-remove" id="${index}"></button>
            </div>
        </div>
        `
    });
    setSum();
    document.getElementById('cart').insertAdjacentHTML('afterbegin', template);
    loadInfo(template);
}

function loadInfo(template) {
    items.forEach((item, index) => {
        let cached = localStorage.getItem("object" + item.objectID);
        if (cached !== undefined && cached !==null)  else {
            fetch("https://collectionapi.metmuseum.org/public/collection/v1/objects/" + item.objectID).then(response => {
                if (response.ok) {
                    response.json().then(json => {
                            localStorage.setItem("object" + item.objectID, JSON.stringify(json));
                            insertInfo(index, json.artistDisplayName, json.title, json.objectDate, json["primaryImageSmall"]);
                        }
                    )
                }
            });
        }
    });
}

function insertInfo(index, artist, title, date, preview) {
    document.getElementById("artist" + index).innerHTML = artist;
    let titleElement = document.getElementById("title" + index);
    if (date !== undefined && date !== null) {
        titleElement.innerHTML = title + ", ";
    }
    document.getElementById("date" + index).innerHTML = date;
    document.getElementById("preview" + index).src = preview;

}
function checkEmpty() {
    if (items.length === 0)  else {
        let button = document.getElementById("checkout-button");
        button.disabled = false;
        button.onclick = 
    }
}
function callRender() {
    let index = Array.prototype.indexOf.call(getAncestor(this,4).children, getAncestor(this,3));
    let item = items[index];
    render(this,this.parentElement,item.printSize, item.frameStyle, item.frameWidth, item.matColor, item.matWidth)
}
function getAncestor(child,level) {
    let ancestor = child;
    for (let i = 0; i < level ; i++) {
        ancestor = ancestor.parentElement;
    } return ancestor;
}
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h) {
        x = container.offsetWidth / (w + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

const frameSizeCosts = {
    S: 1,
    M: 2,
    L: 3.5
};
const frameStyleCosts = {
    classic: 1,
    natural: 0.8,
    shabby: 0.9,
    elegant: 0.85
};
export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    const matPrice = 0.05; //5c
    if (!["S", "M", "L"].includes(printSize) || !["classic", "natural", "shabby", "elegant"].includes(frameStyle)
    || frameWidth < 20 || frameWidth > 50 || matWidth < 0 || matWidth > 100) 
    price = (30 + (frameWidth/10.0) * frameStyleCosts[frameStyle] + (matWidth/10.0) * matPrice) * frameSizeCosts[printSize];
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
