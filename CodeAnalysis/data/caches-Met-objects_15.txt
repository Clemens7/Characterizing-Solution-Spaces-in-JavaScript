import {calculatePrice} from "./frame.js"
import {render} from "./frame.js"



document.addEventListener("DOMContentLoaded", ev => {
    let cart = localStorage.getItem("cart") ;
    cart = JSON.parse(cart);

    if (cart.length === 0)  else {
        fillCart(cart);
        addTotalPrice(calculatePriceTotal());
    }
});


export 




function fillCart(cart) {
    cart.forEach(element => {
        fetchImageData(element.objectID, element)
    })
};

function fetchImageData(objectID, cartItem) {
    let data = retrieveImages(objectID);
    if (data) {
        addCartItem(createCartItem(data, cartItem));
        updateImg(data, cartItem);
    }
}

function addCartItem(item) {
    const cart = document.getElementById("cart");
    cart.prepend(item);
}

function addTotalPrice(totalPrice) {
    const cartPrice = document.getElementById("price-total");
    cartPrice.innerHTML = totalPrice;
    if (totalPrice == 0) 
}

function calculatePriceTotal() {
    let cart = localStorage.getItem("cart") ;
    cart = JSON.parse(cart);

    var priceTotal = 0;
    cart.forEach(element => {
        priceTotal += calculatePrice(element.printSize, element.frameStyle, element.frameWidth, element.matWidth)
    });
        document.getElementById("cart-link").innerHTML = "Cart (" + cart.length + ")";

    return priceTotal.toFixed(2);
}

function createCartItem(data, cartItem) {
    let cart = localStorage.getItem("cart") ;
    cart = JSON.parse(cart);
    const href = "config.html?objectID=" + data.objectID
        + "&printSize=" + cartItem.printSize
        + "&frameStyle=" + cartItem.frameStyle
        + "&frameWidth=" + cartItem.frameWidth
        + "&matColor=" + cartItem.matColor
        + "&matWidth=" + cartItem.matWidth;

    let priceItem = 0;
    priceItem = calculatePrice(cartItem.printSize, cartItem.frameStyle, cartItem.frameWidth, cartItem.matWidth);

    let div = document.createElement('div');
    div.className = 'cart-item';
    div.setAttribute('id', 'cart-item-' + data.objectID);
    div.innerHTML =
        `<div class="cart-preview" id="preview-container-${data.objectID}">
                <a href="${href}">
                    <img class="cart-thumb" src="${data.primaryImageSmall}" id="preview-${data.objectID}" alt="${data.objectID}">
                </a>
            </div>
            <div class="museum-label">
                <div>
                    <span class="artist">${data.artistDisplayName}</span>
                    <span class="title">${data.title}</span>,
                    <span class="date">${data.objectDate}</span>
                    <br><br>
                    <span class="frame-description">${getDescribtion(cartItem)}</span>
                </div>
            <div class="cart-price">€ <span id="price-${data.objectID}">${priceItem.toFixed(2)}</span></div>
                <button class="cart-remove" id="cart-remove-${data.objectID}" onclick="import('./cart.js').then(o=> o.removeItem(${data.objectID}))""></button>
            </div>`;
    return div;
}

function getDescribtion(cartItem) {
    let desc = "";
    let mat = "";

    if (cartItem.matWidth != 0) {
        mat = ` with a ${cartItem.matWidth / 10}&nbsp;cm ${cartItem.matColor} mat.`
    }

    let size = "";
    switch (cartItem.printSize) {
        case 'S' :
            size = "Small";
            break;
        
        case 'M' :
            size = "Medium";
            break;
    }

    desc = `${size} print in a ${(cartItem.frameWidth / 10)}&nbsp;cm ${cartItem.frameStyle} frame${mat}`;
    return desc;
}

function updateImg(data, cartItem) {
    let img = document.getElementById(`preview-${data.objectID}`);
    let container = document.getElementById(`preview-container-${data.objectID}`);
    let printSize = cartItem.printSize;
    let frameStyle = cartItem.frameStyle;
    let frameWidth = cartItem.frameWidth;
    let matColor = cartItem.matColor;
    let matWidth = cartItem.matWidth;
    render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth);
}



function retrieveImages(objectID) {
    if (objectID in localStorage) {
        return JSON.parse(localStorage[objectID])
    }
}
window.addEventListener('DOMContentLoaded', event => {
    let cart = localStorage.getItem("cart") || "[]";
    cart = JSON.parse(cart);

    document.getElementById("cart-link").innerHTML = "Cart (" + cart.length + ")";
    document.getElementById("config-form").onchange = ;

    document.getElementById("config-form").addEventListener('submit', );
    document.getElementById("preview-image").onload = function () {
        setSizes(this);
        updateImg();
        updatePrice();
        updateSize();
    };
    let frameSlider = document.getElementById("frameSlider");
    let frameSliderInput = document.getElementById("frameSliderInput");

    let matSlider = document.getElementById("matSlider");
    let matSliderInput = document.getElementById("matSliderInput");

    frameSlider.onchange = ;

    frameSliderInput.onchange = ;

    matSlider.onchange = ;

    matSliderInput.onchange = ;
    presetConfiguration();

});

function presetConfiguration() {
    let urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('objectID') && urlParams.get('objectID') !== "") {
        let objectID = urlParams.get('objectID');
        let img = retrieveImages(objectID);
        if (img) {
            setImage(img);
        }
    }
    if (urlParams.has('printSize')) 
    if (urlParams.has('frameWidth')) 
    if (urlParams.has('frameStyle')) 
    if (urlParams.has('matWidth')) 

    if (urlParams.has('matColor')) 
}





function setImage(img) {
    document.getElementById("preview-image").src = img.primaryImageSmall;
    document.getElementById("artist").innerHTML = img.artistDisplayName + "<br>";
    document.getElementById("title").innerHTML = img.title;
    document.getElementById("date").innerHTML = img.objectDate;
}

function setSizes(img) {
    let sizes = getPrintSizes(img);
    document.getElementById("print-size-s-label").innerHTML = "Small<br>" + sizes.S[0] + " × " + sizes.S[1] + " cm";
    document.getElementById("print-size-m-label").innerHTML = "Medium<br>" + sizes.M[0] + " × " + sizes.M[1] + " cm";
    document.getElementById("print-size-l-label").innerHTML = "Large<br>" + sizes.L[0] + " × " + sizes.L[1] + " cm";
}

function updateSize() {
    let size = displayRadioValue("printSize");

    let sizes = getPrintSizes(document.getElementById("preview-image"));

    let frameWidth = document.getElementById("frameSlider").value;
    let matWidth = document.getElementById("matSlider").value;

    switch (size) {
        
        case "M":
            sizes = sizes.M;
            break;
        
        
    }

    sizes[0] -= -frameWidth;
    sizes[0] -= -matWidth;

    sizes[1] -= -frameWidth;
    sizes[1] -= -matWidth;

    document.getElementById("total-size").innerHTML = sizes[0].toFixed(1) + " x " + sizes[1].toFixed(1) + " cm"
}

function updatePrice() {
    let printSize = displayRadioValue("printSize");
    let frameStyle = displayRadioValue("frameStyle");
    let frameWidth = document.getElementById("frameSlider").value;
    let matWidth = document.getElementById("matSlider").value;
    let price = calculatePrice(printSize, frameStyle, frameWidth*10, matWidth*10);
    document.getElementById("price").innerHTML = "€ " + price;
}

function updateImg() {
    let img = document.getElementById("preview-image");
    let container = document.getElementById("preview-container");
    let printSize = displayRadioValue("printSize");
    let frameStyle = displayRadioValue("frameStyle");
    let frameWidth = document.getElementById("frameSlider").value;
    let matColor = displayRadioValue("matColor");
    let matWidth = document.getElementById("matSlider").value;
    render(img, container, printSize, frameStyle, frameWidth*10, matColor, matWidth*10);
}



function displayRadioValue(tagName) {
    let ele = document.getElementsByName(tagName);

    for (let i = 0; i < ele.length; i++) {

        if (ele[i].type === "radio") {
            if (ele[i].checked) {
                return ele[i].value;
            }
        }
    }}


function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return {S: S, M: M, L: L};
}

function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}


function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    let base = 30;
    let framecost = 0;
    switch (frameStyle) {
        
        case "natural":
            framecost = 0.08;
            break;
        
        
        
    }

    let matCost = 0.005;

    price += base;
    price += framecost * frameWidth;
    price += matCost * matWidth;

    switch (printSize) {
        
        case "M":
            price *= 2;
            break;
        
        
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100).toFixed(2);
}




function retrieveImages(objectID) {
    if (objectID in localStorage) {
        return JSON.parse(localStorage[objectID])
    }
}

export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;

    let base = 30;
    let framecost = 0;
    switch (frameStyle) {
        
        case "natural":
            framecost = 0.08;
            break;
        
        case "elegant":
            framecost = 0.085;
            break;
        
    }

    let matCost = 0.005;
    price += base;
    price += framecost * frameWidth;
    price += matCost * matWidth;
    switch (printSize) {
        case "S":
            price *= 1;
            break;
        case "M":
            price *= 2;
            break;
        
        
    }

    return (Math.round((price + Number.EPSILON) * 100) / 100);
}
document.addEventListener("DOMContentLoaded", ev => {
    let cart = localStorage.getItem("cart") || "[]";
    cart = JSON.parse(cart);
    document.getElementById("cart-link").innerHTML = "Cart (" + cart.length + ")";
    const params = new URL(document.location).searchParams;
    const searchParam = params.get('q');
    if (!searchParam)  else {
        startSearch(searchParam);
    }
});


function startSearch(searchParam) {
    document.getElementById("search-info").innerText = `Searching for “${searchParam}”...`;
    const queryUrl = "https://collectionapi.metmuseum.org/public/collection/v1/search?hasImages=true&q=";
    fetch(queryUrl + searchParam)
        .then((resp) => {
            return resp.json()
        })
        .then((data) => {
            document.getElementById("search-info").innerText = `Found ${data['total']} artwork${data['total'] !== 1 ? 's' } for “${searchParam}”`;
            fetchImageData(data['objectIDs']);
        })
        .catch();
}

function fetchImageData(objectIds) {
    objectIds.slice(0, 100).forEach(element => {
        let data = retrieveImages(element);
        if (data) {
            addingImage(data)
        }
    })
}

function newDOM(tag, attributes, values, innerHTML) {
    let newDOM = document.createElement(tag);
    attributes.forEach(element => {
        newDOM.setAttribute(element, values[attributes.indexOf(element)])
    });
    newDOM.innerHTML = innerHTML;
    return newDOM;
}

function addingImage(data) {
    const gallery = document.getElementById("gallery");
    let baseDiv = newDOM('div', ['class'], ['museum-label'], "");
    baseDiv.appendChild(newDOM('span', ['class'], ['artist'], data['artistDisplayName']));
    baseDiv.appendChild(newDOM('span', ['class'], ['title'], data['title'] + ", "));
    baseDiv.appendChild(newDOM('span', ['class'], ['date'], data['objectDate']));
    let imgRef = newDOM('img', ['src', 'alt', 'id'], [data['primaryImageSmall'], data['objectID'], "object-image-" + data['objectID']], "");
    let a = newDOM('a', ['href', 'id'], ['config.html?objectID=' + data['objectID'], "object-" + data['objectID']], "");
    a.appendChild(imgRef);
    a.appendChild(baseDiv);
    let newImage = newDOM('div', ['class'], ['thumb'], "");
    newImage.appendChild(a);
    gallery.appendChild(newImage)
}





function retrieveImages(objectID) {
    if (objectID in localStorage) {
        return JSON.parse(localStorage[objectID])
    }
}