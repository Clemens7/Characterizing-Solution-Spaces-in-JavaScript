import {render, calculatePrice} from "./frame.js";
import {displayCartItems, getConfigMessage} from "./util.js";

window.onload = async function() {
    await renderCart();
};

async function renderCart() {
    displayCartItems();
    displayTotal();

    let cart = JSON.parse(localStorage.getItem("cart"));

    if(cart != null && cart.length > 0)  else {
        let msgNode = getEmptyCartMsgNode();
        let cartNode = document.getElementById("cart");
        cartNode.replaceChild(msgNode, cartNode.children.item(0));

        disableCheckoutButton(cartNode);
    }

}

function getEmptyCartMsgNode() {
    let newDiv = document.createElement("div");
    let newSpan = document.createElement("span");
    let txt = document.createTextNode("There are no items in your shopping cart.");
    newSpan.appendChild(txt);
    return newDiv.appendChild(newSpan);
}

function disableCheckoutButton(cartNode) {
    cartNode.children.item(1).children.item(1).disabled = true;
}












function displayTotal(){
    let subtotalElement = document.getElementById('price-total');
    subtotalElement.innerText = calculateTotal();
}

function calculateTotal(){
    let cart = JSON.parse (localStorage.getItem('cart'));
    let subtotal = 0;

    if (cart !== null){
        let cartLength = cart.length;
        for (let index = 0; index < cartLength; index++) 
    }
    return subtotal.toFixed(2);
}










import { render, getPrintSizes, calculatePrice } from './frame.js';
import { displayCartItems } from './util.js';

var searchURL = './search.html';
var cartUrl = './cart.html';
var configuration;

window.onload = function() {


    /*
        parameter configuration.objectID needed to choose artwork => redirect if missing

    const urlParams = new URLSearchParams(window.location.search);
    configuration = {
        objectID : urlParams.get('objectID')
    };

    if(configuration.objectID == null) 

    /*
        show header cart items
    displayCartItems();

    /*
        fill with predefined configuration

    configuration.image = document.getElementById('preview-image');
    configuration.container = document.getElementById('preview-container');

    setInitialConfiguration(urlParams, configuration);
    setPrice(calculatePrice(configuration.printSize, configuration.frameStyle, configuration.frameWidth, configuration.matWidth));

    /*
        get query parameter 'configuration.objectID', load the requested artwork


    if(window.localStorage.getItem(configuration.objectID) == null)  else {
        handleMetObject(window.localStorage.getItem(configuration.objectID), configuration);
    }  
    
    /*
        set onsubmit event to add to localStorage 'cart'

    document.getElementById('config-form').onsubmit = 

    /*
        set events to re-render image when values are updated

    for (const element of document.getElementsByName('printSize')) {
        element.addEventListener('change', );
    }

    for (const element of document.getElementsByName('frameStyle')) {
        element.addEventListener('change', );
    }

    for (const element of document.getElementsByName('matColor')) {
        element.addEventListener('change', );
    }


    var frameWidthTextField = document.getElementsByName('frameWidth')[0];
    var frameWidthSlider = document.getElementsByName('frameWidthR')[0];

    frameWidthTextField.onchange = ;

    frameWidthSlider.onchange = ;

    
    var matWidthTextField = document.getElementsByName('matWidth')[0];
    var matWidthSlider = document.getElementsByName('matWidthR')[0];

    matWidthTextField.onchange = ;

    matWidthSlider.onchange = ;


}


function handleMetObject(objectAsString, configuration) {
    const object = JSON.parse(objectAsString);
    console.log(object);
    if (object.primaryImageSmall === undefined || object.primaryImageSmall == "") 

    configuration.image.onload = function() {
        renderConfig(configuration);
        setPrintSizes(getPrintSizes(configuration.image));
        setSize(configuration);
    }
    configuration.image.src = object.primaryImageSmall;
    document.getElementById('image-label').textContent = `${object.title}: ${object.artistDisplayName}, ${object.objectDate}`;
}





function handleFrameWidthNum(num) {
    if(num == null) return 40;}

function handleMatWidthNum(num) {
    if(num == null) return 55;}

/* set num according to min, max values, round and convert to mm */


function setPrintSizes(printSizesObject) {
    document.getElementById('print-size-s-label').innerHTML = `Small<br>${printSizesObject.S[0]} × ${printSizesObject.S[1]} cm`;
    document.getElementById('print-size-m-label').innerHTML = `Medium<br>${printSizesObject.M[0]} × ${printSizesObject.M[1]} cm`;
    document.getElementById('print-size-l-label').innerHTML = `Large<br>${printSizesObject.L[0]} × ${printSizesObject.L[1]} cm`;
}

function setPrice(price) {
    document.getElementById('price').textContent = `€ ${price.toFixed(2)}`;
}

function setSize(configuration) {
    var printSizes = getPrintSizes(configuration.image)[configuration.printSize];
    const additionalSize = 2*configuration.matWidth/10 + 2*configuration.frameWidth/10;
    document.getElementById('total-size').textContent = `${printSizes[0] + additionalSize} × ${printSizes[1] + additionalSize} cm`;
}

function renderConfig(configuration) {
    console.log('Re-render with:');
    console.log(configuration);
    render(configuration.image, configuration.container, configuration.printSize, configuration.frameStyle, configuration.frameWidth, configuration.matColor, configuration.matWidth);
}

function setInitialConfiguration(urlParams, configuration) {

    configuration.printSize = setRadiobuttonAccordingToOption(['S', 'M', 'L'], ['print-size-s', 'print-size-m', 'print-size-l'], urlParams.get('printSize')) || 'M';
    configuration.frameStyle = setRadiobuttonAccordingToOption(['classic', 'natural', 'shabby', 'elegant'], ['frame-style-classic', 'frame-style-natural', 'frame-style-shabby', 'frame-style-elegant'], urlParams.get('frameStyle')) || 'natural';
    configuration.matColor = setRadiobuttonAccordingToOption(['ivory', 'mint', 'wine', 'indigo', 'coal'], ['mat-color-ivory', 'mat-color-mint', 'mat-color-wine', 'mat-color-indigo', 'mat-color-coal'], urlParams.get('matColor')) || 'wine';

    configuration.frameWidth = handleFrameWidthNum(urlParams.get('frameWidth'));
    var valueInCm = configuration.frameWidth / 10;
    console.log('Set framewidth: ' + valueInCm + "cm");

    document.getElementsByName('frameWidthR')[0].value = valueInCm;
    document.getElementsByName('frameWidth')[0].value = valueInCm;

    configuration.matWidth = handleMatWidthNum(urlParams.get('matWidth'));
    valueInCm = configuration.matWidth / 10;
    console.log('Set matwidth: ' + valueInCm + "cm");

    document.getElementsByName('matWidthR')[0].value = valueInCm;
    document.getElementsByName('matWidth')[0].value = valueInCm;
    
}

function setRadiobuttonAccordingToOption(options, optionIds, option) {
    if(option == null) return;export 

export 

export import {displayCartItems} from './util.js';

document.addEventListener('DOMContentLoaded', evt => {
    const params = (new URL(document.location)).searchParams;
    const query = params.get('q');
    if (!query) {
        retrieveObjectHighlights();
    }
});

const form = document.querySelector('main form');
form.addEventListener('submit', );



export var Artworks = {
    serialize: ,
    parse: 
};



async function getObjetsAsync(rawData) {

    let maxToShow = rawData.total > 100  : rawData.total;
    console.log(maxToShow);

    const results = await Promise.all(rawData.objectIDs.slice(0, maxToShow).map(async (object1) => {
        try {
            let x = ObjectsCache.retrieve(object1);
            if (x) {
                const gallery = document.getElementById('gallery');
                gallery.appendChild(createOutput(x));
                return x;
            }
        }}));
}

async function retrieveObjectHighlights() {
    const responseObjects = await fetch("highlights.json");

    const rawData = await responseObjects.json();
    const babylon = {
        totals: rawData.highlights.length,
        objectIDs: rawData.highlights
    };

    await getObjetsAsync(babylon);
}

function createOutput(artWork) {
    console.log(artWork);
    const thumb = document.createElement('div');
    thumb.className = "thumb";
    const link = document.createElement('a');
    link.href = "config.html?objectID=" + artWork.objectID; //TODO

    link.id = "object-".concat(artWork.objectID); //TODO
    const img = document.createElement('img');
    img.src = artWork.primaryImageSmall;
    img.alt = artWork.objectID;
    link.appendChild(img);
    const museumlLabel = document.createElement('div');
    museumlLabel.className = "museum-label";
    const artist = document.createElement('span');
    artist.className = "artist";
    artist.innerText = artWork.artistDisplayName;
    const title = document.createElement('span');
    title.className = "title";
    title.innerText = artWork.title;
    const date = document.createElement('span');
    date.className = "date";
    date.innerText = artWork.objectDate;
    const comma = document.createTextNode(', ');
    museumlLabel.appendChild(artist);
    museumlLabel.appendChild(title);
    museumlLabel.appendChild(comma);
    museumlLabel.appendChild(date);
    link.appendChild(museumlLabel);
    thumb.appendChild(link);
    return thumb;
}

export var ObjectsCache = {
    retrieve: function (key) {
        if (key in localStorage) {
            return JSON.parse(localStorage[key]);
        }
    },
    store: 
};

displayCartItems();

class ArtWork {
    
}export function displayCartItems() {
    let cart = JSON.parse(localStorage.getItem('cart'));

    if (cart !== null){
       let numCartItems = Object.values(cart).length;
       let elementCartLink = document.getElementById('cart-link');
       elementCartLink.innerText = `Cart (${numCartItems})`;
    }  
}

export 