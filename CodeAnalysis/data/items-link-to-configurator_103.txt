export 


export function getCartProducts() {
    let cart = JSON.parse(localStorage.getItem('cart'));
    if (!cart) 
    return cart;
}

export function isCartEmpty() {
    const number = getCartProducts().length;
    console.log("cart items rn:" + number);
    return number < 1;
}


export 

export function countCart() {
    const cart = document.getElementById("cart-link");
    const count = getCartProducts().length;
    if (count > 0) {
        cart.innerHTML = `Cart (${count})`;
    }
}
import {
    findObject, setPrice
} from "./general.js";
import {calculatePrice, render} from "./frame.js";
import {
    countCart,
    getCartProducts,
    isCartEmpty,
    removeFromCart
} from "./cart-helpers.js";


countCart();
calcPrice().then(r => console.log(r));

const cartElement = document.getElementById("cart");

if (isCartEmpty())  else {
    document.getElementById('checkout-button').disabled = false;
}

async function calcPrice() {
    let totalPrice = 0;
    const items = getCartProducts();

    for (let index = 0; index < items.length; index++) {
        const item = items[index];
        const obj = await findObject(item.objectID);

        const cartItemDiv = document.createElement("div");
        cartItemDiv.classList.add("cart-item");
        const size = {
            'S': 'Small',
            'M': 'Medium',
            'L': 'Large'
        }
        const print = size[item.printSize] + ' print';
        const frame = `in a ${item.frameWidth / 10}&nbsp;cm ${item.frameStyle} frame`;
        const mat = item.matWidth > 0 ? ` with a ${item.matWidth / 10}&nbsp;cm ${item.matColor} mat.` ;

        cartItemDiv.innerHTML =
            `<div class="cart-preview" id="preview-container-${index}">
                <a href="config.html?${new URLSearchParams(item)}">
                    <img class="cart-thumb" src="${obj.primaryImageSmall}" id="preview-${index}" alt="${obj.title}">
                </a>
            </div>
            <div class="museum-label">
            <div>
                <span class="artist">${obj.artistDisplayName}</span>
                <span class="title">${obj.title}</span>,
                <span class="date">${obj.objectDate}</span>
                <br><br>
                <span class="frame-description">${print} ${frame}${mat}</span>
            </div>
            <div class="cart-price">â‚¬ <span id="price-${index}">0</span></div>
            <button class="cart-remove" onclick="remove(${index});"></button>
            </div>`;
        cartElement.insertBefore(cartItemDiv, cartElement.firstChild);

        const preview = document.getElementById("preview-" + index);
        const previewContainer = document.getElementById("preview-container-" + index);

        render(preview, previewContainer,
            item.printSize,
            item.frameStyle, item.frameWidth,
            item.matColor, item.matWidth);

        const price = calculatePrice(item.printSize, item.frameStyle, item.frameWidth, item.matWidth);
        document.getElementById("price-" + index).innerHTML = `${price}`;
        totalPrice += price;
    }
    setPrice("#price-total", totalPrice);
}

window.remove = 
export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return {S: S, M: M, L: L};
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price;
    let frameBaseCost = 30;
    let costFrame = [];
    costFrame['classic'] = 1;
    costFrame['natural'] = 0.80;
    costFrame['shabby'] = 0.90;
    costFrame['elegant'] = 0.85;

    let costMat = 0.05;

    let costFactorSize = [];
    costFactorSize["S"] = 1;
    costFactorSize["M"] = 2;
    costFactorSize["L"] = 3.5;

    price = costFactorSize[printSize] *
        (frameBaseCost +
            costMat * matWidth +
            costFrame[frameStyle] * frameWidth);

    return ((Math.round((price + Number.EPSILON) * 100)) / 100);
}
const MET_BASE = "https://collectionapi.metmuseum.org/public/collection/v1";

export function setPrice(selector, price) {
    document.querySelector(selector).innerHTML = price;
}

export async function findObject(id) {
    let url = MET_BASE + "/objects/" + id;

    let obj = JSON.parse(localStorage.getItem(id)); // check if cached
 
    if(obj == null) // if not fetch
    {
        obj = await fetch(url).then(handleErrors).then( response =>  response.json());
        localStorage.setItem(id, JSON.stringify(obj)); // cache fetched obj
    }

    return obj;
}


export 

function handleErrors(response) {
    if (!response.ok) 
    return response;
}
