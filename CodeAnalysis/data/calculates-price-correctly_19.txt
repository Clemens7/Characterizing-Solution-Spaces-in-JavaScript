import { Artwork } from './artwork.js';
import * as ArtworkCache from './artwork-cache.js';

export 

export 

export 

export async function retrieveObjectErrorHandling(id) {
    const artwork = ArtworkCache.retrieve(id);
    if (artwork) 

    const url = met_api_search_object_url(id);
    const responseObject = await fetch(url)
        .then(response => response.json())
        .then(data => {
            return data;
        })
        .catch();

    if(responseObject.message != null)
    ArtworkCache.store(responseObject);
    return new Artwork(id, responseObject.artistDisplayName,
        responseObject.title, responseObject.objectDate, responseObject.primaryImageSmall);
}



function met_api_search_object_url(id) {
    const MET_API_SEARCH_OBJECT_URL = `https://collectionapi.metmuseum.org/public/collection/v1/objects/${id}`;
    return MET_API_SEARCH_OBJECT_URL;
}export function retrieve(id) {
    if (id in localStorage) 
}

export function store(artworkObject) {
    const key = artworkObject.objectID;
    console.log(`Storing ${key} in local storage`);
    localStorage[key] = JSON.stringify(artworkObject);
}import {getPrintSizes, render, calculatePrice} from "./frame.js";

export class ResultContainer {
    

    

    
}

export class ConfigImage{

    constructor() {
        this.configImage = document.getElementById("preview-container")
    }

    clear(){
        this.configImage.innerHTML = "";
    }

    addArtworkFrame(artwork,printSize,frameWidth,frameStyle,matColor,matWidth){

        const label = document.createElement('div');
        label.classList.add("museum-label");

        const artist = document.createElement('span');
        artist.classList.add("artist");
        artist.innerText = artwork.artist;

        const title = document.createElement('span');
        title.classList.add("text");
        title.innerText = artwork.title+ ", " + artwork.date;

        label.appendChild(artist);
        label.appendChild(title);
        label.classList.add("museum-label");
        label.id = "image-label";
        const cont = document.createElement('div');
        cont.id = "cont";
        const image = document.createElement('img');
        image.src = artwork.image;
        image.alt = `Picture of artwork ${artwork.title}`;
        image.id = `object-image-${artwork.id}`;
        image.id = "preview-image";

        image.style.maxWidth="500px";
        image.style.maxHeight="400px";
        cont.appendChild(image);
        this.configImage.appendChild(cont);
        this.configImage.appendChild(label);


        printSize = document.querySelector('input[name="printSize"]:checked').value;
        frameStyle = document.querySelector('input[name="frameStyle"]:checked').value;
        frameWidth = document.getElementsByName("frameWidth")[0].value;
        matColor = document.querySelector('input[name="matColor"]:checked').value;
        matWidth = document.getElementsByName("matWidth")[0].value;

        const imgs = new Image;
        imgs.onload = function waitForLoadingImage() {render(document.getElementById("preview-image"),document.getElementById("cont"),
            printSize,frameStyle,frameWidth,matColor,matWidth,true)};
        imgs.src=artwork.image;

    }
}

export class DisplayCart {
    

    

    

    
}





export class ArtworkCart{
    constructor(objectId, printSize, frameStyle, frameSize, frameWidth, matColor, matWidth) {
        this.objectID = objectId;
        this.printSize = printSize;
        this.frameStyle = frameStyle;
        this.frameWidth = frameWidth;
        this.matColor = matColor;
        this.matWidth = matWidth;
    }
}export class Artwork{
    constructor(id, artist, title, date, image) {
        this.id = id;
        this.artist = artist;
        this.title = title;
        this.date = date;
        this.image = image;
    }
}
if(value <=10 && value>=0){matWidthR.value = this.value}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2
    const w = img.naturalWidth;
    const h = img.naturalHeight;
    if (h > w) {
        S[0] = Math.floor(w * S[1] / h);
        M[0] = Math.floor(w * M[1] / h);
        L[0] = Math.floor(w * L[1] / h);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth, changeDom) {
    const printSizes = getPrintSizes(img);

    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];
    let x;
    if (w > h)  else {
            x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }


    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };
    if(changeDom === true){
        document.getElementById("print-size-s-label").innerText = "Small \n"+ printSizes.S[1] + " x " +printSizes.S[0];
        document.getElementById("print-size-m-label").innerText = "Medium \n"+ printSizes.M[1] + " x " +printSizes.M[0];
        document.getElementById("print-size-l-label").innerText = "Large \n"+ printSizes.L[1] + " x " +printSizes.L[0];
        document.getElementById("total-size").innerText = printSizes[printSize][1] + frameWidth / 2 + matWidth / 2 + " x " + (printSizes[printSize][0] + frameWidth / 2 + matWidth / 2);
        document.getElementById("price").innerText = "â‚¬ " + calculatePrice(printSize,frameStyle,frameWidth,matWidth).toFixed(2);
    }

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 30;
    if(frameStyle === 'classic'){
        price += Number(frameWidth);
    }else if(frameStyle ==='natural'){
        price += frameWidth*0.8;
    }else if(frameStyle === 'shabby'){
        price += frameWidth*0.9;
    }else{
        price += frameWidth*0.85;
    }
    price += matWidth*0.05;
    if(printSize === 'M'){
        price = price*2;
    }else if(printSize ==='L'){
        price = price*3.5;
    }
    price = Math.round(price*100) / 100;
    return parseFloat(price.toFixed(2));
}
