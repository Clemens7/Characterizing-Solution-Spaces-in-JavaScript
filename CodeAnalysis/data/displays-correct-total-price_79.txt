import { Artwork } from './artwork.js';
import * as ArtworkCache from './artwork-cache.js'

const MET_BASE_URL = 'https://collectionapi.metmuseum.org/public/collection/v1/';
var artworks = [];
export 
export 

export 

export async function getSingleImageData(objid) {
  let obj = await ArtworkCache.retrieve(objid);
  if (!obj) {
    let response = await fetch(MET_BASE_URL + 'objects/' + objid);
    let rawData = await response.json();
    obj = new Artwork(rawData.objectID, rawData.artistDisplayName, rawData.title, rawData.objectDate, rawData.primaryImageSmall, '/config.html?objectID=' + objid);
    ArtworkCache.store(objid, obj);
  }
  return obj;
}
export 
export 

import { Artwork } from './artwork.js';

export function retrieve(key) {
    if(key in localStorage) 
}

export function store(key, object) {
    localStorage[key] = JSON.stringify(object);
}export class Artwork {
  constructor(objectid,artist, title, date, thumbnail, url) {
    this.objectid = objectid;
    this.artist = artist;
    this.title = title;
    this.date = date;
    this.thumbnail = thumbnail;
    this.url = url;
  }
}
    /*
    const cartlink = document.getElementById('cart-link');
    var cartAmount = 0;
    try{
      cartAmount = JSON.parse(localStorage['cart']).length;
    }catch(e){};
    cartlink.innerText= 'Cart (' + cartAmount +')';

    document.addEventListener('DOMContentLoaded', event => {
      if(localStorage.getItem('cart') === null){
        document.getElementsByClassName('cart-item')[0].innerText = 'There are no items in your shopping cart.';
        document.getElementById('checkout-button').disabled = true;
      }
    })
  
let cart = 'cart';

export function getItemsFromStorage() {
return window.localStorage[cart] ? JSON.parse(window.localStorage.getItem(cart)) ;
}

export 

export 

export function displayCartCount() {
    const cartLink = document.getElementById("cart-link");
    const count = getItemsFromStorage().length;
    if (count > 0) {
        cartLink.innerHTML = "Cart (" + count + ")";
    }
}export function getPrintSizes(img) {
    let S = [297, 297]; // A4
    let M = [420, 420]; // A3
    let L = [594, 594]; // A2

    const w = img.naturalWidth;
    const h = img.naturalHeight;

    if (h > w)  else {
        S[1] = Math.floor(h * S[0] / w);
        M[1] = Math.floor(h * M[0] / w);
        L[1] = Math.floor(h * L[0] / w);
    }

    return { S: S, M: M, L: L };
}

export function render(img, container, printSize, frameStyle, frameWidth, matColor, matWidth) {
    const printSizes = getPrintSizes(img);
    const w = printSizes[printSize][0];
    const h = printSizes[printSize][1];

    let x;
    if (w > h)  else {
        x = container.offsetHeight / (h + 2 * matWidth + 2 * frameWidth);
    }

    const frameImageSlices = {
        classic: 115,
        natural: 75,
        shabby: 120,
        elegant: 107
    };

    const matColors = {
        ivory: '#fffff0',
        mint: '#e0e6d4',
        wine: '#50222d',
        indigo: '#29434c',
        coal: '#333a3d',
    };

    img.style.boxSizing = 'border-box';
    img.width = (w + 2 * matWidth + 2 * frameWidth) * x;
    img.height = (h + 2 * matWidth + 2 * frameWidth) * x;
    img.style.borderImageSource = `url(frame-styles/${frameStyle}.jpg)`;
    img.style.borderImageSlice = frameImageSlices[frameStyle];
    img.style.borderWidth = `${frameWidth * x}px`;
    img.style.backgroundColor = matColors[matColor];
    img.style.padding = `${matWidth * x}px`;
}

export function calculatePrice(printSize, frameStyle, frameWidth, matWidth) {
    let price = 0.0;
    price += 30;
    let woodCost = 0.0;
    if(frameStyle === 'classic') 
    if(frameStyle === 'natural') woodCost = 0.8;
    if(frameStyle === 'shabby') woodCost = 0.9;
    if(frameStyle === 'elegant') woodCost = 0.85;
    price += frameWidth / 10 * woodCost;
    price += matWidth / 10 * 0.05;
    if(printSize === 'M') 
    if(printSize === 'L') price *= 3.5;
    return (Math.round((price + Number.EPSILON) * 100) / 100);
}

/* My Functions */



